{"version":3,"sources":["thi/ng/geom/quaternion.cljc"],"mappings":"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","names":["cljs.core/PROTOCOL_SENTINEL","p__29422","vec__29423","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","unused__9235__auto__","self__","G__29447","js/Error","args29377","cljs.core/aclone","this__4428__auto__","writer__4429__auto__","opt__4430__auto__","cljs.core/-write","thi.ng.geom.quaternion/Quat4","thi.ng.geom.quaternion/->Quat4","x","y","z","w","_hasheq","_","k","thi.ng.geom.quaternion/swizzle4","nf","fexpr__29440","v","thi.ng.geom.quaternion/swizzle4-assoc","G__29383","thi.ng.xerror.core/key-error!","cljs.core/cons","G__29381","G__29382","thi.ng.geom.vector.vec3.cljs$core$IFn$_invoke$arity$3","o","c","cljs.core/compare","cljs.core/count","cljs.core/mix-collection-hash","cljs.core/hash","cljs.core/imul","cljs.core/sequential?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/first","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","s","theta","t","Math/sin","Math/cos","q","qx","qy","qz","qw","r","rx","ry","rz","rw","x'","y'","z'","w'","thi.ng.math.core/*eps*","eps","and__4174__auto__","thi.ng.math.core.delta_EQ_.cljs$core$IFn$_invoke$arity$3","G__29474","Math/sqrt","m","G__29464","d","id","thi.ng.math.core/abs*","vec__29434","Math/acos","stheta","G__29437","a","b","G__29438","G__29439","opts","vec__29415","tx","ty","tz","cljs.core.get.cljs$core$IFn$_invoke$arity$2","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","thi.ng.geom.matrix/Matrix44","or__4185__auto__","vx","vy","vz","ix","iy","iz","nx","ny","nz","iw","js/Float32Array","thi.ng.geom.vector/Vec3","cljs.core/meta","thi.ng.geom.quaternion/Q","var_args","G__29503","thi.ng.geom.quaternion/quat","p__29511","vec__29512","p__29515","vec__29516","thi.ng.geom.quaternion/quat-from-axis-angle","axis","thi.ng.geom.quaternion.quat.cljs$core$IFn$_invoke$arity$2","thi.ng.math.core.normalize.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.vector.vec3.cljs$core$IFn$_invoke$arity$1","thi.ng.geom.quaternion/as-axis-angle","vec__29521","thi.ng.math.core.normalize.cljs$core$IFn$_invoke$arity$1","mag","G__29524","thi.ng.geom.quaternion/quat-from-euler","order","alpha","beta","gamma","vec__29529","G__29532","cljs.core/Keyword","thi.ng.geom.vector/V3X","thi.ng.geom.vector/V3Y","thi.ng.geom.vector/V3Z","thi.ng.xerror.core.illegal_arg_BANG_.cljs$core$IFn$_invoke$arity$1","thi.ng.geom.quaternion/quat-from-matrix","trace","G__29547","G__29548","s'","G__29549","G__29550","thi.ng.geom.quaternion/alignment-quat","from","to","thi.ng.math.core/cross","G__29563","G__29564","Math/atan2","thi.ng.math.core/mag","thi.ng.math.core.dot.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.quaternion/lookup4","G__29565","default","G__29567","G__29569","n","cljs.core/name","G__29571","thi.ng.geom.vector.vec2.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.quaternion/swizzle-assoc*","ctor","keymap","cljs.core.into.cljs$core$IFn$_invoke$arity$2","acc","cljs.core/vec","cljs.core/seq","i","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","G__29580","cljs.core/next","G__29582","G__29587"],"sourcesContent":["(ns thi.ng.geom.quaternion\n  #?(:cljs\n     (:require-macros\n      [thi.ng.math.macros :as mm]))\n  (:require\n   [thi.ng.geom.core :as g]\n   [thi.ng.geom.vector :as v :refer [vec2 vec3 V3X V3Y V3Z]]\n   [thi.ng.geom.matrix :as mat]\n   [thi.ng.xerror.core :as err]\n   [thi.ng.math.core :as m :refer [*eps* PI TWO_PI]]\n   #?(:clj [thi.ng.math.macros :as mm]))\n  #?(:clj\n     (:import\n      [thi.ng.geom.matrix Matrix44])))\n\n(declare swizzle4 swizzle4-assoc)\n\n(deftype Quat4\n    #?(:clj\n       [^double x ^double y ^double z ^double w\n        ^:unsynchronized-mutable _hasheq\n        ^:unsynchronized-mutable _hashc]\n       :cljs\n       [x y z w ^:mutable _hasheq])\n\n  #?@(:clj\n      [clojure.lang.ILookup\n       (valAt\n        [_ k] (swizzle4 _ k nil))\n       (valAt\n        [_ k nf] (swizzle4 _ k nf))\n\n       java.util.concurrent.Callable\n       (call\n        [_] (.invoke ^clojure.lang.IFn _))\n\n       java.lang.Runnable\n       (run\n         [_] (.invoke ^clojure.lang.IFn _))\n\n       clojure.lang.IFn\n       (invoke\n        [_ k] (swizzle4 _ k nil))\n       (invoke\n        [_ k nf] (swizzle4 _ k nf))\n       (applyTo\n        [_ args]\n        (condp == (count args)\n          1 (swizzle4 _ (first args) nil)\n          2 (swizzle4 _ (first args) (second args))\n          (err/arity-error! (count args))))\n\n       clojure.lang.Associative\n       clojure.lang.IPersistentVector\n       (count\n        [_] 4)\n       (length\n        [_] 4)\n       (containsKey\n        [_ k] (not (nil? (#{0 1 2 3 :x :y :z :w} k))))\n       (entryAt\n        [_ k] (clojure.lang.MapEntry. k (swizzle4 _ k nil)))\n       (assoc\n        [_ k v] (swizzle4-assoc _ k v))\n       (assocN\n        [_ k v]\n        (case (int k)\n          0 (Quat4. v y z w -1 #?(:clj -1))\n          1 (Quat4. x v z w -1 #?(:clj -1))\n          2 (Quat4. x y v w -1 #?(:clj -1))\n          3 (Quat4. x y z v -1 #?(:clj -1))\n          (err/key-error! k)))\n\n       java.util.Collection\n       (isEmpty\n        [_] false)\n       (iterator\n        [_] (.iterator ^java.util.Collection (list x y z w)))\n       (toArray\n        [_] (double-array 4 [x y z w]))\n       (size\n        [_] 4)\n\n       clojure.lang.IPersistentCollection\n       clojure.lang.Indexed\n       clojure.lang.Sequential\n       clojure.lang.Seqable\n       java.util.List\n       (seq\n        [_] (seq [x y z w]))\n       (empty\n        [_] (err/unsupported!))\n       (cons\n        [_ v] [x y z w v])\n       (peek\n        [_] w)\n       (pop\n        [_] (vec3 x y z))\n       (rseq\n        [_] (Quat4. w z y x -1 #?(:clj -1)))\n       (get\n        [_ k] (case (int k) 0 x, 1 y, 2 z, 3 w, (err/key-error! k)))\n       (nth\n        [_ k] (case (int k) 0 x, 1 y, 2 z, 3 w, (err/key-error! k)))\n       (nth\n        [_ k nf] (case (int k) 0 x, 1 y, 2 z, 3 w, nf))\n       (equiv\n        [_ o]\n        (if (instance? Quat4 o)\n          (and (clojure.lang.Numbers/equiv x (.-x ^Quat4 o))\n               (clojure.lang.Numbers/equiv y (.-y ^Quat4 o))\n               (clojure.lang.Numbers/equiv z (.-z ^Quat4 o))\n               (clojure.lang.Numbers/equiv w (.-w ^Quat4 o)))\n          (and (instance? java.util.Collection o)\n               (== 4 (count o))\n               (clojure.lang.Util/equiv x (first o))\n               (clojure.lang.Util/equiv y (nth o 1))\n               (clojure.lang.Util/equiv z (nth o 2))\n               (clojure.lang.Util/equiv w (nth o 3)))))\n       (equals\n        [_ o]\n        (if (instance? Quat4 o)\n          (and (clojure.lang.Util/equals x (.-x ^Quat4 o))\n               (clojure.lang.Util/equals y (.-y ^Quat4 o))\n               (clojure.lang.Util/equals z (.-z ^Quat4 o))\n               (clojure.lang.Util/equals w (.-w ^Quat4 o)))\n          (and (instance? java.util.Collection o)\n               (== 4 (count o))\n               (clojure.lang.Util/equals x (first o))\n               (clojure.lang.Util/equals y (nth o 1))\n               (clojure.lang.Util/equals z (nth o 2))\n               (clojure.lang.Util/equals w (nth o 3)))))\n\n       Comparable\n       (compareTo\n        [_ o]\n        (if (instance? Quat4 o)\n          (let [c (compare x (.-x ^Quat4 o))]\n            (if (== 0 c)\n              (let [c (compare y (.-y ^Quat4 o))]\n                (if (== 0 c)\n                  (let [c (compare z (.-z ^Quat4 o))]\n                    (if (== 0 c)\n                      (compare w (.-w ^Quat4 o))\n                      c))\n                  c))\n              c))\n          (let [c (count o)]\n            (if (== 4 c) (- (compare o _)) (- 4 c)))))\n       (hashCode\n        [_]\n        (if (== -1 _hashc)\n          (set! _hashc\n                (-> 31\n                    (unchecked-add-int (hash x))\n                    (unchecked-multiply-int 31)\n                    (unchecked-add-int (hash y))\n                    (unchecked-multiply-int 31)\n                    (unchecked-add-int (hash z))\n                    (unchecked-multiply-int 31)\n                    (unchecked-add-int (hash w))))\n          _hashc))\n\n       clojure.lang.IHashEq\n       (hasheq\n        [_]\n        (if (== -1 _hasheq)\n          (set! _hasheq\n                (mix-collection-hash\n                 (if (== -1 _hashc)\n                   (set! _hashc\n                         (-> 31\n                             (unchecked-add-int (hash x))\n                             (unchecked-multiply-int 31)\n                             (unchecked-add-int (hash y))\n                             (unchecked-multiply-int 31)\n                             (unchecked-add-int (hash z))\n                             (unchecked-multiply-int 31)\n                             (unchecked-add-int (hash w))))\n                   _hashc)\n                 4))\n          _hasheq))]\n\n      :cljs\n      [ICloneable\n       (-clone\n        [_] (Quat4. x y z w -1))\n\n       ILookup\n       (-lookup\n        [_ k] (swizzle4 _ k nil))\n       (-lookup\n        [_ k nf] (swizzle4 _ k nf))\n\n       IFn\n       (-invoke\n        [_ k] (swizzle4 _ k nil))\n       (-invoke\n        [_ k nf] (swizzle4 _ k nf))\n\n       ICounted\n       (-count\n        [_] 4)\n\n       IAssociative\n       (-contains-key?\n        [_ k] (not (nil? (#{0 1 2 3 :x :y :z :w} k))))\n       (-assoc\n        [_ k v] (swizzle4-assoc _ k v))\n\n       IVector\n       (-assoc-n\n        [_ k v]\n        (case (int k)\n          0 (Quat4. v y z w -1 #?(:clj -1))\n          1 (Quat4. x v z w -1 #?(:clj -1))\n          2 (Quat4. x y v w -1 #?(:clj -1))\n          3 (Quat4. x y z v -1 #?(:clj -1))\n          (err/key-error! k)))\n\n       ISequential\n       ISeq\n       (-first\n        [_] x)\n       (-rest\n        [_] (cons y (cons z (cons w nil))))\n\n       INext\n       (-next\n        [_] (cons y (cons z (cons w nil))))\n\n       ISeqable\n       (-seq\n        [_] _)\n\n       IReversible\n       (-rseq\n        [_] (Quat4. w z y x -1 #?(:clj -1)))\n\n       IIndexed\n       (-nth\n        [_ k] (case (int k) 0 x, 1 y, 2 z, 3 w, (err/key-error! k)))\n       (-nth\n        [_ k nf] (case (int k) 0 x, 1 y, 2 z, 3 w, nf))\n\n       ICollection\n       (-conj\n        [_ v] [x y z w v])\n\n       IStack\n       (-peek\n        [_] w)\n       (-pop\n        [_] (vec3 x y z))\n\n       IComparable\n       (-compare\n        [_ o]\n        (if (instance? Quat4 o)\n          (let [c (compare x (.-x ^Quat4 o))]\n            (if (== 0 c)\n              (let [c (compare y (.-y ^Quat4 o))]\n                (if (== 0 c)\n                  (let [c (compare z (.-z ^Quat4 o))]\n                    (if (== 0 c)\n                      (compare w (.-w ^Quat4 o))\n                      c))\n                  c))\n              c))\n          (let [c (count o)]\n            (if (== 4 c) (- (compare o _)) (- 4 c)))))\n\n       IHash\n       (-hash\n        [_]\n        (if (== -1 _hasheq)\n          (set! _hasheq\n                (mix-collection-hash\n                 (-> (+ 31 (hash x))\n                     (bit-or 0)\n                     (imul 31) (+ (hash y))\n                     (bit-or 0)\n                     (imul 31) (+ (hash z))\n                     (bit-or 0)\n                     (imul 31) (+ (hash w))\n                     (bit-or 0))\n                 4))\n          _hasheq))\n\n       IEquiv\n       (-equiv\n        [_ o]\n        (if (instance? Quat4 o)\n          (and (== x (.-x ^Quat4 o)) (== y (.-y ^Quat4 o))\n               (== z (.-z ^Quat4 o)) (== w (.-w ^Quat4 o)))\n          (and (sequential? o) (== 4 (count o))\n               (= x (first o)) (= y (nth o 1))\n               (= z (nth o 2)) (= w (nth o 3)))))])\n  Object\n  (toString\n    [_] (str \"[\" x \" \" y \" \" z \" \" w \"]\"))\n\n  g/IScale\n  (scale\n    [_ s]\n    (Quat4. (* x s) (* y s) (* z s) (* w s) -1 #?(:clj -1)))\n\n  g/IRotate3D\n  (rotate-x\n    [_ theta]\n    (let [t (/ theta 2.0)\n          s (Math/sin t) c (Math/cos t)]\n      (Quat4.\n       (mm/madd x c w s)\n       (mm/madd y c z s)\n       (mm/msub z c y s)\n       (mm/msub w c x s)\n       -1 #?(:clj -1))))\n  (rotate-y\n    [_ theta]\n    (let [t (/ theta 2.0)\n          s (Math/sin t) c (Math/cos t)]\n      (Quat4.\n       (mm/msub x c z s)\n       (mm/madd y c w s)\n       (mm/madd z c x s)\n       (mm/msub w c y s)\n       -1 #?(:clj -1))))\n  (rotate-z\n    [_ theta]\n    (let [t (/ theta 2.0)\n          s (Math/sin t) c (Math/cos t)]\n      (Quat4.\n       (mm/madd x c y s)\n       (mm/msub y c x s)\n       (mm/madd z c w s)\n       (mm/msub w c z s)\n       -1 #?(:clj -1))))\n\n  m/IMathOps\n  (+\n    [_ q]\n    (let [q ^Quat4 q]\n      (Quat4.\n       (+ x (.-x q))\n       (+ y (.-y q))\n       (+ z (.-z q))\n       (+ w (.-w q))\n       -1 #?(:clj -1))))\n  (-\n    [_ q]\n    (let [q ^Quat4 q]\n      (Quat4.\n       (- x (.-x q))\n       (- y (.-y q))\n       (- z (.-z q))\n       (- w (.-w q))\n       -1 #?(:clj -1))))\n  (*\n    [_ q]\n    (let [q ^Quat4 q\n          qx (.-x q) qy (.-y q) qz (.-z q) qw (.-w q)]\n      (Quat4.\n       (mm/maddsub x qw w qx y qz z qy)\n       (mm/maddsub y qw w qy z qx x qz)\n       (mm/maddsub z qw w qz x qy y qx)\n       (mm/msub w qw x qx y qy z qz)\n       -1 #?(:clj -1))))\n  (*\n    [_ q r]\n    (let [q ^Quat4 q r ^Quat4 r\n          qx (.-x q) qy (.-y q) qz (.-z q) qw (.-w q)\n          rx (.-x r) ry (.-y r) rz (.-z r) rw (.-w r)\n          x' (mm/maddsub x qw w qx y qz z qy)\n          y' (mm/maddsub y qw w qy z qx x qz)\n          z' (mm/maddsub z qw w qz x qy y qx)\n          w' (mm/msub w qw x qx y qy z qz)]\n      (Quat4.\n       (mm/maddsub x' rw w' rx y' rz z' ry)\n       (mm/maddsub y' rw w' ry z' rx x' rz)\n       (mm/maddsub z' rw w' rz x' ry y' rx)\n       (mm/msub w' rw x' rx y' ry z' rz)\n       -1 #?(:clj -1))))\n\n  m/IDeltaEquals\n  (delta=\n    [_ q] (m/delta= _ q *eps*))\n  (delta=\n    [_ q eps]\n    (and (sequential? q)\n         (== 4 (count q))\n         (m/delta= x (first q) eps)\n         (m/delta= y (nth q 1) eps)\n         (m/delta= z (nth q 2) eps)\n         (m/delta= w (nth q 3) eps)))\n\n  m/IDotProduct\n  (dot\n    [_ q]\n    (let [q ^Quat4 q]\n      (mm/madd x (.-x q) y (.-y q) z (.-z q) w (.-w q))))\n\n  m/IMagnitude\n  (mag\n    [_] (Math/sqrt (mm/madd x x y y z z w w)))\n  (mag-squared\n    [_] (mm/madd x x y y z z w w))\n\n  m/INormalize\n  (normalize [_]\n    (let [m (Math/sqrt (mm/madd x x y y z z w w))]\n      (if (> m *eps*)\n        (Quat4. (/ x m) (/ y m) (/ z m) (/ w m) -1 #?(:clj -1))\n        _)))\n\n  m/IConjugate\n  (conjugate [_]\n    (Quat4. (- x) (- y) (- z) w -1 #?(:clj -1)))\n\n  m/IInvert\n  (invert [_]\n    (let [d (m/mag-squared _)\n          d (if (zero? d) 0.0 (/ d))\n          id (- d)]\n      (Quat4. (* x id) (* y id) (* z id) (* w d) -1 #?(:clj -1))))\n\n  m/IInterpolate\n  (mix [_ q] (m/mix _ q 0.5))\n  (mix [_ q t]\n    (let [d (m/dot _ q)]\n      (if (< (m/abs* d) 1.0)\n        (let [theta (Math/acos d)\n              stheta (Math/sqrt (mm/madd d (- d) 1.0))\n              [a b] (if (< (m/abs* stheta) 0.001)\n                      [0.5 0.5]\n                      [(/ (Math/sin (mm/subm 1.0 t theta)) stheta)\n                       (/ (Math/sin (* t theta)) stheta)])\n              q ^Quat4 q]\n          (Quat4.\n           (mm/madd x a (.-x q) b)\n           (mm/madd y a (.-y q) b)\n           (mm/madd z a (.-z q) b)\n           (mm/madd w a (.-w q) b)\n           -1 #?(:clj -1)))\n        _)))\n\n  g/IMatrixConvert\n  (as-matrix\n    [_] (g/as-matrix _ nil))\n  (as-matrix\n    [_ opts]\n    (let [[tx ty tz] (get opts :translate)\n          x2 (+ x x)\n          y2 (+ y y)\n          z2 (+ z z)\n          xx (* x x2)\n          xy (* x y2)\n          xz (* x z2)\n          yy (* y y2)\n          yz (* y z2)\n          zz (* z z2)\n          wx (* w x2)\n          wy (* w y2)\n          wz (* w z2)]\n      (thi.ng.geom.matrix.Matrix44.\n       (- 1.0 (+ yy zz)) (+ xy wz) (- xz wy) 0.0\n       (- xy wz) (- 1.0 (+ xx zz)) (+ yz wx) 0.0\n       (+ xz wy) (- yz wx) (- 1.0 (+ xx yy)) 0.0\n       (or tx 0.0) (or ty 0.0) (or tz 0.0) 1.0\n       nil nil)))\n\n  g/IVectorTransform\n  (transform-vector\n    [_ [vx vy vz :as v]]\n    (let [ix (mm/maddsub w vx y vz z vy)\n          iy (mm/maddsub w vy z vx x vz)\n          iz (mm/maddsub w vz x vy y vx)\n          nx (- x) ny (- y) nz (- z)\n          iw (mm/msub nx vx y vy z vz)\n          ^doubles b #?(:clj (double-array 3) :cljs (js/Float32Array. 3))]\n      (aset b 0 (double (mm/maddsub ix w iw nx iy nz iz ny)))\n      (aset b 1 (double (mm/maddsub iy w iw ny iz nx ix nz)))\n      (aset b 2 (double (mm/maddsub iz w iw nz ix ny iy nx)))\n      (thi.ng.geom.vector.Vec3. b nil (meta v)))))\n\n#?(:clj (defmethod print-method Quat4 [^Quat4 o ^java.io.Writer w] (.write w (.toString o))))\n\n(def Q (Quat4. 0.0 0.0 0.0 1.0 -1 #?(:clj -1)))\n\n(defn quat\n  ([] Q)\n  ([[x y z] w] (Quat4. x y z w -1 #?(:clj -1)))\n  ([[x y z w]] (Quat4. x y z w -1 #?(:clj -1)))\n  ([x y z w] (Quat4. x y z w -1 #?(:clj -1))))\n\n(defn quat-from-axis-angle\n  [axis theta]\n  (let [theta (/ theta 2.0)]\n    (quat (m/normalize (vec3 axis) (Math/sin theta)) (Math/cos theta))))\n\n(defn as-axis-angle\n  [q]\n  (let [[x y z w] (m/normalize q)\n        theta (* 2.0 (Math/acos w))\n        mag (Math/sqrt (- 1.0 (* w w)))]\n    (if (< mag 0.0005)\n      [(vec3 x y z) theta]\n      [(vec3 (/ x mag) (/ y mag) (/ z mag)) theta])))\n\n(defn quat-from-euler\n  [order alpha beta gamma]\n  (let [[a b c] (case order\n                  :xyz [V3X V3Y V3Z]\n                  :yxz [V3Y V3X V3Z]\n                  :xzy [V3X V3Z V3Y]\n                  :zxy [V3Z V3X V3Y]\n                  :yzx [V3Y V3Z V3X]\n                  :zyx [V3Z V3Y V3X]\n                  (err/illegal-arg! order))]\n    (m/* (quat-from-axis-angle a alpha)\n         (quat-from-axis-angle b beta)\n         (quat-from-axis-angle c gamma))))\n\n;; Allan and Mark Watt's \"Advanced Animation and Rendering Techniques\"\n;; (ACM Press 1992)\n;; http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/\n\n(defn quat-from-matrix\n  [^Matrix44 m]\n  (let [trace (mm/add (.-m00 m) (.-m11 m) (.-m22 m))]\n    (if (pos? trace)\n      (let [s (/ 0.5 (Math/sqrt (inc trace)))]\n        (Quat4.\n         (mm/subm (.-m12 m) (.-m21 m) s)\n         (mm/subm (.-m20 m) (.-m02 m) s)\n         (mm/subm (.-m01 m) (.-m10 m) s)\n         (/ 0.25 s)\n         -1 #?(:clj -1)))\n      (if (and (> (.-m00 m) (.-m11 m)) (> (.-m00 m) (.-m22 m)))\n        (let [s (* 2.0 (Math/sqrt (inc (mm/sub (.-m00 m) (.-m11 m) (.-m22 m)))))\n              s' (/ s)]\n          (Quat4.\n           (* 0.25 s)\n           (mm/addm (.-m10 m) (.-m01 m) s')\n           (mm/addm (.-m20 m) (.-m02 m) s')\n           (mm/subm (.-m12 m) (.-m21 m) s')\n           -1 #?(:clj -1)))\n        (if (> (.-m11 m) (.-m22 m))\n          (let [s (* 2.0 (Math/sqrt (inc (mm/sub (.-m11 m) (.-m22 m) (.-m00 m)))))\n                s' (/ s)]\n            (Quat4.\n             (mm/addm (.-m10 m) (.-m01 m) s')\n             (* 0.25 s)\n             (mm/addm (.-m21 m) (.-m12 m) s')\n             (mm/subm (.-m20 m) (.-m02 m) s')\n             -1 #?(:clj -1)))\n          (let [s (* 2.0 (Math/sqrt (inc (mm/sub (.-m22 m) (.-m00 m) (.-m11 m)))))\n                s' (/ s)]\n            (Quat4.\n             (mm/addm (.-m20 m) (.-m02 m) s')\n             (mm/addm (.-m21 m) (.-m12 m) s')\n             (* 0.25 s)\n             (mm/subm (.-m01 m) (.-m10 m) s')\n             -1 #?(:clj -1))))))))\n\n(defn alignment-quat\n  [from to]\n  (let [from  (m/normalize from)\n        to    (m/normalize to)\n        axis  (m/cross from to)\n        theta (Math/atan2 (m/mag axis) (m/dot from to))]\n    (quat-from-axis-angle axis theta)))\n\n(defn lookup4\n  [^Quat4 _ k nf]\n  (case k\n    \\x (.-x _)\n    \\y (.-y _)\n    \\z (.-z _)\n    \\w (.-w _)\n    (or nf (err/key-error! k))))\n\n(defn swizzle4\n  [^Quat4 _ k default]\n  (if (number? k)\n    (case (int k)\n      0 (.-x _)\n      1 (.-y _)\n      2 (.-z _)\n      3 (.-w _)\n      (or default (err/key-error! k)))\n    (case k\n      :x (.-x _)\n      :y (.-y _)\n      :z (.-z _)\n      :w (.-w _)\n      (let [n (name k) c (count n)]\n        (case c\n          2 (vec2\n             (lookup4 _ (first n) default)\n             (lookup4 _ (nth n 1) default))\n          3 (vec3\n             (lookup4 _ (first n) default)\n             (lookup4 _ (nth n 1) default)\n             (lookup4 _ (nth n 2) default))\n          4 (Quat4.\n             (lookup4 _ (first n) default)\n             (lookup4 _ (nth n 1) default)\n             (lookup4 _ (nth n 2) default)\n             (lookup4 _ (nth n 3) default)\n             -1 #?(:clj -1))\n          (or default (err/key-error! k)))))))\n\n(defn swizzle-assoc*\n  [_ ctor keymap k v]\n  (let [n (name k)\n        c (count n)]\n    (if (and (<= c (count keymap)) (== c (count v) (count (into #{} n))))\n      (loop [acc (vec (seq _)), i 0, n n]\n        (if n\n          (recur (assoc acc (keymap (first n)) (v i)) (inc i) (next n))\n          (ctor acc)))\n      (err/key-error! k))))\n\n(defn swizzle4-assoc\n  [^Quat4 _ k v]\n  (if (number? k)\n    (case (int k)\n      0 (Quat4. v (.-y _) (.-z _) (.-w _) -1 #?(:clj -1))\n      1 (Quat4. (.-x _) v (.-z _) (.-w _) -1 #?(:clj -1))\n      2 (Quat4. (.-x _) (.-y _) v (.-w _) -1 #?(:clj -1))\n      3 (Quat4. (.-x _) (.-y _) (.-z _) v -1 #?(:clj -1))\n      (err/key-error! k))\n    (case k\n      :x (Quat4. v (.-y _) (.-z _) (.-w _) -1 #?(:clj -1))\n      :y (Quat4. (.-x _) v (.-z _) (.-w _) -1 #?(:clj -1))\n      :z (Quat4. (.-x _) (.-y _) v (.-w _) -1 #?(:clj -1))\n      :w (Quat4. (.-x _) (.-y _) (.-z _) v -1 #?(:clj -1))\n      (swizzle-assoc* _ quat {\\x 0 \\y 1 \\z 2 \\w 3} k v))))\n"]}