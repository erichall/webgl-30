{"version":3,"sources":["webgl_30/lessons/textures_3_revised.cljs"],"mappings":"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","names":["webgl-30.lessons.textures-3-revised/initial-state","webgl-30.math/deg->rad","js/webgl-30","js/webgl-30.lessons","js/webgl-30.lessons.textures-3-revised","js/webgl-30.lessons.textures-3-revised.state-atom","webgl-30.lessons.textures-3-revised/state-atom","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/deref","cljs.core/reset!","webgl-30.lessons.textures-3-revised/fragment-shader","webgl-30.lessons.textures-3-revised/vertex-shader","p__26379","map__26380","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","webgl-30.lessons.textures-3-revised/draw!","timestamp","gl","allocate-FB-texture","objects-to-draw","settings","rect","state","and__4174__auto__","webgl-30.webgl/framebuffer-complete?","map__26419","texture-obj","target","level","internalformat","format","type","pixels","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","webgl_30.webgl.pixels__GT_object.cljs$core$IFn$_invoke$arity$variadic","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","webgl-30.webgl/bind-framebuffer!","webgl_30.webgl.set_gl_viewport_BANG_.cljs$core$IFn$_invoke$arity$3","webgl_30.webgl.clear_color_BANG_.cljs$core$IFn$_invoke$arity$variadic","webgl-30.webgl/clear!","map__26423","program","attributes","features","webgl-30.webgl/use-program!","webgl-30.webgl/enable-features!","webgl-30.webgl/set-attributes!","cljs.core/vals","aspect","webgl-30.webgl/get-aspect","z-near","z-far","x-spacing","y-spacing","sec","projection-matrix","webgl-30.math/perspective-3d-matrix","seq__26427","cljs.core/seq","chunk__26428","count__26429","i__26430","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","s","map__26458","map__26470","z","r","Math/abs","G__26459","G__26471","Math/sin","x","G__26460","G__26472","y","G__26461","G__26473","Math/cos","r2","params-i","cljs.core/assoc-in","translation-matrix","webgl-30.math/translation-3d-matrix","webgl-30.webgl/bind-texture!","seq__26463","chunk__26464","count__26465","i__26466","seq__26475","chunk__26476","count__26477","i__26478","p","webgl-30.webgl/set-tex-parameteri!","webgl-30.webgl/set-uniform!","webgl-30.math/matrix-multiply-3d","webgl-30.webgl/draw-arrays!","webgl_30.webgl.set_gl_viewport_BANG_.cljs$core$IFn$_invoke$arity$1","js/requestAnimationFrame","t","G__26500","G__26501","webgl-30.lessons.textures-3-revised/raf-draw!","webgl-30.lessons.textures-3-revised/setup!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","p__26502","map__26503","webgl-30.webgl/link-shaders!","fb-texture","webgl-30.webgl/texture-pixels","js/Uint8Array","_","webgl-30.webgl/initialize-texture-from-img","img","webgl-30.webgl/texture-img","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","webgl-30.webgl/attribute","js/Float32Array","webgl-30.webgl/framebuffer","webgl-30.lessons.textures-3-revised/lesson","webgl-30.core/get-filename","canvas-id","webgl-30.core/ns-str","webgl-30.component/webgl-canvas","js/cancelAnimationFrame","webgl-30.webgl/get-context"],"sourcesContent":["(ns webgl-30.lessons.textures-3-revised\n  (:require [reagent.core :as r]\n            [webgl-30.math :as m]\n            [webgl-30.webgl :as webgl]\n            [webgl-30.shapes :as shapes]\n            [webgl-30.core :as c]\n            [webgl-30.component :refer [webgl-canvas slider]]))\n\n(def initial-state {:gl                  nil\n                    :raf-id              nil\n                    :running?            false\n                    :allocate-FB-texture true\n                    :rect                {:field-of-view-radians (m/deg->rad 60)}})\n(defonce state-atom (r/atom nil))\n(when (nil? @state-atom)\n  (reset! state-atom initial-state))\n\n(def fragment-shader\n  \"precision mediump float;\n\n   varying vec2 v_texcoord;\n\n   // The texture\n   uniform sampler2D u_texture;\n\n   void main() {\n       gl_FragColor = texture2D(u_texture, v_texcoord);\n   }\")\n\n(def vertex-shader\n  \"attribute vec4 a_position;\n   attribute vec2 a_texcoord;\n\n  uniform mat4 u_matrix;\n\n  varying vec2 v_texcoord;\n\n  void main() {\n    gl_Position = u_matrix * a_position;\n\n    // this can be passed to the fragment shader\n    v_texcoord = a_texcoord;\n  }\")\n\n(defn draw!\n  [timestamp {:keys [gl allocate-FB-texture objects-to-draw settings rect] :as state}]\n\n\n  (when (and allocate-FB-texture (webgl/framebuffer-complete? gl))\n    (let [{:keys [texture-obj target level internalformat format type pixels]} (get-in objects-to-draw [:my-f :textures :fb-texture])]\n      (webgl/pixels->object gl texture-obj target level internalformat 100 100 0 format type nil) ;; assign the img to a texture obj\n      (swap! state-atom assoc :allocate-FB-texture false)\n      ))\n\n  (webgl/bind-framebuffer! gl (get-in objects-to-draw [:my-f :framebuffers :framebuffer]))\n  (webgl/set-gl-viewport! gl 100 100)\n  (webgl/clear-color! gl 0 0 0 1)\n  (webgl/clear! gl)\n\n\n  (let [{:keys [program attributes features]} (get-in objects-to-draw [:my-f])]\n    (webgl/use-program! gl program)\n    (webgl/enable-features! gl features)\n    (webgl/set-attributes! gl program (vals attributes)))\n\n\n  (let [aspect (webgl/get-aspect gl)\n        z-near 1\n        z-far 2000\n        x-spacing 1.2\n        y-spacing 0.7\n        sec (* timestamp 0.001)\n        projection-matrix (m/perspective-3d-matrix (:field-of-view-radians rect) aspect z-near z-far)\n        program (get-in objects-to-draw [:my-f :program])]\n\n    (doseq [s settings]\n      (let [z (+ (- 5) (:z s))\n            r (* (Math/abs z) (Math/sin (* (:field-of-view-radians rect) 0.5)))\n            x (* r (Math/sin (* sec 0.2)))\n            y (* r 0.5 (Math/cos (* sec 0.2)))\n            r2 (+ (* r 0.2) 1)\n            {:keys [texture-obj params-i]} (get-in objects-to-draw [:my-f :textures :texture])\n            params-i (assoc-in params-i [:min-filter :param] (:filter s))\n            translation-matrix (m/translation-3d-matrix [(+ x (* (:x s) x-spacing r2)) (+ y (* (:y s) y-spacing r2)) z])]\n\n        (webgl/bind-texture! gl (.-TEXTURE_2D gl) texture-obj)\n        (doseq [p (vals params-i)]\n          (webgl/set-tex-parameteri! gl p))\n\n        (webgl/set-uniform! gl program {:name      \"u_matrix\"\n                                        :type      \"uniformMatrix4fv\"\n                                        :transpose false\n                                        :values    (m/matrix-multiply-3d translation-matrix projection-matrix)})\n\n        (webgl/set-uniform! gl program {:name   \"u_texture\"\n                                        :type   \"uniform1i\"\n                                        :values [0]})\n\n        (webgl/draw-arrays! gl {:draw-type (.-TRIANGLES gl)\n                                :offset    0\n                                :count     (* 1 6)})))\n\n    (webgl/bind-framebuffer! gl nil)\n    (webgl/set-gl-viewport! gl)\n    (webgl/bind-texture! gl (.-TEXTURE_2D gl) (get-in objects-to-draw [:my-f :textures :fb-texture :texture-obj]))\n\n    (webgl/set-uniform! gl program {:name      \"u_matrix\"\n                                    :type      \"uniformMatrix4fv\"\n                                    :transpose false\n                                    :values    [2 0 0 0\n                                                0 2 0 0\n                                                0 0 1 0\n                                                0 0 0 1]})\n\n    (webgl/clear! gl)\n    (webgl/draw-arrays! gl {:draw-type (.-TRIANGLES gl)\n                            :offset    0\n                            :count     (* 1 6)}))\n\n  (swap! state-atom assoc :raf-id (js/requestAnimationFrame (fn [t] (draw! t @state-atom))))\n  )\n\n\n(defn raf-draw!\n  [state]\n  (swap! state-atom assoc :raf-id (js/requestAnimationFrame (fn [t] (draw! t state)))))\n\n(defn setup!\n  []\n  (-> (swap! state-atom (fn [{:keys [gl] :as state}]\n                          (let [program (webgl/link-shaders! gl {:fs fragment-shader :vs vertex-shader})\n                                fb-texture (webgl/texture-pixels gl {:pixels         (js/Uint8Array. [0 0 255 255])\n                                                                     :width          1\n                                                                     :height         1\n                                                                     :border         0\n                                                                     :dont-allocate? false\n                                                                     :params-i       {:clamp-s    {:p-name (.-TEXTURE_WRAP_S gl)\n                                                                                                   :param  (.-CLAMP_TO_EDGE gl)}\n                                                                                      :clamp-t    {:p-name (.-TEXTURE_WRAP_T gl)\n                                                                                                   :param  (.-CLAMP_TO_EDGE gl)}\n                                                                                      :min-filter {:p-name (.-TEXTURE_MIN_FILTER gl)\n                                                                                                   :param  (.-NEAREST gl)}\n                                                                                      :mag-filter {:p-name (.-TEXTURE_MAG_FILTER gl)\n                                                                                                   :param  (.-NEAREST gl)}}})\n                                _ (webgl/initialize-texture-from-img\n                                    \"images/mip-low-res-example.png\"\n                                    (fn [img]\n                                      (swap! state-atom assoc-in [:objects-to-draw :my-f :textures :texture]\n                                             (webgl/texture-img gl {:pixels   img\n                                                                    :mipmap?  true\n                                                                    :params-i {:clamp-s    {:p-name (.-TEXTURE_WRAP_S gl)\n                                                                                            :param  (.-CLAMP_TO_EDGE gl)}\n                                                                               :clamp-t    {:p-name (.-TEXTURE_WRAP_T gl)\n                                                                                            :param  (.-CLAMP_TO_EDGE gl)}\n                                                                               :min-filter {:p-name (.-TEXTURE_MIN_FILTER gl)\n                                                                                            :param  (.-NEAREST gl)}\n                                                                               :mag-filter {:p-name (.-TEXTURE_MAG_FILTER gl)\n                                                                                            :param  (.-LINEAR gl)}}}))\n\n                                      (js/requestAnimationFrame (fn [t] (draw! t @state-atom)))\n                                      ))]\n                            (-> (assoc state :clear-depth? true)\n                                (assoc :settings [\n                                                  {:x -1 :y -3 :z -30 :filter (.-NEAREST gl)}\n                                                  {:x 0 :y -3 :z -30 :filter (.-LINEAR gl)}\n                                                  {:x 1 :y -3 :z -30 :filter (.-NEAREST_MIPMAP_LINEAR gl)}\n                                                  {:x -1 :y -1 :z -10 :filter (.-NEAREST gl)}\n                                                  {:x 0 :y -1 :z -10 :filter (.-LINEAR gl)}\n                                                  {:x 1 :y -1 :z -10 :filter (.-NEAREST_MIPMAP_LINEAR gl)}\n                                                  {:x -1 :y 1 :z 0 :filter (.-NEAREST gl)}\n                                                  {:x 0 :y 1 :z 0 :filter (.-LINEAR gl)}\n                                                  {:x 1 :y 1 :z 0 :filter (.-LINEAR_MIPMAP_NEAREST gl)}\n                                                  ])\n                                (assoc :objects-to-draw\n                                       {:my-f {:program      program\n                                               :features     [(.-CULL_FACE gl) (.-DEPTH_TEST gl)]\n                                               :attributes   {:a_position (webgl/attribute gl program {:name \"a_position\"\n                                                                                                       :size 3\n                                                                                                       :data (js/Float32Array. [-0.5, 0.5, 0.5,\n                                                                                                                                0.5, 0.5, 0.5,\n                                                                                                                                -0.5, -0.5, 0.5,\n                                                                                                                                -0.5, -0.5, 0.5,\n                                                                                                                                0.5, 0.5, 0.5,\n                                                                                                                                0.5, -0.5, 0.5])})\n                                                              :a_texcoord (webgl/attribute gl program {:name \"a_texcoord\"\n                                                                                                       :size 2\n                                                                                                       :data (js/Float32Array. [-3, -1,\n                                                                                                                                2, -1,\n                                                                                                                                -3, 4,\n                                                                                                                                -3, 4,\n                                                                                                                                2, -1,\n                                                                                                                                2, 4])})}\n                                               :textures     {:fb-texture fb-texture\n                                                              :texture    nil\n                                                              }\n                                               :framebuffers {:framebuffer (webgl/framebuffer gl {:texture (-> fb-texture :texture-obj)})}\n                                               :uniforms     {:u_matrix  {:name      \"u_matrix\"\n                                                                          :type      \"uniformMatrix4fv\"\n                                                                          :transpose false\n                                                                          :values    [2 0 0 0\n                                                                                      0 2 0 0\n                                                                                      0 0 2 0\n                                                                                      0 0 0 2]}\n                                                              :u_texture {:name   \"u_texture\"\n                                                                          :type   \"uniform1i\"\n                                                                          :values [0]}}\n                                               :element      {:draw-type (.-TRIANGLES gl)\n                                                              :offset    0\n                                                              :count     (* 1 6)}}})))))))\n\n(def ^:export lesson\n  {:title           (fn []\n                      [:div\n                       [:h1 {:style {:font-family \"monospace\"}}\n                        \"Lesson - WebGL Textures\"]\n                       [:h4 {:style {:font-family \"monospace\"}}\n                        \"Can we make this work ?!\"]])\n   :source          (c/get-filename #'state-atom)           ;; TODO broken\n   :tutorial-source \"webgl-3d-textures.html\"\n   :start           (fn []\n                      (let [canvas-id (c/ns-str ::x)]\n                        [:div {:style {:display        \"flex\"\n                                       :flex-direction \"row\"}}\n                         [webgl-canvas {:height     400\n                                        :width      400\n                                        :id         canvas-id\n                                        :on-unmount (fn []\n                                                      (js/cancelAnimationFrame (:raf-id @state-atom))\n                                                      )\n                                        :on-mount   (fn []\n                                                      (do\n                                                        (swap! state-atom assoc :gl (webgl/get-context canvas-id))\n                                                        (setup!)\n                                                        ;(js/requestAnimationFrame (fn [t] (draw! t @state-atom)))\n                                                        ))}]\n                         ]))})\n"]}