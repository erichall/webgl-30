{"version":3,"sources":["thi/ng/geom/gl/glmesh.cljc"],"mappings":"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","names":["cljs.core/PROTOCOL_SENTINEL","p__31375","map__31376","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","this__4428__auto__","writer__4429__auto__","opt__4430__auto__","cljs.core/-write","thi.ng.geom.gl.glmesh/GLMesh","thi.ng.geom.gl.glmesh/->GLMesh","vertices","fnormals","vnormals","uvs","cols","id","attribs","_","thi.ng.geom.utils/bounding-box","cljs.core/seq","thi.ng.geom.utils/axis-range","thi.ng.geom.utils.bounding_sphere.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.vector.vec3.cljs$core$IFn$_invoke$arity$0","o","thi.ng.math.core._.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.utils/centroid","num","acc","cljs.core/transient","i","cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.vector/Vec3","cljs.core/persistent!","f","thi.ng.geom.gl.glmesh/add-face*","thi.ng.xerror.core.unsupported_BANG_.cljs$core$IFn$_invoke$arity$0","opts","faces","thi.ng.geom.gl.glmesh/into-glmesh*","thi.ng.geom.utils/into-mesh","G__31373","G__31374","thi.ng.geom.gl.glmesh/gl-mesh","s","G__31345","p1__31333#","G__31346","G__31347","thi.ng.geom.gl.glmesh/transform-vertices","thi.ng.math.core._STAR__BANG_.cljs$core$IFn$_invoke$arity$2","c","G__31355","p1__31334#","G__31356","G__31357","thi.ng.math.core/madd!","thi.ng.math.core.__BANG_.cljs$core$IFn$_invoke$arity$2","t","G__31366","p1__31335#","G__31367","G__31368","thi.ng.math.core._PLUS__BANG_.cljs$core$IFn$_invoke$arity$2","tx","G__31337","p1__31336#","G__31338","G__31339","thi.ng.geom.core/transform-vector","G__31378","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","or__4185__auto__","thi.ng.geom.gl.webgl.constants/triangles","k","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","thi.ng.xerror.core.illegal_arg_BANG_.cljs$core$IFn$_invoke$arity$1","v","p__31403","map__31404","thi.ng.geom.gl.glmesh/IndexedGLMesh","thi.ng.geom.gl.glmesh/->IndexedGLMesh","indices","index","fid","thi.ng.geom.gl.glmesh/add-face-indexed*","m","thi.ng.geom.gl.glmesh/into-iglmesh*","G__31401","G__31402","thi.ng.geom.gl.glmesh/indexed-gl-mesh","G__31389","p1__31380#","G__31390","G__31391","G__31392","p1__31381#","G__31393","G__31394","G__31398","p1__31382#","G__31399","G__31400","G__31384","p1__31383#","G__31385","G__31386","G__31406","G__31395","cljs.core/Keyword","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","G__31396","G__31397","var_args","G__31408","js/Error","numf","thi.ng.geom.gl.glmesh.gl_mesh.cljs$core$IFn$_invoke$arity$2","thi.ng.typedarrays.core/float32","G__31413","thi.ng.geom.gl.glmesh.indexed_gl_mesh.cljs$core$IFn$_invoke$arity$2","thi.ng.typedarrays.core/uint16","p__31417","vec__31418","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","verts","cljs.core/count","fexpr__31421","thi.ng.geom.utils/tessellate-face","thi.ng.geom.utils/tessellate-with-first","p1__31415#","cljs.core/run!","idv","iduv","idcol","cljs.core/first","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","n","thi.ng.geom.utils.ortho_normal.cljs$core$IFn$_invoke$arity$1","nb","temp__5735__auto__","vn","uv","col","thi.ng.dstruct.streams/into-float-buffer","thi.ng.geom.gl.glmesh/index-vertex*","va","vec__31423","fn","p__31427","vec__31428","fexpr__31431","p1__31426#","map__31432","vnorm","fnorm","buf","tv","thi.ng.geom.vector.vec3.cljs$core$IFn$_invoke$arity$1","tb","dest","src","map__31434","map__31435","sverts","sfn","svn","scol","suv","sid","dverts","dfn","dvn","dcol","duv","did","sidv","didv","thi.ng.geom.gl.glmesh/build-rindex","dindex","sindex","start","cljs.core/reduce-kv","p__31446","vec__31447","idx","nid","cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3","thi.ng.geom.gl.glmesh/merge-index","rindex","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","kv","cljs.core/peek","cljs.core/val","cljs.core/key","map__31453","map__31454","vec__31455","sidx","sfid","didx","dfid","did'","fn?","vn?","col?","uv?","temp__5733__auto__","sidcol","siduv"],"sourcesContent":["(ns thi.ng.geom.gl.glmesh\n  #?(:clj\n     (:import\n      [java.nio Buffer FloatBuffer ShortBuffer IntBuffer]))\n  (:require\n   [thi.ng.math.core :as m]\n   [thi.ng.geom.core :as g]\n   [thi.ng.geom.vector :as v :refer [vec2 vec3]]\n   [thi.ng.geom.utils :as gu]\n   [thi.ng.geom.gl.core :as gl]\n   [thi.ng.dstruct.streams :as streams]\n   [thi.ng.xerror.core :as err]\n   #?@(:clj\n       [[thi.ng.geom.gl.jogl.buffers :as native]\n        [thi.ng.geom.gl.jogl.constants :as glc]]\n       :cljs\n       [[thi.ng.geom.gl.webgl.constants :as glc]\n        [thi.ng.typedarrays.core :as ta]])))\n\n;; This namespace provides speed optimized, *mutable* mesh\n;; implementations primarily intended for display purposes via OpenGL\n;; / WebGL. Both the `GLMesh` and `IndexedGLMesh` types have the\n;; following features:\n;;\n;; - optional vertex attributes: face normals, vertex normals,\n;;   texture coordinates & colors\n;; - native storage in `java.nio` buffers or JS typed arrays\n;; - automatic triangle tessellation when adding mesh faces\n;; - automatic face normal calculation when adding faces (and face\n;;   normals are enabled)\n;; - customizable attribute names when calling `gl/as-gl-buffer-spec`\n;;   (see further below)\n;;\n;; The `IndexedGLMesh` furthermore does automatic indexing based on\n;; unique vertex values (and their attributes) and therefore reduces\n;; the amount of data needing to be sent and processed by the GPU.\n;;\n;; On the other hand the `GLMesh` builds flattened attribute buffers,\n;; is faster to construct and too allows for bigger meshes, since the\n;; 16bit element index limitation of OpenGL does not apply here.\n;;\n;; Limitations\n;;\n;; - Meshes are not resizable (due to fixed length buffers)\n;; - Max. 65536 unique vertices (OpenGL limitation, `IndexedGLMesh` only)\n;; - No support for vertex normal calculation. V-normals must be pre-assigned\n;; - Currently only partial support for mesh analysis and transformations\n;;\n;; Constructors\n;;\n;; Since the meshes are built on JS typed arrays, the number of faces\n;; must be known at construction time. This doesn't need to (but\n;; generally should) be the exact number, as long as it's at least the\n;; number of faces going to be added. The meshes internally keep track\n;; of the actual elements used, but *do no bounds checking*.\n;;\n;; The second arg given is an optional set of vertex attribute buffer\n;; IDs (see tables under `IGLConvert` further below for details).\n\n(declare gl-mesh indexed-gl-mesh)\n\n(declare add-face* add-face-indexed* into-glmesh* into-iglmesh* transform-vertices)\n\n(deftype GLMesh\n    #?(:clj\n       [^FloatBuffer vertices\n        ^FloatBuffer fnormals\n        ^FloatBuffer vnormals\n        ^FloatBuffer uvs\n        ^FloatBuffer cols\n        ^:unsynchronized-mutable id\n        attribs]\n       :cljs\n       [^js/Float32Array vertices\n        ^js/Float32Array fnormals\n        ^js/Float32Array vnormals\n        ^js/Float32Array uvs\n        ^js/Float32Array cols\n        ^:mutable id\n        attribs])\n\n  g/IBounds\n  (bounds [_] (gu/bounding-box (seq (g/vertices _))))\n  (width [_] (gu/axis-range 0 (seq (g/vertices _))))\n  (height [_] (gu/axis-range 1 (seq (g/vertices _))))\n  (depth [_] (gu/axis-range 2 (seq (g/vertices _))))\n\n  g/IBoundingSphere\n  (bounding-sphere\n    [_] (gu/bounding-sphere (g/centroid _) (seq (g/vertices _))))\n\n  g/ICenter\n  (center\n    [_] (g/center _ (vec3)))\n  (center\n    [_ o] (g/translate _ (m/- o (g/centroid _))))\n  (centroid\n    [_] (gu/centroid (g/vertices _)))\n\n  g/IVertexAccess\n  (vertices\n    [_]\n    (let [num (* id 9)]\n      (loop [acc (transient #{}), i 0]\n        (if (< i num)\n          #?(:clj\n             (recur\n              (conj! acc (vec3 (.get vertices i) (.get vertices (+ i 1)) (.get vertices (+ i 2))))\n              (+ i 3))\n             :cljs\n             (recur\n              (conj! acc (thi.ng.geom.vector.Vec3. (.slice vertices i (+ i 3)) nil nil))\n              (+ i 3)))\n          (persistent! acc)))))\n\n  g/IFaceAccess\n  (add-face\n    [_ f] (add-face* _ f))\n  (faces\n    [_] (err/unsupported!))\n  (faces\n    [_ opts] (err/unsupported!))\n\n  g/IGeomContainer\n  (into\n    [_ faces]\n    (if (instance? GLMesh faces)\n      (into-glmesh* _ faces)\n      (gu/into-mesh _ add-face* faces)))\n\n  g/IClear\n  (clear*\n    [_] (gl-mesh (int (/ #?(:clj (.capacity vertices) :cljs (.-length vertices)) 9)) attribs))\n  (clear!\n    [_] (set! id 0) _)\n\n  g/IScale\n  (scale\n    [_ s] (transform-vertices #(m/*! % s) vertices (* id 9)) _)\n  (scale-size\n    [_ s]\n    (let [c (g/centroid _)]\n      (transform-vertices #(m/madd! (m/-! % c) s c) vertices (* id 9))) _)\n\n  g/ITranslate\n  (translate\n    [_ t] (transform-vertices #(m/+! % t) vertices (* id 9)) _)\n\n  g/ITransform\n  (transform\n    [_ tx] (transform-vertices #(g/transform-vector tx %) vertices (* id 9)) _)\n\n  gl/IGLConvert\n  (as-gl-buffer-spec\n    [_ {:keys [attribs] :as opts}]\n    {:attribs      (cond->    {(get attribs :position :position) {:data vertices :size 3}}\n                     fnormals (assoc (get attribs :fnorm :normal) {:data fnormals :size 3})\n                     vnormals (assoc (get attribs :vnorm :normal) {:data vnormals :size 3})\n                     uvs      (assoc (get attribs :uv :uv) {:data uvs :size 2})\n                     cols     (assoc (get attribs :col :color) {:data cols :size 4}))\n     :num-vertices (or (get opts :num-vertices) (* id 3))\n     :mode         (get opts :mode glc/triangles)})\n\n  g/IMutableProps\n  (get-prop\n    [_ k] (if (= :id k) id (err/illegal-arg! k)))\n  (set-prop!\n    [_ k v] (if (= :id k) (set! id v) (err/illegal-arg! k)) _))\n\n(deftype IndexedGLMesh\n    #?(:clj\n       [^FloatBuffer vertices\n        ^FloatBuffer fnormals\n        ^FloatBuffer vnormals\n        ^FloatBuffer uvs\n        ^FloatBuffer cols\n        ^ShortBuffer indices\n        attribs\n        ^:unsynchronized-mutable index\n        ^:unsynchronized-mutable id\n        ^:unsynchronized-mutable fid]\n       :cljs\n       [^js/Float32Array vertices\n        ^js/Float32Array fnormals\n        ^js/Float32Array vnormals\n        ^js/Float32Array uvs\n        ^js/Float32Array cols\n        ^js/Uint16Array indices\n        attribs\n        ^:mutable index\n        ^:mutable id\n        ^:mutable fid])\n\n  g/IBounds\n  (bounds [_] (gu/bounding-box (seq (g/vertices _))))\n  (width [_] (gu/axis-range 0 (seq (g/vertices _))))\n  (height [_] (gu/axis-range 1 (seq (g/vertices _))))\n  (depth [_] (gu/axis-range 2 (seq (g/vertices _))))\n\n  g/IBoundingSphere\n  (bounding-sphere\n    [_] (gu/bounding-sphere (g/centroid _) (seq (g/vertices _))))\n\n  g/ICenter\n  (center\n    [_] (g/center _ (vec3)))\n  (center\n    [_ o] (g/translate _ (m/- o (g/centroid _))))\n  (centroid\n    [_] (gu/centroid (g/vertices _)))\n\n  ;; The `g/vertices` implementation returns the set of unique\n  ;; vertices in the mesh (without their attributes, only positions).\n\n  g/IVertexAccess\n  (vertices\n    [_]\n    (let [num (* id 3)]\n      (loop [acc (transient #{}), i 0]\n        (if (< i num)\n          #?(:clj\n             (recur\n              (conj! acc (vec3 (.get vertices i) (.get vertices (+ i 1)) (.get vertices (+ i 2))))\n              (+ i 3))\n             :cljs\n             (recur\n              (conj! acc (thi.ng.geom.vector.Vec3. (.slice vertices i (+ i 3)) nil nil))\n              (+ i 3)))\n          (persistent! acc)))))\n\n  g/IFaceAccess\n  (add-face\n    [_ f] (add-face-indexed* _ f))\n  (faces\n    [_] (err/unsupported!))\n  (faces\n    [_ opts] (err/unsupported!))\n\n  g/IGeomContainer\n  (into\n    [_ m]\n    (if (instance? IndexedGLMesh m)\n      (into-iglmesh* _ m)\n      (gu/into-mesh _ add-face-indexed* m)))\n\n  ;; These protocol methods are used internally by `g/into`.\n\n  g/IClear\n  (clear*\n    [_] (indexed-gl-mesh (int (/ #?(:clj (.capacity vertices) :cljs (.-length vertices)) 9)) attribs))\n  (clear!\n    [_] (set! id 0) (set! fid 0) _)\n\n  g/IScale\n  (scale\n    [_ s] (transform-vertices #(m/*! % s) vertices (* id 3)) _)\n  (scale-size\n    [_ s]\n    (let [c (g/centroid _)]\n      (transform-vertices #(m/madd! (m/-! % c) s c) vertices (* id 3))) _)\n\n  g/ITranslate\n  (translate\n    [_ t] (transform-vertices #(m/+! % t) vertices (* id 3)) _)\n\n  g/ITransform\n  (transform\n    [_ tx] (transform-vertices #(g/transform-vector tx %) vertices (* id 3)) _)\n\n  ;; Since a `GLMesh` holds all its data in typed arrays, conversion\n  ;; into a readily usable format for display purposes is reduced to a\n  ;; straight forward re-formatting into GL spec map. By supplying an\n  ;; `:attribs` map in the 2nd arg (options map), all mesh attributes\n  ;; can be renamed in the spec map. The default attribute names are:\n  ;;\n  ;; | *Key*       | *Default value* | *Description*     |\n  ;; |-------------+-----------------+-------------------|\n  ;; | `:position` | `:position`     | vertex positions  |\n  ;; | `:fnorm`    | `:normal`       | face normals      |\n  ;; | `:vnorm`    | `:normal`       | vertex normals    |\n  ;; | `:uv`       | `:uv`           | UV texture coords |\n  ;; | `:col`      | `:color`        | vertex colors     |\n  ;;\n  ;; *Note:* As mentioned above, the `GLMesh` is *not* able to compute\n  ;; vertex normals itself.\n  ;;\n  ;; If a shader requires that an attribute must be renamed in the\n  ;; resulting spec map, call the function like this:\n  ;;\n  ;; rename :position & :uv attribs in result spec:\n  ;; ```\n  ;; (gl/as-gl-buffer-spec mesh {:attribs {:uv :texcoord, :position :pos}})\n  ;; ```\n  ;;\n  ;; Furthermore, the options map also supports the following other\n  ;; keys:\n  ;;\n  ;; - `:mode` - GL draw mode (default: `glc/triangles`)\n  ;; - `:num-vertices` - number of vertices to draw (default: number mesh verts)\n\n  gl/IGLConvert\n  (as-gl-buffer-spec\n    [_ {:keys [attribs] :as opts}]\n    {:attribs      (cond->    {(get attribs :position :position) {:data vertices :size 3}}\n                     fnormals (assoc (get attribs :fnorm :normal) {:data fnormals :size 3})\n                     vnormals (assoc (get attribs :vnorm :normal) {:data vnormals :size 3})\n                     uvs      (assoc (get attribs :uv :uv) {:data uvs :size 2})\n                     cols     (assoc (get attribs :col :color) {:data cols :size 4}))\n     :indices      {:data indices}\n     :num-items    (get opts :num-items fid)\n     :num-vertices id\n     :mode         (get opts :mode glc/triangles)})\n\n  g/IMutableProps\n  (get-prop\n    [_ k]\n    (case (keyword k)\n      :id id\n      :fid fid\n      :index index\n      (err/illegal-arg! k)))\n  (set-prop!\n    [_ k v]\n    (case (keyword k)\n      :id (set! id v)\n      :fid (set! fid v)\n      :index (set! index v)\n      (err/illegal-arg! k))\n    _)\n  (update-prop!\n    [_ k f]\n    (case (keyword k)\n      :id (set! id (f id))\n      :fid (set! fid (f fid))\n      :index (set! index (f index))\n      (err/illegal-arg! k))\n    _))\n\n(defn gl-mesh\n  \"Builds a fixed size mesh with given face count & attribs (a set of\n  #{:fnorm :vnorm :uv :col}). All attributes (incl. vertices) are\n  stored directly in typed array buffers.\"\n  ([numf] (gl-mesh numf nil))\n  ([numf attribs]\n   (GLMesh.\n    (#?(:clj native/float-buffer-direct :cljs ta/float32) (* numf 9))\n    (if (get attribs :fnorm)\n      (#?(:clj native/float-buffer-direct :cljs ta/float32) (* numf 9)))\n    (if (get attribs :vnorm)\n      (#?(:clj native/float-buffer-direct :cljs ta/float32) (* numf 9)))\n    (if (get attribs :uv)\n      (#?(:clj native/float-buffer-direct :cljs ta/float32) (* numf 6)))\n    (if (get attribs :col)\n      (#?(:clj native/float-buffer-direct :cljs ta/float32) (* numf 12)))\n    0\n    attribs)))\n\n(defn indexed-gl-mesh\n  \"Builds a fixed size, indexed mesh with given face count & optional\n  attribs (a set of #{:fnorm :vnorm :uv :col}). All attributes (incl.\n  vertices) are stored directly in typed array buffers. Internally\n  builds index of unique vertices (position + attribs) and re-uses\n  indices where possible.\"\n  ([numf] (indexed-gl-mesh numf nil))\n  ([numf attribs]\n   (IndexedGLMesh.\n    (#?(:clj native/float-buffer-direct :cljs ta/float32) (* numf 9))\n    (if (get attribs :fnorm)\n      (#?(:clj native/float-buffer-direct :cljs ta/float32) (* numf 9)))\n    (if (get attribs :vnorm)\n      (#?(:clj native/float-buffer-direct :cljs ta/float32) (* numf 9)))\n    (if (get attribs :uv)\n      (#?(:clj native/float-buffer-direct :cljs ta/float32) (* numf 6)))\n    (if (get attribs :col)\n      (#?(:clj native/float-buffer-direct :cljs ta/float32) (* numf 12)))\n    (#?(:clj native/short-buffer-direct :cljs ta/uint16) (* numf 3))\n    attribs\n    {} 0 0)))\n\n(defn- add-face*\n  [^GLMesh m [verts attribs :as f]]\n  (if (> (count verts) 3)\n    (->> f\n         ((gu/tessellate-face gu/tessellate-with-first))\n         (run! #(add-face* m %)))\n    (let [vertices (.-vertices m)\n          fnormals (.-fnormals m)\n          vnormals (.-vnormals m)\n          uvs      (.-uvs m)\n          cols     (.-cols m)\n          id      #?(:clj (g/get-prop m :id) :cljs (.-id m))\n          idv     (* id 9)\n          iduv    (* id 6)\n          idcol   (* id 12)]\n      #?@(:clj\n          [(->> idv\n                (gl/into-float-buffer-vec3 (first verts) vertices 3)\n                (gl/into-float-buffer-vec3 (nth verts 1) vertices 3)\n                (gl/into-float-buffer-vec3 (nth verts 2) vertices 3))]\n          :cljs\n          [(.set vertices (.-buf ^thi.ng.geom.vector.Vec3 (first verts)) idv)\n           (.set vertices (.-buf ^thi.ng.geom.vector.Vec3 (nth verts 1)) (+ idv 3))\n           (.set vertices (.-buf ^thi.ng.geom.vector.Vec3 (nth verts 2)) (+ idv 6))])\n      (when fnormals\n        #?(:clj\n           (let [n (or (get attribs :fnorm) (gu/ortho-normal verts))]\n             (->> idv\n                  (gl/into-float-buffer-vec3 n fnormals 3)\n                  (gl/into-float-buffer-vec3 n fnormals 3)\n                  (gl/into-float-buffer-vec3 n fnormals 3)))\n           :cljs\n           (let [n  (or (get attribs :fnorm) (gu/ortho-normal verts))\n                 nb (.-buf ^thi.ng.geom.vector.Vec3 n)]\n             (.set fnormals nb idv)\n             (.set fnormals nb (+ idv 3))\n             (.set fnormals nb (+ idv 6)))))\n      (when-let [vn (if vnormals (get attribs :vnorm))]\n        #?@(:clj\n            [(->> idv\n                  (gl/into-float-buffer-vec3 (first vn) vnormals 3)\n                  (gl/into-float-buffer-vec3 (nth vn 1) vnormals 3)\n                  (gl/into-float-buffer-vec3 (nth vn 2) vnormals 3))]\n            :cljs\n            [(.set vnormals (.-buf ^thi.ng.geom.vector.Vec3 (first vn)) idv)\n             (.set vnormals (.-buf ^thi.ng.geom.vector.Vec3 (nth vn 1)) (+ idv 3))\n             (.set vnormals (.-buf ^thi.ng.geom.vector.Vec3 (nth vn 2)) (+ idv 6))]))\n      (when-let [uv (if uvs (get attribs :uv))]\n        #?@(:clj\n            [(->> iduv\n                  (gl/into-float-buffer-vec2 (first uv) uvs 2)\n                  (gl/into-float-buffer-vec2 (nth uv 1) uvs 2)\n                  (gl/into-float-buffer-vec2 (nth uv 2) uvs 2))]\n            :cljs\n            [(.set uvs (.-buf ^thi.ng.geom.vector.Vec2 (first uv)) iduv)\n             (.set uvs (.-buf ^thi.ng.geom.vector.Vec2 (nth uv 1)) (+ iduv 2))\n             (.set uvs (.-buf ^thi.ng.geom.vector.Vec2 (nth uv 2)) (+ iduv 4))]))\n      (when-let [col (if cols (get attribs :col))]\n        (->> idcol\n             (streams/into-float-buffer (first col) cols 4)\n             (streams/into-float-buffer (nth col 1) cols 4)\n             (streams/into-float-buffer (nth col 2) cols 4)))\n      #?(:clj  (g/set-prop! m :id (inc id))\n         :cljs (set! (.-id m) (inc id)))))\n  m)\n\n(defn- index-vertex*\n  [^IndexedGLMesh m va vertices fnormals vnormals cols uvs]\n  (or (get (g/get-prop m :index) va)\n      (let [index #?(:clj (g/get-prop m :index) :cljs (.-index m))\n            id    #?(:clj (g/get-prop m :id) :cljs (.-id m))\n            idv   (* id 3)\n            [v fn vn col uv] va]\n        #?(:clj  (gl/into-float-buffer-vec3 v vertices 3 idv)\n           :cljs (.set vertices (.-buf ^thi.ng.geom.vector.Vec3 v) idv))\n        (if (if fnormals fn)\n          #?(:clj  (gl/into-float-buffer-vec3 fn fnormals 3 idv)\n             :cljs (.set fnormals (.-buf ^thi.ng.geom.vector.Vec3 fn) idv))\n          (if (if vnormals vn)\n            #?(:clj  (gl/into-float-buffer-vec3 vn vnormals 3 idv)\n               :cljs (.set vnormals (.-buf ^thi.ng.geom.vector.Vec3 vn) idv))))\n        (when (if cols col)\n          (streams/into-float-buffer col cols 4 (* id 4)))\n        (when (if uvs uv)\n          #?(:clj  (gl/into-float-buffer-vec2 uv uvs 2 (* id 2))\n             :cljs (.set uvs (.-buf ^thi.ng.geom.vector.Vec2 uv) (* id 2))))\n        #?@(:clj\n            [(g/set-prop! m :index (assoc index va id))\n             (g/set-prop! m :id (inc id))]\n            :cljs\n            [(set! (.-index m) (assoc index va id))\n             (set! (.-id m) (inc id))])\n        id)))\n\n(defn- add-face-indexed*\n  [^IndexedGLMesh m [verts attribs :as f]]\n  (if (> (count verts) 3)\n    (->> f\n         ((gu/tessellate-face gu/tessellate-with-first))\n         (run! #(add-face-indexed* m %)))\n    (let [vertices (.-vertices m)\n          fnormals (.-fnormals m)\n          vnormals (.-vnormals m)\n          uvs      (.-uvs m)\n          cols     (.-cols m)\n          ^ShortBuffer indices (.-indices m)\n          fid      #?(:clj (g/get-prop m :fid) :cljs (.-fid m))\n          {:keys [vnorm uv col]} attribs\n          fnorm (if fnormals (or (get attribs :fnorm) (gu/ortho-normal verts)))]\n      (#?(:clj .put :cljs aset) indices fid\n                                (index-vertex*\n                                 m [(nth verts 0) fnorm (nth vnorm 0 nil) (nth col 0 nil) (nth uv 0 nil)]\n                                 vertices fnormals vnormals cols uvs))\n      (#?(:clj .put :cljs aset) indices (+ fid 1)\n                                (index-vertex*\n                                 m [(nth verts 1) fnorm (nth vnorm 1 nil) (nth col 1 nil) (nth uv 1 nil)]\n                                 vertices fnormals vnormals cols uvs))\n      (#?(:clj .put :cljs aset) indices (+ fid 2)\n                                (index-vertex*\n                                 m [(nth verts 2) fnorm (nth vnorm 2 nil) (nth col 2 nil) (nth uv 2 nil)]\n                                 vertices fnormals vnormals cols uvs))\n      #?(:clj (g/set-prop! m :fid (+ fid 3)) :cljs (set! (.-fid m) (+ fid 3)))))\n  m)\n\n(defn- transform-vertices\n  #?(:clj [f ^FloatBuffer buf num] :cljs [f buf num])\n  (let [tv (vec3 0)\n        ^doubles tb (.-buf ^thi.ng.geom.vector.Vec3 tv)]\n    #?(:clj (.rewind buf))\n    (loop [i 0]\n      (when (< i num)\n        #?@(:clj\n            [(aset tb 0 (.get buf i))\n             (aset tb 1 (.get buf (unchecked-add-int i 1)))\n             (aset tb 2 (.get buf (unchecked-add-int i 2)))\n             (gl/into-float-buffer-vec3 (f tv) buf 3 i)]\n            :cljs\n            [(.set tb (.slice buf i (+ i 3)) 0)\n             (.set buf (.-buf ^thi.ng.geom.vector.Vec3 (f tv)) i)])\n        (recur (+ i 3))))))\n\n(defn- into-glmesh*\n  [^GLMesh dest ^GLMesh src]\n  (let [{sverts :vertices sfn :fnormals svn :vnormals scol :cols suv :uvs sid :id} src\n        {dverts :vertices dfn :fnormals dvn :vnormals dcol :cols duv :uvs did :id} dest\n        sidv   (* sid 9)\n        didv   (* did 9)]\n    #?(:clj  (native/copy-float-buffer dverts sverts didv 0 sidv)\n       :cljs (.set dverts (.slice sverts 0 sidv) didv))\n    (when (if dfn sfn)\n      #?(:clj  (native/copy-float-buffer dfn sfn didv 0 sidv)\n         :cljs (.set dfn (.slice sfn 0 sidv) didv)))\n    (when (if dvn svn)\n      #?(:clj  (native/copy-float-buffer dvn svn didv 0 sidv)\n         :cljs (.set dvn (.slice svn 0 sidv) didv)))\n    (when (if dcol scol)\n      #?(:clj  (native/copy-float-buffer dcol scol (* did 12) 0 (* sid 12))\n         :cljs (.set dcol (.slice scol 0 (* sid 12)) (* did 12))))\n    (when (if duv suv)\n      #?(:clj  (native/copy-float-buffer duv suv (* did 6) 0 (* sid 6))\n         :cljs (.set duv (.slice suv 0 (* sid 6)) (* did 6))))\n    #?(:clj (g/set-prop! dest :id (+ did sid)) :cljs (set! (.-id dest) (+ did sid)))\n    dest))\n\n(defn- build-rindex\n  [dindex sindex start]\n  (reduce-kv\n   (fn [[idx nid :as s] v id]\n     (if (get dindex v) s [(assoc! idx id [nid v]) (inc nid)]))\n   [(transient {}) start]\n   sindex))\n\n(defn- merge-index\n  [dindex rindex]\n  (into dindex (map (fn [kv] [(peek (val kv)) (key kv)])) rindex))\n\n(defn- into-iglmesh*\n  [^IndexedGLMesh dest ^IndexedGLMesh src]\n  (let [{sverts :vertices sfn :fnormals svn :vnormals scol :cols\n         suv :uvs sidx :indices sindex :index sid :id sfid :fid} src\n        {dverts :vertices dfn :fnormals dvn :vnormals dcol :cols\n         duv :uvs didx :indices dindex :index did :id dfid :fid} dest\n        [rindex did'] (build-rindex dindex sindex did)\n        dindex (merge-index dindex (persistent! rindex))\n        sidv   sfid\n        fn?    (if dfn sfn)\n        vn?    (if dvn svn)\n        col?   (if dcol scol)\n        uv?    (if duv suv)]\n    ;; (debug :rindex rindex)\n    ;; (debug :dindex dindex)\n    ;; (debug :dfid-old dfid :didv (* did 3))\n    ;; TODO implement fast path if no verts can be reused\n    (loop [i 0]\n      (when (< i sidv)\n        (if-let [nid (first (get rindex #?(:clj (.get ^ShortBuffer sidx i) :cljs (aget sidx i))))]\n          (let [sid    #?(:clj (.get ^ShortBuffer sidx i) :cljs (aget sidx i))\n                sidv   (* sid 3)\n                didv   (* nid 3)\n                sidcol (* sid 4)\n                siduv  (* sid 2)]\n            ;;(debug :reindex sid :> nid :dfid (+ dfid i) :didv didv)\n            #?(:clj  (.put ^ShortBuffer didx (unchecked-add-int dfid i) nid)\n               :cljs (aset didx (+ dfid i) nid))\n            #?(:clj  (native/copy-float-buffer-vec3 dverts sverts didv sidv)\n               :cljs (.set dverts (.slice sverts sidv (+ sidv 3)) didv))\n            (when fn?\n              #?(:clj  (native/copy-float-buffer-vec3 dfn sfn didv sidv)\n                 :cljs (.set dfn (.slice sfn sidv (+ sidv 3)) didv)))\n            (when vn?\n              #?(:clj  (native/copy-float-buffer-vec3 dvn svn didv sidv)\n                 :cljs (.set dvn (.slice svn sidv (+ sidv 3)) didv)))\n            (when col?\n              #?(:clj  (native/copy-float-buffer-vec4 dcol scol (* nid 4) sidcol)\n                 :cljs (.set dcol (.slice scol sidcol (+ sidcol 4)) (* nid 4))))\n            (when uv?\n              #?(:clj  (native/copy-float-buffer-vec2 duv suv (* nid 2) siduv)\n                 :cljs (.set duv (.slice suv siduv (+ siduv 2)) (* nid 2)))))\n          (do ;;(debug :reuse (aget sidx i) :dfid (+ dfid i))\n            #?(:clj  (.put ^ShortBuffer didx (.get ^ShortBuffer sidx i))\n               :cljs (aset didx (+ dfid i) (aget sidx i)))))\n        (recur (inc i))))\n    #?@(:clj\n        [(g/set-prop! dest :index dindex)\n         (g/set-prop! dest :id did')\n         (g/set-prop! dest :fid (+ dfid sfid))]\n        :cljs\n        [(set! (.-index dest) dindex)\n         (set! (.-id dest) did')\n         (set! (.-fid dest) (+ dfid sfid))])\n    dest))\n"]}