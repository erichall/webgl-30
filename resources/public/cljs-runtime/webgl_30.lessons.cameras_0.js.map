{"version":3,"sources":["webgl_30/lessons/cameras_0.cljs"],"mappings":"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","names":["webgl-30.lessons.cameras-0/initial-state","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","webgl-30.math/deg->rad","js/webgl-30","js/webgl-30.lessons","js/webgl-30.lessons.cameras-0","js/webgl-30.lessons.cameras-0.state-atom","webgl-30.lessons.cameras-0/state-atom","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/deref","cljs.core/reset!","webgl-30.lessons.cameras-0/fragment-shader","webgl-30.lessons.cameras-0/vertex-shader","p__26183","map__26184","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","webgl-30.lessons.cameras-0/multiply-matrices","rect","gl","map__26188","translation","scale","rotation","fudge-factor","field-of-view","aspect","webgl-30.webgl/get-aspect","z-near","z-far","perspective-matrix","webgl-30.math/perspective-3d-matrix","translation-matrix","webgl-30.math/translation-3d-matrix","rotation-matrix-x","webgl-30.math/rotation-3d-x-matrix","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","rotation-matrix-y","webgl-30.math/rotation-3d-y-matrix","rotation-matrix-z","webgl-30.math/rotation-3d-z-matrix","scale-matrix","webgl-30.math/scaling-3d-matrix","webgl-30.math/matrix-multiply-3d","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","webgl-30.lessons.cameras-0/format","seq26201","G__26202","cljs.core/first","cljs.core/next","self__4776__auto__","f","xs","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","cljs.pprint/cl-format","webgl-30.lessons.cameras-0/draw!","timestamp","map__26209","map__26210","map__26211","clear-depth?","state","camera-angle-rad","n-fs","radius","projection-matrix","camera-matrix","view-matrix","webgl-30.math/invert-4x4","view-projection-matrix","program","features","uniforms","element","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","webgl-30.webgl/prepare-canvas!","webgl-30.webgl/use-program!","webgl-30.webgl/enable-features!","seq__26226","cljs.core/seq","chunk__26228","count__26229","i__26230","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","ii","cljs.core.range.cljs$core$IFn$_invoke$arity$1","angle","Math/PI","x","Math/cos","y","Math/sin","cljs.core/assoc-in","cljs.core/vals","webgl_30.webgl.set_uniforms_BANG_.cljs$core$IFn$_invoke$arity$3","webgl-30.webgl/draw-arrays!","webgl-30.lessons.cameras-0/setup!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","p__26257","map__26258","webgl-30.webgl/link-shaders!","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","webgl-30.webgl/attribute","js/Float32Array","webgl-30.shapes/f-shape-3d","js/Uint8Array","webgl-30.shapes/f-shape-3d-color","webgl-30.lessons.cameras-0/lesson","webgl-30.core/get-filename","map__26271","canvas-id","webgl-30.component/webgl-canvas","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","webgl-30.webgl/get-context","js/requestAnimationFrame","webgl-30.component/unit-circle","p__26279","map__26280","angle-rad"],"sourcesContent":["(ns webgl-30.lessons.cameras-0\n  (:require [reagent.core :as r]\n            [webgl-30.core :as c]\n            [webgl-30.math :as m]\n            [webgl-30.webgl :as webgl]\n            [webgl-30.shapes :as shapes]\n            [webgl-30.component :refer [webgl-canvas unit-circle]]))\n\n(def initial-state {:gl   nil\n                    :rect {:translation      [-150 0 -360]\n                           :rotation         (mapv m/deg->rad [190 40 320])\n                           :camera-angle-rad 0\n                           :scale            [1 1 1]\n                           :field-of-view    (m/deg->rad 60)\n                           :width            100\n                           :height           30\n                           :color            [0.3 0.3 0.3 1]}})\n(defonce state-atom (r/atom nil))\n(when (nil? @state-atom)\n  (reset! state-atom initial-state))\n\n(def fragment-shader\n  \"precision mediump float;\n\n   // we got this from the vertex shader!\n   varying vec4 v_color;\n\n   void main() {\n       gl_FragColor = v_color;\n   }\")\n\n(def vertex-shader\n  \"attribute vec4 a_position;\n   attribute vec4 a_color;\n\n  uniform mat4 u_matrix;\n\n  varying vec4 v_color;\n\n  void main() {\n    gl_Position = u_matrix * a_position;\n\n    // this can be passed to the fragment shader\n    v_color = a_color;\n  }\")\n\n(defn multiply-matrices\n  [{:keys [rect gl]}]\n  (let [{:keys [translation scale rotation fudge-factor field-of-view]} rect\n        aspect (webgl/get-aspect gl)\n        z-near 1\n        z-far 2000\n        perspective-matrix (m/perspective-3d-matrix field-of-view aspect z-near z-far)\n        translation-matrix (m/translation-3d-matrix translation)\n        rotation-matrix-x (m/rotation-3d-x-matrix (nth rotation 0))\n        rotation-matrix-y (m/rotation-3d-y-matrix (nth rotation 1))\n        rotation-matrix-z (m/rotation-3d-z-matrix (nth rotation 2))\n        scale-matrix (m/scaling-3d-matrix scale)]\n    (-> (m/matrix-multiply-3d perspective-matrix translation-matrix)\n        (m/matrix-multiply-3d rotation-matrix-x)\n        (m/matrix-multiply-3d rotation-matrix-y)\n        (m/matrix-multiply-3d rotation-matrix-z)\n        (m/matrix-multiply-3d scale-matrix))))\n\n(defn format\n  [f & xs]\n  (apply cljs.pprint/cl-format nil f xs))\n\n(defn draw!\n  [timestamp]\n  (let [{:keys [gl rect clear-depth?] :as state} @state-atom\n        {:keys [field-of-view camera-angle-rad]} rect\n        n-fs 5\n        radius 200\n        aspect (webgl/get-aspect gl)\n        z-near 1\n        z-far 2000\n        projection-matrix (m/perspective-3d-matrix field-of-view aspect z-near z-far)\n        camera-matrix (-> (m/rotation-3d-y-matrix camera-angle-rad)\n                          (m/matrix-multiply-3d (m/translation-3d-matrix [0 0 (* radius 1.5)])))\n        view-matrix (m/invert-4x4 camera-matrix)\n        view-projection-matrix (m/matrix-multiply-3d projection-matrix view-matrix)\n        {:keys [program features uniforms element]} (get-in state [:objects-to-draw :my-f])]\n\n    (-> (webgl/prepare-canvas! gl clear-depth?)\n        (webgl/use-program! program)\n        (webgl/enable-features! features))\n\n\n    (doseq [ii (range n-fs)\n            :let [angle (/ (* ii Math/PI 2) n-fs)\n                  x (* radius (Math/cos angle))\n                  y (* radius (Math/sin angle))\n                  translation-matrix (m/translation-3d-matrix [x 0 y])]]\n\n      (->> (assoc-in uniforms [:u_matrix :values] (m/matrix-multiply-3d view-projection-matrix translation-matrix))\n           vals\n           (webgl/set-uniforms! gl program))\n\n      (webgl/draw-arrays! gl element)\n      )\n    ))\n\n(defn setup!\n  []\n  (-> (swap! state-atom (fn [{:keys [gl rect] :as state}]\n                          (let [program (webgl/link-shaders! gl {:fs fragment-shader :vs vertex-shader})]\n                            (->\n                              (assoc state :clear-depth? true)\n                              (assoc :objects-to-draw\n                                     {:my-f {:program    program\n                                             :features   [(.-CULL_FACE gl) (.-DEPTH_TEST gl)]\n                                             :attributes {:a_position (webgl/attribute gl program {:name \"a_position\"\n                                                                                                   :size 3\n                                                                                                   :type (.-FLOAT gl)\n                                                                                                   :data (js/Float32Array. shapes/f-shape-3d)})\n                                                          :a_color    (webgl/attribute gl program {:name      \"a_color\"\n                                                                                                   :size      3\n                                                                                                   :type      (.-UNSIGNED_BYTE gl)\n                                                                                                   :normalize true\n                                                                                                   :data      (js/Uint8Array. shapes/f-shape-3d-color)})}\n                                             :uniforms   {:u_resolution  {:name   \"u_resolution\"\n                                                                          :type   \"uniform2f\"\n                                                                          :values [(aget gl \"canvas\" \"width\") (aget gl \"canvas\" \"height\")]}\n                                                          :u_matrix      {:name      \"u_matrix\"\n                                                                          :type      \"uniformMatrix4fv\"\n                                                                          :transpose false\n                                                                          :values    (multiply-matrices state)}\n                                                          :u_fudgeFactor {:name   \"u_fudgeFactor\"\n                                                                          :type   \"uniform1f\"\n                                                                          :values [1]}}\n                                             :element    {:draw-type (.-TRIANGLES gl)\n                                                          :offset    0\n                                                          :count     (* 16 6)}}})))))))\n\n(def ^:export lesson\n  {:title           (fn []\n                      [:div\n                       [:h1 {:style {:font-family \"monospace\"}}\n                        \"Lesson - Camera\"]\n                       [:h4 {:style {:font-family \"monospace\"}}\n                        \"Camera\"]])\n   :source          (c/get-filename #'state-atom)\n   :tutorial-source \"webgl-3d-camera.html\"\n   :start           (fn []\n                      (let [canvas-id \"translation\"\n                            state @state-atom\n                            {:keys [translation scale rotation field-of-view]} (:rect state)]\n                        [:div {:style {:display        \"flex\"\n                                       :flex-direction \"row\"}}\n                         [webgl-canvas {:height   400\n                                        :width    400\n                                        :id       canvas-id\n                                        :on-mount (fn []\n                                                    (do\n                                                      (swap! state-atom assoc :gl (webgl/get-context canvas-id))\n                                                      (setup!)\n                                                      (js/requestAnimationFrame draw!)))}]\n                         [:div {:style {:margin-left \"30px\"}}\n                          [unit-circle {:height    300\n                                        :width     300\n                                        :radius    120\n                                        :on-change (fn [{:keys [angle-rad]}]\n                                                     (swap! state-atom assoc-in [:rect :camera-angle-rad] angle-rad)\n                                                     (js/requestAnimationFrame draw!))}]\n                          ]]))})\n"]}