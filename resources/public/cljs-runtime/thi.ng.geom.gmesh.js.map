{"version":3,"sources":["thi/ng/geom/gmesh.cljc"],"mappings":"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","names":["p__29328","p__29329","map__29330","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","vec__29331","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","thi.ng.geom.gmesh/add-face*","vertices","edges","faces","mesh","verts","f","p1__29323#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core/find","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","cljs.core/set","mf","thi.ng.geom.meshface/MeshFace","thi.ng.dstruct.core/wrap-seq","cljs.core/peek","cljs.core/first","cljs.core.partition.cljs$core$IFn$_invoke$arity$3","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__29337","vec__29338","acc","p","c","n","thi.ng.dstruct.core/index-kv","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","pair","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","p__29342","vec__29343","thi.ng.geom.gmesh/vertices-planar?","a","b","or__4185__auto__","thi.ng.geom.utils.ortho_normal.cljs$core$IFn$_invoke$arity$3","p1__29341#","cljs.core/every?","thi.ng.math.core.delta_EQ_.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.utils.ortho_normal.cljs$core$IFn$_invoke$arity$1","cljs.core/rest","p__29353","map__29354","thi.ng.geom.gmesh/face-neighbors-shared-edges","cljs.core.into.cljs$core$IFn$_invoke$arity$2","G__29361","cljs.core.disj.cljs$core$IFn$_invoke$arity$2","p__29364","map__29365","thi.ng.geom.gmesh/vertex-neighbors*","v","clojure.set.union.cljs$core$IFn$_invoke$arity$2","thi.ng.dstruct.core.value_set.cljs$core$IFn$_invoke$arity$3","thi.ng.geom.gmesh/vertex-valence*","thi.ng.geom.gmesh/vertex-faces*","thi.ng.geom.gmesh/remove-vertex*","thi.ng.geom.core/remove-face","var_args","G__29374","thi.ng.geom.gmesh/replace-vertex*","js/Error","v2","vfaces","thi.ng.geom.gmesh.replace_vertex_STAR_.cljs$core$IFn$_invoke$arity$4","p1__29370#","p2__29371#","cljs.core.replace.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.gmesh/merge-vertices*","fexpr__29380","fa","fb","ab-isec","clojure.set.intersection.cljs$core$IFn$_invoke$arity$2","a-xor","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","b-xor","mp","thi.ng.math.core.mix.cljs$core$IFn$_invoke$arity$2","clojure.set.union.cljs$core$IFn$_invoke$arity$variadic","thi.ng.geom.gmesh/gmesh","thi.ng.geom.types/GMesh","G__29390","thi.ng.geom.gmesh/lathe-mesh","points","res","phi","rot-fn","thi.ng.geom.gmesh.lathe_mesh.cljs$core$IFn$_invoke$arity$5","face-fn","strips","i","theta","p1__29386#","thi.ng.math.core.delta_EQ_.cljs$core$IFn$_invoke$arity$3","thi.ng.math.core/*eps*","cljs.core/butlast","thi.ng.math.core/norm-range","thi.ng.math.core/TWO_PI","make-face","p__29396","p__29397","vec__29398","vec__29401","a1","a2","b1","b2","cljs.core/PersistentHashSet","and__4174__auto__","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","p__29405","vec__29406","sa","sb","thi.ng.geom.utils/into-mesh","thi.ng.geom.gmesh/saddle","s","sv","thi.ng.geom.vector.vec3.cljs$core$IFn$_invoke$arity$1","p__29410","vec__29411","m","flags","thi.ng.geom.core.as_mesh.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.types/AABB","thi.ng.geom.vector.vec3.cljs$core$IFn$_invoke$arity$0","thi.ng.geom.vector.vec3.cljs$core$IFn$_invoke$arity$3","_","thi.ng.geom.utils.total_area_3d.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.meshface/xf-face-verts","thi.ng.geom.utils/bounding-box","cljs.core/keys","thi.ng.geom.utils/axis-range","thi.ng.geom.utils.bounding_sphere.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.core/centroid","thi.ng.geom.core.vertices.cljs$core$IFn$_invoke$arity$1","thi.ng.geom.core.center.cljs$core$IFn$_invoke$arity$2","o","thi.ng.geom.core/translate","thi.ng.math.core._.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.utils/centroid","thi.ng.geom.utils/map-mesh","cljs.core/vec","cljs.core/rseq","thi.ng.geom.gmesh.replace_vertex_STAR_.cljs$core$IFn$_invoke$arity$3","opts","p1__29419#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.core/raw","face","p__29448","map__29449","map__29451","fnormals","vnormals","fv","thi.ng.geom.core.vertices.cljs$core$IFn$_invoke$arity$2","vnorms","fedges","vec__29471","e","efaces","cljs.core/seq","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","ve","p1__29421#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/next","force?","thi.ng.geom.core/compute-face-normals","thi.ng.geom.core/compute-vertex-normals","norms","cljs.core/transient","fnorms","cljs.core/PersistentHashMap","vec__29489","thi.ng.dstruct.core/index!","cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/persistent!","map__29495","this","normals","ntx","p1__29426#","cljs.core.map.cljs$core$IFn$_invoke$arity$1","vec__29505","cljs.core.transduce.cljs$core$IFn$_invoke$arity$4","thi.ng.math.core/+","thi.ng.geom.vector/V3","thi.ng.math.core.normalize.cljs$core$IFn$_invoke$arity$1","thi.ng.geom.core/into","thi.ng.geom.core.tessellate.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.utils/tessellate-face","thi.ng.geom.utils/tessellate-with-first","p1__29427#","thi.ng.geom.utils/transform-mesh","thi.ng.math.core._STAR_.cljs$core$IFn$_invoke$arity$2","p1__29428#","thi.ng.math.core/madd","t","p1__29429#","thi.ng.math.core._PLUS_.cljs$core$IFn$_invoke$arity$2","tx","thi.ng.geom.utils.total_volume.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns thi.ng.geom.gmesh\n  (:require\n   [thi.ng.geom.core :as g]\n   [thi.ng.geom.utils :as gu]\n   [thi.ng.geom.vector :as v :refer [vec2 vec3]]\n   [thi.ng.geom.matrix :refer [M44]]\n   [thi.ng.geom.meshface :as mf]\n   #?(:clj [thi.ng.geom.types] :cljs [thi.ng.geom.types :refer [AABB GMesh]])\n   [thi.ng.dstruct.core :as d]\n   [thi.ng.math.core :as m :refer [*eps*]]\n   [clojure.core.reducers :as r]\n   [clojure.set :as set])\n  #?(:clj (:import [thi.ng.geom.types AABB GMesh])))\n\n(defn- add-face*\n  [{:keys [vertices edges faces] :as mesh} [verts]]\n  (let [f (mapv #(get (find vertices %) 0 %) verts)]\n    (if (and (nil? (get faces f))\n             (= (count f) (count (set f))))\n      (let [mf       (thi.ng.geom.meshface.MeshFace. f nil)\n            vertices (->> (d/wrap-seq f [(peek f)] [(first f)])\n                          (partition 3 1)\n                          (reduce\n                           (fn [acc [p c n]]\n                             (d/index-kv acc c {:next n :prev p :f mf}))\n                           vertices))\n            edges    (->> (conj f (first f))\n                          (partition 2 1)\n                          (reduce\n                           (fn [acc pair] (d/index-kv acc (set pair) mf))\n                           edges))]\n        (assoc mesh\n               :vertices vertices\n               :edges edges\n               :faces (conj faces mf)))\n      mesh)))\n\n(defn vertices-planar?\n  [[a b c :as verts]]\n  (or (< (count verts) 4)\n      (let [n (gu/ortho-normal a b c)]\n        (every? #(m/delta= n (gu/ortho-normal %))\n                (partition 3 1 (conj (rest verts) a))))))\n\n(defn face-neighbors-shared-edges\n  [{:keys [edges]} f]\n  (->> (conj f (first f))\n       (partition 2 1)\n       (reduce\n        (fn [acc pair] (into acc (-> pair set edges (disj f))))\n        [])))\n\n(defn vertex-neighbors*\n  [{vertices :vertices} v]\n  (set/union\n   (d/value-set :next vertices v)\n   (d/value-set :prev vertices v)))\n\n(defn vertex-valence*\n  [mesh v] (-> mesh (get :vertices) (get v) count inc))\n\n(defn vertex-faces*\n  [mesh v] (d/value-set :f (get mesh :vertices) v))\n\n(defn remove-vertex*\n  [mesh v]\n  (if (find (get mesh :vertices) v)\n    (reduce g/remove-face mesh (vertex-faces* mesh v))\n    mesh))\n\n(defn replace-vertex*\n  ([mesh v v2]\n   (let [vfaces (vertex-faces* mesh v)]\n     (-> (reduce g/remove-face mesh vfaces)\n         (replace-vertex* v v2 vfaces))))\n  ([mesh v v2 faces]\n   (reduce #(add-face* % (replace {v v2} %2)) mesh faces)))\n\n(defn merge-vertices*\n  [mesh a b]\n  (if ((vertex-neighbors* mesh a) b)\n    (let [fa      (vertex-faces* mesh a)\n          fb      (vertex-faces* mesh b)\n          ab-isec (set/intersection fa fb)\n          a-xor   (set/difference fa ab-isec)\n          b-xor   (set/difference fb ab-isec)\n          mp      (m/mix a b)]\n      (-> (reduce g/remove-face mesh (set/union ab-isec a-xor b-xor))\n          (replace-vertex* a mp a-xor)\n          (replace-vertex* b mp b-xor)))\n    mesh))\n\n(defn gmesh\n  \"Builds a new 3d mesh data structure and (optionally) populates it with\n  the given items (a seq of existing meshes and/or faces). Faces are defined\n  as vectors of their vertices.\"\n  [] (GMesh. {} #{} {} {} {} #{}))\n\n;; *** Creating a mesh from a lathe\n;;\n;; Revolving a seq of points (usually all in a plane) around an axis\n;; is a classic and very powerful way to construct a\n;; symmetrical/cylindrical 3d mesh. The =lathe-mesh= function does\n;; exactly this (but in a more flexible way): It takes a seq of\n;; =Vec3='s and treats them as lathe to form a mesh. The lathe is\n;; revolved around an axis using a given rotation fn and radial extend\n;; & resolution. The rotation fn must accept two args: a point &\n;; rotation angle. Apart from =rotate-around-axis= all other methods\n;; of the =PRotate3D= protocol (implemented by =Vec3=) satisfy this\n;; condition. To use =rotate-around-axis= as rotation fn, it needs to\n;; be wrapped in a closure with the axis pre-configured.\n;;\n;; The =lathe-mesh= fn first divides the given revolution angle \u03a6\n;; (phi) by the given resolution and creates a seq of rotated point\n;; strips. It then proceeds to form faces between pairs of these\n;; strips. If face points lie on the rotation axis, triangles will be\n;; created or faces skipped entirely to avoid degenerate meshes.\n;; Optionally, each resulting face can also be transformed before\n;; being added to the mesh (e.g. scaled to create gaps or subdivide).\n;; This face transform fn should accept a seq of points and return a\n;; seq of faces (or return nil to skip a face).\n;;\n;; The rotation fn too can be used to not just rotate a point. E.g.\n;; Scaling points based on \u0398 (the rotation angle) post-rotation can\n;; produce very interesting results. The example function below does\n;; this for a lathe defined in the XZ plane and centered around the\n;; Z-axis:\n;;\n;; ```\n;; (fn [p theta]\n;;   (let [s (inc (* (Math/sin (* theta 6)) 0.25))]\n;;     (-> p\n;;         (g/rotate-z theta) ;; first rotate\n;;         (m/* s s 1.0))))   ;; then scale in XY plane only\n;; ```\n;;\n;; Finally, in order to create a fully closed mesh, the revolution\n;; angle \u03a6 must be 2*\u03a0 and the first and last points of the lathe seq\n;; must be located on the rotation axis.\n\n(defn lathe-mesh\n  ([points res phi rot-fn]\n   (lathe-mesh points res phi rot-fn nil))\n  ([points res phi rot-fn face-fn]\n   (let [strips    (mapv\n                    (fn [i]\n                      (let [theta (* i phi)]\n                        (mapv #(let [p (rot-fn % theta)]\n                                 (if (m/delta= p % *eps*)\n                                   % p))\n                              points)))\n                    (butlast (m/norm-range res)))\n         strips    (if (m/delta= phi m/TWO_PI)\n                     (conj strips (first strips))\n                     strips)\n         make-face (fn [[a1 a2] [b1 b2]] ;; TODO add attrib support\n                     (let [f (cond\n                               (< (count (hash-set a1 a2 b1 b2)) 3) nil\n                               (= a1 b1) [b1 b2 a2]\n                               (= a2 b2) [b1 a2 a1]\n                               :default [b1 b2 a2 a1])]\n                       [(if (and f face-fn) (face-fn f) [f])]))]\n     (->> (partition 2 1 strips)\n          (mapcat ;; TODO transduce\n           (fn [[sa sb]]\n             (mapcat make-face\n                     (partition 2 1 sa)\n                     (partition 2 1 sb))))\n          (gu/into-mesh (gmesh) add-face*)))))\n\n(defn saddle\n  [s]\n  (let [sv (vec3 s)]\n    (reduce\n     (fn [m [p flags]]\n       (gu/into-mesh m add-face* (g/as-mesh (AABB. p s) {:flags flags})))\n     (gmesh)\n     [[(vec3) :ewsfb]\n      [(vec3 0 s 0) :wfb]\n      [(vec3 s s 0) :ensfb]\n      [(vec3 0 (* s 2) 0) :ewnfb]])))\n\n(extend-type GMesh\n\n  g/IArea\n  (area\n    [_] (gu/total-area-3d (mf/xf-face-verts _) (get _ :faces)))\n\n  g/IBounds\n  (bounds [_] (gu/bounding-box (keys (get _ :vertices))))\n  (width [_]  (gu/axis-range 0 (keys (get _ :vertices))))\n  (height [_] (gu/axis-range 1 (keys (get _ :vertices))))\n  (depth [_]  (gu/axis-range 2 (keys (get _ :vertices))))\n\n  g/IBoundingSphere\n  (bounding-sphere\n    [_] (gu/bounding-sphere (g/centroid _) (g/vertices _)))\n\n  g/ICenter\n  (center\n    ([_] (g/center _ (vec3)))\n    ([_ o] (g/translate _ (m/- o (g/centroid _)))))\n  (centroid\n    [_] (gu/centroid (keys (get _ :vertices))))\n\n  g/IFlip\n  (flip [_] (gu/map-mesh (fn [f] [(vec (rseq f))]) _))\n\n  g/IGraph\n  (connected-components\n    [_] [_]) ;; TODO\n  (vertex-neighbors\n    [_ v] (vertex-neighbors* _ v))\n  (vertex-valence\n    [_ v] (vertex-valence* _ v))\n  (remove-vertex\n    [_ v] (remove-vertex* _ v))\n  (replace-vertex\n    [_ v v2] (replace-vertex* _ v v2))\n  (merge-vertices\n    [_ a b] (merge-vertices* _ a b))\n\n  g/IVertexAccess\n  (vertices\n    [_] (keys (get _ :vertices)))\n\n  g/IEdgeAccess\n  (edges\n    [_] (keys (get _ :edges)))\n\n  g/IFaceAccess\n  (faces\n    ([_] (get _ :faces))\n    ([_ opts]\n     (if opts\n       (map #(g/raw % _) (get _ :faces))\n       (get _ :faces))))\n  (add-face\n    [_ face] (add-face* _ face))\n  (vertex-faces\n    [_ v] (vertex-faces* _ v))\n  (remove-face\n    [{:keys [vertices edges faces fnormals vnormals] :as _} f]\n    (if (get faces f)\n      (let [fv (g/vertices f _)]\n        (loop [verts  vertices\n               vnorms vnormals\n               edges  edges\n               fedges (partition 2 1 (conj fv (first fv)))]\n          (if fedges\n            (let [[a b]  (first fedges)\n                  e      #{a b}\n                  efaces (disj (get edges e) f)\n                  edges  (if (seq efaces)\n                           (assoc edges e efaces)\n                           (dissoc edges e))\n                  ve     (filter #(not= (get % :f) f) (get verts a))]\n              (if (seq ve)\n                (recur (assoc verts a (into #{} ve)) vnorms edges (next fedges))\n                (recur (dissoc verts a) (dissoc vnorms a) edges (next fedges))))\n            (assoc _\n                   :vertices verts\n                   :vnormals vnorms\n                   :edges edges\n                   :faces (disj faces f)\n                   :fnormals (dissoc fnormals f)))))\n      _))\n\n  g/INormalAccess\n  (face-normals\n    [_ force?]\n    (if (seq (get _ :fnormals))\n      (get _ :fnormals)\n      (if force? (get (g/compute-face-normals _) :fnormals))))\n  (face-normal\n    [_ f] (get (get _ :fnormals) f))\n  (vertex-normals\n    [_ force?]\n    (if (seq (get _ :vnormals))\n      (get _ :vnormals)\n      (if force? (get (g/compute-vertex-normals _) :vnormals))))\n  (vertex-normal\n    [_ v] (get (get _ :vnormals) v))\n  (compute-face-normals\n    [_]\n    (loop [norms (transient #{}), fnorms (transient (hash-map)), faces (get _ :faces)]\n      (if faces\n        (let [^thi.ng.geom.meshface.MeshFace f (first faces)\n              [norms n] (d/index! norms (gu/ortho-normal (.-vertices f)))]\n          (recur norms (assoc! fnorms f n) (next faces)))\n        (assoc _\n               :normals  (persistent! norms)\n               :fnormals (persistent! fnorms)))))\n  (compute-vertex-normals\n    [_]\n    (let [this (if (seq (get _ :fnormals)) _ (g/compute-face-normals _))\n          {:keys [vertices normals fnormals]} this\n          ntx (map #(get fnormals %))]\n      (loop [norms (transient normals), vnorms (transient (hash-map)), verts (keys vertices)]\n        (if verts\n          (let [v (first verts)\n                [norms n] (->> (d/value-set :f vertices v)\n                               (transduce ntx m/+ v/V3)\n                               (m/normalize)\n                               (d/index! norms))]\n            (recur norms (assoc! vnorms v n) (next verts)))\n          (assoc this\n                 :normals  (persistent! norms)\n                 :vnormals (persistent! vnorms))))))\n\n  g/IGeomContainer\n  (into\n    [_ faces] (gu/into-mesh _ add-face* faces))\n\n  g/IClear\n  (clear*\n    [_] (gmesh))\n\n  g/IMeshConvert\n  (as-mesh\n    ([_] _)\n    ([_ opts] (g/into (get opts :mesh) (get _ :faces))))\n\n  g/ITessellate\n  (tessellate\n    ([_]      (g/tessellate _ {}))\n    ([_ opts] (gu/map-mesh (or (get opts :fn) (gu/tessellate-face gu/tessellate-with-first)) _)))\n\n  g/IScale\n  (scale\n    [_ s] (gu/transform-mesh _ add-face* #(m/* % s)))\n  (scale-size\n    [_ s]\n    (let [c (g/centroid _)]\n      (gu/transform-mesh _ add-face* #(m/madd (m/- % c) s c))))\n\n  g/ITranslate\n  (translate\n    [_ t] (gu/transform-mesh _ add-face* #(m/+ % t)))\n\n  g/ITransform\n  (transform\n    [_ tx]\n    (gu/transform-mesh _ add-face* tx))\n\n  g/IVolume\n  (volume\n    [_] (gu/total-volume (mf/xf-face-verts _) (get _ :faces))))\n"]}