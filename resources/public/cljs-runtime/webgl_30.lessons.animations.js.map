{"version":3,"sources":["webgl_30/lessons/animations.cljs"],"mappings":"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","names":["webgl-30.lessons.animations/initial-state","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","webgl-30.math/deg->rad","js/webgl-30","js/webgl-30.lessons","js/webgl-30.lessons.animations","js/webgl-30.lessons.animations.state-atom","webgl-30.lessons.animations/state-atom","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/deref","cljs.core/reset!","webgl-30.lessons.animations/fragment-shader","webgl-30.lessons.animations/vertex-shader","p__26282","map__26283","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","webgl-30.lessons.animations/multiply-matrices","rect","gl","map__26285","translation","scale","rotation","projection-matrix","webgl-30.math/projection-3d-matrix","webgl-30.webgl/get-canvas-width","webgl-30.webgl/get-canvas-height","orthographic-matrix","webgl-30.math/orthographic-matrix","translation-matrix","webgl-30.math/translation-3d-matrix","rotation-matrix-x","webgl-30.math/rotation-3d-x-matrix","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","rotation-matrix-y","webgl-30.math/rotation-3d-y-matrix","rotation-matrix-z","webgl-30.math/rotation-3d-z-matrix","scale-matrix","webgl-30.math/scaling-3d-matrix","webgl-30.math/matrix-multiply-3d","webgl-30.lessons.animations/draw!","timestamp","state","map__26293","s","now","delta-time","cljs.core/assoc-in","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","webgl-30.webgl/draw-scene!","js/requestAnimationFrame","t","G__26297","G__26298","webgl-30.lessons.animations/setup!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","p__26307","map__26308","program","webgl-30.webgl/link-shaders!","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","webgl-30.webgl/attribute","js/Float32Array","webgl-30.shapes/f-shape-3d","js/Uint8Array","webgl-30.shapes/f-shape-3d-color","webgl-30.lessons.animations/lesson","webgl-30.core/get-filename","map__26333","canvas-id","webgl-30.component/webgl-canvas","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","webgl-30.webgl/get-context"],"sourcesContent":["(ns webgl-30.lessons.animations\n  (:require [reagent.core :as r]\n            [webgl-30.core :as c]\n            [webgl-30.math :as m]\n            [webgl-30.webgl :as webgl]\n            [webgl-30.shapes :as shapes]\n            [webgl-30.component :refer [webgl-canvas slider]]\n            [webgl-30.core :as c]))\n\n(def initial-state {:gl   nil\n                    :rect {:translation    [200 170 100]\n                           :rotation       (mapv m/deg->rad [190 40 320])\n                           :scale          [1 1 1]\n                           :rotation-speed 1.2\n                           :then           0\n                           :width          100\n                           :height         30\n                           :color          [0.3 0.3 0.3 1]}})\n(defonce state-atom (r/atom nil))\n(when (nil? @state-atom)\n  (reset! state-atom initial-state))\n\n(def fragment-shader\n  \"precision mediump float;\n\n   // we got this from the vertex shader!\n   varying vec4 v_color;\n\n   void main() {\n       gl_FragColor = v_color;\n   }\")\n\n(def vertex-shader\n  \"attribute vec4 a_position;\n   attribute vec4 a_color;\n\n  uniform mat4 u_matrix;\n  varying vec4 v_color;\n\n  void main() {\n    gl_Position = u_matrix * a_position;\n\n    // this can be passed to the fragment shader\n    v_color = a_color;\n  }\")\n\n(defn multiply-matrices\n  [{:keys [rect gl]}]\n  (let [{:keys [translation scale rotation]} rect\n        projection-matrix (m/projection-3d-matrix (webgl/get-canvas-width gl) (webgl/get-canvas-height gl) 400)\n        orthographic-matrix (m/orthographic-matrix 0 (webgl/get-canvas-width gl) (webgl/get-canvas-height gl) 0 400 -400)\n        translation-matrix (m/translation-3d-matrix translation)\n        rotation-matrix-x (m/rotation-3d-x-matrix (nth rotation 0))\n        rotation-matrix-y (m/rotation-3d-y-matrix (nth rotation 1))\n        rotation-matrix-z (m/rotation-3d-z-matrix (nth rotation 2))\n        scale-matrix (m/scaling-3d-matrix scale)]\n    (-> (m/matrix-multiply-3d orthographic-matrix translation-matrix)\n        (m/matrix-multiply-3d rotation-matrix-x)\n        (m/matrix-multiply-3d rotation-matrix-y)\n        (m/matrix-multiply-3d rotation-matrix-z)\n        (m/matrix-multiply-3d scale-matrix))))\n\n(defn draw!\n  [timestamp state]\n  (let [{:keys [rect] :as s} state\n        now (* timestamp 0.001)\n        delta-time (- now (:then rect))\n        state (assoc-in s [:rect :rotation 1] (+ (get-in rect [:rotation 1]) (* (:rotation-speed rect) delta-time)))]\n    (-> (assoc-in state [:objects-to-draw :my-f :uniforms :u_matrix :values] (multiply-matrices state))\n        webgl/draw-scene!)\n    (js/requestAnimationFrame (fn [t] (draw! t (assoc-in state [:rect :then] now))))))\n\n(defn setup!\n  []\n  (-> (swap! state-atom (fn [{:keys [gl rect] :as state}]\n                          (let [program (webgl/link-shaders! gl {:fs fragment-shader :vs vertex-shader})]\n                            (->\n                              (assoc state :clear-depth? true)\n                              (assoc :objects-to-draw\n                                     {:my-f {:program    program\n                                             :features   [(.-CULL_FACE gl) (.-DEPTH_TEST gl)]\n                                             :attributes {:a_position (webgl/attribute gl program {:name \"a_position\"\n                                                                                                   :size 3\n                                                                                                   :type (.-FLOAT gl)\n                                                                                                   :data (js/Float32Array. shapes/f-shape-3d)})\n                                                          :a_color    (webgl/attribute gl program {:name      \"a_color\"\n                                                                                                   :size      3\n                                                                                                   :type      (.-UNSIGNED_BYTE gl)\n                                                                                                   :normalize true\n                                                                                                   :data      (js/Uint8Array. shapes/f-shape-3d-color)})}\n                                             :uniforms   {:u_resolution {:name   \"u_resolution\"\n                                                                         :type   \"uniform2f\"\n                                                                         :values [(aget gl \"canvas\" \"width\") (aget gl \"canvas\" \"height\")]}\n                                                          :u_matrix     {:name      \"u_matrix\"\n                                                                         :type      \"uniformMatrix4fv\"\n                                                                         :transpose false\n                                                                         :values    (multiply-matrices state)}}\n                                             :element    {:draw-type (.-TRIANGLES gl)\n                                                          :offset    0\n                                                          :count     (* 16 6)}}})))))))\n\n(def ^:export lesson\n  {:title           (fn []\n                      [:div\n                       [:h1 {:style {:font-family \"monospace\"}}\n                        \"Lesson - Orthographic 3D\"]\n                       [:h4 {:style {:font-family \"monospace\"}}\n                        \"Matrix\"]])\n   :source          (c/get-filename #'state-atom)\n   :tutorial-source \"webgl-animation.html\"\n   :start           (fn []\n                      (let [canvas-id \"translation\"\n                            state @state-atom\n                            {:keys [translation scale rotation]} (:rect state)]\n                        [:div {:style {:display        \"flex\"\n                                       :flex-direction \"row\"}}\n                         [webgl-canvas {:height   400\n                                        :width    400\n                                        :id       canvas-id\n                                        :on-mount (fn []\n                                                    (do\n                                                      (swap! state-atom assoc :gl (webgl/get-context canvas-id))\n                                                      (setup!)\n                                                      (js/requestAnimationFrame (fn [t] (draw! t @state-atom)))))}]]))})\n"]}