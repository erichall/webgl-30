{"version":3,"sources":["thi/ng/geom/gl/shaders.cljc"],"mappings":"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","names":["thi.ng.geom.gl.shaders/bool->int","x","thi.ng.geom.gl.shaders/bool->ivec","coll","thi.ng.typedarrays.core/int32","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.gl.shaders/uniform-types","cljs.core/float","cljs.core/int","thi.ng.typedarrays.core/float32","thi.ng.geom.gl.shaders/init-shader-uniforms","gl","prog","uniforms","cljs.core/reduce-kv","umap","id","type","vec__31101","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__31104","loc","cljs.core/name","default","opt","cljs.core/sequential?","setter","u-cast","u-len","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","fexpr__31107","fexpr__31108","cljs.core/boolean","thi.ng.typedarrays.core/typed-array?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","thi.ng.dstruct.streams/IBuffer","thi.ng.dstruct.streams/get-float-buffer","G__31110","G__31112","thi.ng.color.core/int24","cljs.core/deref","cljs.core.subvec.cljs$core$IFn$_invoke$arity$3","thi.ng.color.core/css","G__31114","thi.ng.geom.gl.shaders/set-uniform","shader","val","temp__5733__auto__","u-spec","cljs.core.get.cljs$core$IFn$_invoke$arity$2","G__31116","fexpr__31115","cljs.core/fn?","js/console","js/Date","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/str","cljs.core.interpose.cljs$core$IFn$_invoke$arity$2","cljs.core/List","thi.ng.geom.gl.shaders/apply-default-uniforms","_","cljs.core/not","d","thi.ng.geom.gl.shaders/init-shader-attribs","attribs","acc","thi.ng.geom.gl.shaders/set-attribute","attrib-spec","map__31118","cljs.core/hash-map","buffer","stride","size","normalized?","offset","G__31120","thi.ng.geom.gl.webgl.constants/array-buffer","or__4185__auto__","thi.ng.geom.gl.webgl.constants/float","thi.ng.geom.gl.shaders/disable-attribute","thi.ng.geom.gl.shaders/default-prelude","thi.ng.geom.gl.shaders/compile-glsl-vars","qualifier","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__31121","vec__31122","cljs.core/first","thi.ng.geom.gl.shaders/compile-glsl3-attribs","p__31125","vec__31126","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","p__31129","map__31130","thi.ng.geom.gl.shaders/prepare-shader-sources","vs","fs","varying","prelude","version","gl3?","and__4174__auto__","u-src","a-src","v-src-vs","v-src-fs","src","thi.ng.geom.gl.shaders/parse-and-throw-error","src-lines","cljs.core/vec","clojure.string/split-lines","errors","line","vec__31133","ln","msg","cljs.core/re-find","js/parseInt","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","clojure.string.join.cljs$core$IFn$_invoke$arity$2","thi.ng.xerror.core/throw!","thi.ng.geom.gl.shaders/compile-shader","thi.ng.geom.gl.webgl.constants/compile-status","thi.ng.geom.gl.shaders/bind-attrib-locations","program","att","thi.ng.geom.gl.shaders/make-shader-from-spec","spec","map__31136","map__31137","vs-src","fs-src","thi.ng.geom.gl.webgl.constants/vertex-shader","thi.ng.geom.gl.webgl.constants/fragment-shader","G__31140","thi.ng.geom.gl.webgl.constants/link-status","G__31141","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","p__31142","map__31143","thi.ng.geom.gl.shaders/make-shader-from-dom","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","thi.ng.geom.gl.utils/get-script-text"],"sourcesContent":["(ns thi.ng.geom.gl.shaders\n  #?(:clj\n     (:import\n      [com.jogamp.opengl GL GL2 GL3 GL4]\n      [com.jogamp.opengl.util.glsl ShaderCode ShaderProgram ShaderUtil]\n      [java.nio Buffer FloatBuffer IntBuffer ShortBuffer])\n     :cljs\n     (:require-macros\n      [cljs-log.core :refer [debug warn]]))\n  (:require\n   [thi.ng.math.core :as m]\n   [thi.ng.geom.core :as g]\n   [thi.ng.dstruct.streams :as streams]\n   [thi.ng.color.core :as col]\n   [thi.ng.xerror.core :as err]\n   [clojure.string :as str]\n   #?@(:clj\n       [[thi.ng.geom.gl.jogl.buffers :as native]\n        [thi.ng.geom.gl.jogl.constants :as glc]\n        [thi.ng.glsl.core :as glsl]]\n       :cljs\n       [[thi.ng.geom.gl.webgl.constants :as glc]\n        [thi.ng.geom.gl.utils :as glu]\n        [thi.ng.glsl.core :as glsl :include-macros true]\n        [thi.ng.typedarrays.core :as ta]])))\n\n;; Shader spec format\n;;\n;; | *Key*       | *Description*                                           |\n;; |-------------+---------------------------------------------------------|\n;; | `:vs`       | Vertex shader source                                    |\n;; | `:fs`       | Fragment shader source                                  |\n;; | `:attribs`  | User attributes                                         |\n;; | `:uniforms` | Shader uniform specification & defaults                 |\n;; | `:varying`  | Shader internal bridge variables                        |\n;; | `:prelude`  | GLSL source code to prepend (e.g. =#define= directives) |\n;; | `:version`  | GLSL version number (generates =#version= directive)    |\n;; | `:state`    | OpenGL state flags to initialize when shader is used    |\n;;\n;; TODO sample shader spec\n\n(defn bool->int [x] (if x 1 0))\n\n(defn bool->ivec\n  [coll] (#?(:clj native/int-buffer :cljs ta/int32) (mapv bool->int coll)))\n\n;; Shader uniforms\n;; Supported types\n\n(def uniform-types\n  #?(:clj  {:float       [#(.glUniform1f ^GL3 % %2 %3) float 1]\n            :int         [#(.glUniform1i ^GL3 % %2 %3) int 1]\n            :vec2        [#(.glUniform2fv ^GL3 % %2 1 ^FloatBuffer %3) native/float-buffer 2]\n            :vec3        [#(.glUniform3fv ^GL3 % %2 1 ^FloatBuffer %3) native/float-buffer 3]\n            :vec4        [#(.glUniform4fv ^GL3 % %2 1 ^FloatBuffer %3) native/float-buffer 4]\n            :ivec2       [#(.glUniform2iv ^GL3 % %2 1 ^IntBuffer %3) native/int-buffer 2]\n            :ivec3       [#(.glUniform3iv ^GL3 % %2 1 ^IntBuffer %3) native/int-buffer 3]\n            :ivec4       [#(.glUniform4iv ^GL3 % %2 1 ^IntBuffer %3) native/int-buffer 4]\n            :bool        [#(.glUniform1i ^GL3 % %2 %3) bool->int 1]\n            :bvec2       [#(.glUniform2iv ^GL3 % %2 1 ^IntBuffer %3) bool->ivec 2]\n            :bvec3       [#(.glUniform3iv ^GL3 % %2 1 ^IntBuffer %3) bool->ivec 3]\n            :bvec4       [#(.glUniform4iv ^GL3 % %2 1 ^IntBuffer %3) bool->ivec 4]\n            :mat2        [#(.glUniformMatrix2fv ^GL3 % %2 1 %3 ^FloatBuffer %4) native/float-buffer 4]\n            :mat3        [#(.glUniformMatrix3fv ^GL3 % %2 1 %3 ^FloatBuffer %4) native/float-buffer 9]\n            :mat4        [#(.glUniformMatrix4fv ^GL3 % %2 1 %3 ^FloatBuffer %4) native/float-buffer 16]\n            :sampler2D   [#(.glUniform1i ^GL3 % %2 %3) int 1]\n            :samplerCube [#(.glUniform1i ^GL3 % %2 %3) int 1]}\n     :cljs {:float       [\"1f\" float]\n            :int         [\"1i\" int]\n            :vec2        [\"2fv\" ta/float32 2]\n            :vec3        [\"3fv\" ta/float32 3]\n            :vec4        [\"4fv\" ta/float32 4]\n            :ivec2       [\"2iv\" ta/int32 2]\n            :ivec3       [\"3iv\" ta/int32 3]\n            :ivec4       [\"4iv\" ta/int32 4]\n            :bool        [\"1i\" int]\n            :bvec2       [\"2iv\" ta/int32 2]\n            :bvec3       [\"3iv\" ta/int32 3]\n            :bvec4       [\"4iv\" ta/int32 4]\n            :mat2        [\"Matrix2fv\" ta/float32 4]\n            :mat3        [\"Matrix3fv\" ta/float32 9]\n            :mat4        [\"Matrix4fv\" ta/float32 16]\n            :sampler2D   [\"1i\" int]\n            :samplerCube [\"1i\" int]}))\n\n;; Uniform setup & handling\n;;\n;; Shader specs define uniforms as a map under the `:uniforms` key. In\n;; this map, each of the shader's uniform names must be stated as keys\n;; and their types as values. Default values can be given by using a\n;; vector of `[type default]`. Default values are only used when a user\n;; doesn't specify a uniform in their model spec. The example below\n;; defines default values for the `:ambient`, `:model` and `:texture`\n;; uniforms:\n;;\n;; ```\n;; :uniforms {:alpha    :float\n;;            :diffuse  :vec3\n;;            :ambient  [:vec3 [0.1 0.1 0.1]]\n;;            :texture  [:sampler2D 0]\n;;            :modelMat [:mat4 M44]\n;;            :viewMat  :mat4\n;;            :projMat  :mat4}\n;; ```\n;;\n;; Special cases:\n;;\n;; - Setters for `:vec2` uniforms expect a 2-element vector or a number.\n;;   If the latter, it is interpreted as `[n n]`.\n;; - Setters for `:vec3` uniforms expect a 3-element vector, a\n;;   thi.ng/color type or an integer. If the latter, it is interpreted as\n;;   24bit RGB value and converted into a normalized RGB vector (`[r g b]`).\n;; - Setters for `:vec4` uniforms expect a 4-element vector, color type,\n;;   an integer or a CSS color string in `#hex`, `rgba()` or `hsla()`\n;;   form, which is then converted into a normalized RGBA vector (`[r g b\n;;   a]`)\n;; - Values for Matrix uniforms can be specified as vector `[mat default transpose?]`\n;;   to indicate given matrix should be transposed\n\n(defn init-shader-uniforms\n  #?(:clj  [^GL3 gl prog uniforms]\n     :cljs [^WebGLRenderingContext gl prog uniforms])\n  (reduce-kv\n   (fn [umap id type]\n     (let [loc                   #?(:clj  (.glGetUniformLocation gl prog (name id))\n                                    :cljs (.getUniformLocation gl prog (name id)))\n           [type default opt]    (if (sequential? type) type [type])\n           [setter u-cast u-len] (uniform-types type)\n           #?@(:cljs [setter (aget gl (str \"uniform\" setter))])]\n       #?(:clj (prn :uniform-loc id loc))\n       (assoc\n        umap id\n        {:type    type\n         :default default\n         :setter  (cond\n                    (#{:float :int :bool :sampler2D} type)\n                    (fn [x]\n                      #?(:clj  (setter gl loc (u-cast x))\n                         :cljs (.call setter gl loc (u-cast x))))\n\n                    (#{:mat2 :mat3 :mat4} type)\n                    (fn [x]\n                      #?(:clj\n                         (setter gl loc (boolean opt)\n                                 (if (instance? FloatBuffer x)\n                                   x (u-cast x)))\n                         :cljs\n                         (.call setter gl loc (boolean opt)\n                                (if (ta/typed-array? x)\n                                  x (u-cast x)))))\n\n                    (= :vec2 type)\n                    (fn [x]\n                      (let [x (cond\n                                #?@(:clj  [(instance? FloatBuffer x) x]\n                                    :cljs [(ta/typed-array? x) x])\n                                (satisfies? streams/IBuffer x) (streams/get-float-buffer x)\n                                (number? x) (u-cast [x x])\n                                :else (u-cast x))]\n                        #?(:clj  (setter gl loc x)\n                           :cljs (.call setter gl loc x))))\n\n                    (= :vec3 type)\n                    (fn [x]\n                      (let [x (cond\n                                #?@(:clj  [(instance? FloatBuffer x) x]\n                                    :cljs [(ta/typed-array? x) x])\n                                (satisfies? streams/IBuffer x) (streams/get-float-buffer x)\n                                (number? x) (-> x col/int24 col/as-rgba deref (subvec 0 3) u-cast)\n                                :else (u-cast x))]\n                        #?(:clj  (setter gl loc x)\n                           :cljs (.call setter gl loc x))))\n\n                    (= :vec4 type)\n                    (fn [x]\n                      (let [x (cond\n                                #?@(:clj  [(instance? FloatBuffer x) x]\n                                    :cljs [(ta/typed-array? x) x])\n                                (satisfies? streams/IBuffer x) (streams/get-float-buffer x)\n                                (number? x) (-> x col/int24 col/as-rgba streams/get-float-buffer)\n                                (string? x) (-> x col/css col/as-rgba streams/get-float-buffer)\n                                :else (u-cast x))]\n                        #?(:clj  (setter gl loc x)\n                           :cljs (.call setter gl loc x))))\n\n                    :else\n                    (fn [x]\n                      #?(:clj\n                         (setter gl loc\n                                 (if (instance? FloatBuffer x)\n                                   x (u-cast (if (not (sequential? x)) [x] x))))\n                         :cljs\n                         (.call setter gl loc\n                                (if (ta/typed-array? x)\n                                  x (u-cast (if (not (sequential? x)) [x] x)))))))\n         :loc     loc})))\n   {} uniforms))\n\n(defn set-uniform\n  [shader uniforms id val]\n  ;;(#?(:clj prn :cljs debug) :uniform id (get-in shader [:uniforms id :loc]) val)\n  (if-let [u-spec (-> shader (get :uniforms) (get id))]\n    ((get u-spec :setter) (if (fn? val) (val shader uniforms) val))\n    (#?(:clj prn :cljs warn) \"Unknown shader uniform: \" id)))\n\n(defn apply-default-uniforms\n  [shader uniforms]\n  (reduce-kv\n   (fn [_ id val]\n     (if-not (get uniforms id)\n       (if-let [d (get val :default)]\n         (set-uniform shader uniforms id d))))\n   nil (get shader :uniforms)))\n\n;; Shader attributes\n\n(defn init-shader-attribs\n  #?(:clj  [^GL3 gl prog attribs]\n     :cljs [^WebGLRenderingContext gl prog attribs])\n  (reduce-kv\n   (fn [acc id _]\n     (assoc acc id\n            (#?(:clj .glGetAttribLocation :cljs .getAttribLocation) gl prog (name id))))\n   {} attribs))\n\n(defn set-attribute\n  #?(:clj  [^GL3 gl shader id attrib-spec]\n     :cljs [^WebGLRenderingContext gl shader id attrib-spec])\n  (let [{:keys [buffer stride size type normalized? offset loc]} attrib-spec]\n    ;;(#?(:clj prn :cljs debug) :loc id (-> shader (get :attribs) (get id)) :size size (or stride (* 4 size)))\n    (if-let [loc (int (-> shader (get :attribs) (get id)))]\n      (doto gl\n        #?(:clj  (.glBindBuffer glc/array-buffer (.get ^IntBuffer buffer 0))\n           :cljs (.bindBuffer glc/array-buffer buffer))\n        (#?(:clj .glEnableVertexAttribArray :cljs .enableVertexAttribArray) loc)\n        (#?(:clj .glVertexAttribPointer :cljs .vertexAttribPointer)\n         loc\n         (int size)\n         (or type glc/float)\n         (boolean normalized?)\n         (or stride 0)\n         (or offset 0)))\n      (#?(:clj println :cljs warn) (str \"Unknown shader attribute: \" id)))))\n\n(defn disable-attribute\n  #?(:clj  [^GL3 gl shader id]\n     :cljs [^WebGLRenderingContext gl shader id])\n  (if-let [loc (-> shader (get :attribs) (get id))]\n    (do (#?(:clj .glDisableVertexAttribArray :cljs .disableVertexAttribArray) gl loc) gl)\n    (#?(:clj println :cljs warn) (str \"Unknown shader attribute: \" id))))\n\n;; Shader creation\n;;\n;; Header injection\n;;\n;; These boilerplate `#define`s are prepended by default to any given\n;; shader source before compilation with `compile-shader` below.\n\n(def default-prelude\n  \"#ifdef GL_FRAGMENT_PRECISION_HIGH\n  precision highp int;\n  precision highp float;\n  #else\n  precision mediump int;\n  precision mediump float;\n  #endif\n  #ifndef PI\n  #define PI      3.141592653589793\n  #endif\n  #ifndef TWO_PI\n  #define TWO_PI  6.283185307179586\n  #endif\n  #ifndef HALF_PI\n  #define HALF_PI 1.570796326794896\n  #endif\n  #ifndef RAD\n  #define RAD     0.008726646259972\n  #endif\n  \")\n\n;; Creation, compilation & linking\n\n(defn compile-glsl-vars\n  [qualifier coll]\n  (->> coll\n       (map\n        (fn [[id type]]\n          (str qualifier \" \"\n               (name (if (sequential? type) (first type) type)) \" \"\n               (name id) \";\\n\")))\n       (apply str)))\n\n(defn compile-glsl3-attribs\n  [coll]\n  (->> coll\n       (map\n        (fn [[id type]]\n          (if (sequential? type)\n            (str \"layout(location=\" (nth type 1) \") in \" (name (first type)) \" \" (name id) \";\\n\")\n            (str \"in \" (name type) \" \" (name id) \";\\n\"))))\n       (apply str)))\n\n(defn prepare-shader-sources\n  [{:keys [vs fs uniforms attribs varying prelude version]}]\n  (let [gl3?     (and version (>= version 300))\n        u-src    (compile-glsl-vars \"uniform\" uniforms)\n        a-src    (if gl3? (compile-glsl3-attribs attribs) (compile-glsl-vars \"attribute\" attribs))\n        v-src-vs (compile-glsl-vars (if gl3? \"out\" \"varying\") varying)\n        v-src-fs (compile-glsl-vars (if gl3? \"in\" \"varying\") varying)\n        src      (if version (str \"#version \" version \"\\n\") \"\")\n        src      (str src (or prelude default-prelude) u-src)]\n    {:vs-src (str src v-src-vs a-src vs)\n     :fs-src (str src v-src-fs fs)}))\n\n#?(:cljs\n   (defn parse-and-throw-error\n     [^WebGLRenderingContext gl shader src]\n     (let [src-lines (vec (str/split-lines src))\n           errors (->> shader\n                       (.getShaderInfoLog gl)\n                       (str/split-lines)\n                       (map\n                        (fn [line]\n                          (let [[_ ln msg] (re-find #\"ERROR: \\d+:(\\d+): (.*)\" line)]\n                            (when ln\n                              (str \"line \" ln \": \" msg \"\\n\"\n                                   (nth src-lines (js/parseInt ln 10)))))))\n                       (filter identity)\n                       (str/join \"\\n\"))]\n       (.deleteShader gl shader)\n       (err/throw! (str \"Error compiling shader:\\n\" errors)))))\n\n#?(:cljs\n   (defn compile-shader\n     [^WebGLRenderingContext gl src type]\n     (if-let [shader (.createShader gl type)]\n       (do\n         (.shaderSource gl shader src)\n         (.compileShader gl shader)\n         (if (.getShaderParameter gl shader glc/compile-status)\n           shader\n           (parse-and-throw-error gl shader src)))\n       (err/throw! \"Can't create shader\"))))\n\n(defn bind-attrib-locations\n  #?(:clj  [^GL3 gl program attribs]\n     :cljs [^WebGLRenderingContext gl program attribs])\n  (reduce-kv\n   (fn [_ id att]\n     (when (sequential? att)\n       (#?(:clj prn :cljs debug) :bind-attr id (nth att 1))\n       (#?(:clj .glBindAttribLocation :cljs .bindAttribLocation) gl program (nth att 1) (name id))))\n   nil attribs))\n\n#?(:clj\n   (defn make-shader-from-spec\n     ([^GL3 gl spec version]\n      (make-shader-from-spec gl (assoc spec :version version)))\n     ([^GL3 gl spec]\n      (let [{:keys [vs-src fs-src]} (prepare-shader-sources spec)\n            ^{:tag \"[[Ljava.lang.CharSequence;\"} vs' (make-array CharSequence 1 1)\n            ^{:tag \"[[Ljava.lang.CharSequence;\"} fs' (make-array CharSequence 1 1)\n            _       (aset ^{:tag \"[Ljava.lang.CharSequence;\"} (aget vs' 0) 0 vs-src)\n            _       (aset ^{:tag \"[Ljava.lang.CharSequence;\"} (aget fs' 0) 0 fs-src)\n            vs      (ShaderCode. GL3/GL_VERTEX_SHADER 1 vs')\n            fs      (ShaderCode. GL3/GL_FRAGMENT_SHADER 1 fs')\n            prog    (doto (ShaderProgram.)\n                      (.add vs)\n                      (.add fs)\n                      (.init gl))\n            prog-id (.program prog)]\n        (bind-attrib-locations gl prog-id (:attribs spec))\n        (if (.link prog gl System/out)\n          (let [attribs  (init-shader-attribs gl prog-id (:attribs spec))\n                uniforms (init-shader-uniforms gl prog-id (:uniforms spec))]\n            (merge spec\n                   {:program  prog-id\n                    :uniforms uniforms\n                    :attribs  attribs\n                    :vs       vs-src\n                    :fs       fs-src}))\n          (err/throw! (str \"Shader failed to link:\" (ShaderUtil/getProgramInfoLog gl prog-id)))))))\n\n   :cljs\n   (defn make-shader-from-spec\n     [^WebGLRenderingContext gl spec]\n     (let [{:keys [uniforms attribs]} spec\n           {:keys [vs-src fs-src]} (prepare-shader-sources spec)\n           vs       (compile-shader gl vs-src glc/vertex-shader)\n           fs       (compile-shader gl fs-src glc/fragment-shader)\n           prog     (.createProgram gl)]\n       (doto gl\n         (.attachShader prog vs)\n         (.attachShader prog fs)\n         (bind-attrib-locations prog attribs)\n         (.linkProgram prog))\n       (if (.getProgramParameter gl prog glc/link-status)\n         (let [attribs  (init-shader-attribs gl prog attribs)\n               uniforms (init-shader-uniforms gl prog uniforms)]\n           (doto gl\n             (.deleteShader vs)\n             (.deleteShader fs))\n           (merge spec\n                  {:program  prog\n                   :uniforms uniforms\n                   :attribs  attribs\n                   :vs       vs-src\n                   :fs       fs-src}))\n         (err/throw! (str \"Shader failed to link:\" (.getProgramInfoLog gl prog)))))))\n\n#?(:cljs\n   (defn make-shader-from-dom\n     [^WebGLRenderingContext gl {:keys [vs fs] :as spec}]\n     (make-shader-from-spec\n      gl (assoc spec\n                :vs (glu/get-script-text vs)\n                :fs (glu/get-script-text fs)))))\n"]}