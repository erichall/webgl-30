{"version":3,"sources":["thi/ng/geom/tetrahedron.cljc"],"mappings":"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","names":["p__29845","vec__29846","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","thi.ng.geom.tetrahedron/orient-tetra","a","b","c","d","t","dp","thi.ng.math.core._.cljs$core$IFn$_invoke$arity$2","thi.ng.math.core.normalize.cljs$core$IFn$_invoke$arity$1","thi.ng.math.core.dot.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.utils.ortho_normal.cljs$core$IFn$_invoke$arity$3","var_args","G__29851","thi.ng.geom.tetrahedron/tetrahedron","js/Error","points","thi.ng.geom.types/Tetrahedron","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.vector/vec3","thi.ng.geom.tetrahedron.tetrahedron.cljs$core$IFn$_invoke$arity$1","cljs.core/PROTOCOL_SENTINEL","_","cljs.core.transduce.cljs$core$IFn$_invoke$arity$3","p1__29853#","cljs.core.map.cljs$core$IFn$_invoke$arity$1","G__29869","thi.ng.math.core/abs*","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.utils/tri-area3","cljs.core/+","thi.ng.geom.core.faces.cljs$core$IFn$_invoke$arity$1","p","thi.ng.geom.utils/bounding-box","thi.ng.geom.core.vertices.cljs$core$IFn$_invoke$arity$1","thi.ng.geom.utils/axis-range","thi.ng.geom.utils.bounding_sphere.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.core/centroid","thi.ng.geom.utils.center.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.vector/V3","cljs.core.get.cljs$core$IFn$_invoke$arity$2","o","thi.ng.geom.utils/centroid","p__29877","map__29878","cljs.core/hash-map","vec__29879","map__29884","vec__29888","p__29934","map__29935","vec__29936","map__29940","vec__29941","p__29917","map__29918","vec__29919","map__29926","vec__29927","p__29901","map__29902","vec__29903","map__29908","vec__29909","v","pred__29913","expr__29914","cljs.core/=","fexpr__29916","cljs.core/set","s","thi.ng.geom.utils.intersect/intersect-tetrahedra?","cljs.core/sequential?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","thi.ng.xerror.core/type-error!","l","thi.ng.xerror.core.unsupported_BANG_.cljs$core$IFn$_invoke$arity$0","p__29897","map__29898","dir","thi.ng.geom.core.as_mesh.cljs$core$IFn$_invoke$arity$2","opts","vec__29894","thi.ng.geom.core/into","or__4185__auto__","thi.ng.geom.basicmesh/basic-mesh","thi.ng.geom.core.point_at.cljs$core$IFn$_invoke$arity$2","thi.ng.math.core.random.cljs$core$IFn$_invoke$arity$0","thi.ng.geom.utils/from-barycentric","thi.ng.math.core.normdist_weights.cljs$core$IFn$_invoke$arity$1","e","classifier","cp","p1__29858#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","theta","thi.ng.geom.core/rotate-z","p1__29860#","thi.ng.geom.core/rotate-x","p1__29861#","thi.ng.geom.core/rotate-y","p1__29862#","axis","p1__29863#","thi.ng.geom.core/rotate-around-axis","p1__29865#","thi.ng.math.core._STAR_.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.utils.scale_size.cljs$core$IFn$_invoke$arity$2","p1__29866#","thi.ng.math.core._PLUS_.cljs$core$IFn$_invoke$arity$2","m","p1__29867#","thi.ng.geom.core/transform-vector","p__29950","map__29952","vec__29953","map__29962","vec__29963","n","G__29969","Math/abs","thi.ng.math.core/THIRD"],"sourcesContent":["(ns thi.ng.geom.tetrahedron\n  #?(:cljs (:require-macros [thi.ng.math.macros :as mm]))\n  (:require\n   [thi.ng.geom.core :as g]\n   [thi.ng.geom.utils :as gu]\n   [thi.ng.geom.utils.intersect :as isec]\n   [thi.ng.geom.vector :as v :refer [vec3]]\n   [thi.ng.geom.triangle :as t]\n   [thi.ng.geom.basicmesh :as bm]\n   #?(:clj [thi.ng.geom.types] :cljs [thi.ng.geom.types :refer [Tetrahedron]])\n   [thi.ng.dstruct.core :as d]\n   [thi.ng.xerror.core :as err]\n   [thi.ng.math.core :as m :refer [PI HALF_PI THIRD SQRT3 *eps*]]\n   #?(:clj [thi.ng.math.macros :as mm]))\n   #?(:clj (:import [thi.ng.geom.types Tetrahedron])))\n\n(defn orient-tetra\n  \"Takes a seq of 4 3D points, returns them as vector in the order so\n  that the last point is on the opposite side of the plane defined by\n  the first three points.\"\n  [[a b c d :as t]]\n  (let [dp (-> d (m/- a) (m/normalize) (m/dot (gu/ortho-normal a b c)))]\n    (if (neg? dp) [a b c d] [a c b d])))\n\n(defn tetrahedron\n  ([points]\n   (Tetrahedron.\n    (orient-tetra (mapv vec3 points))))\n  ([a b c d] (tetrahedron [a b c d])))\n\n(extend-type Tetrahedron\n\n  g/IArea\n  (area\n    [_] (transduce (map #(m/abs* (apply gu/tri-area3 %))) + (g/faces _)))\n\n  ;; TODO use classify-point on all faces to check for containment\n  ;; (must be neg for all)\n\n  g/IClassify\n  (classify-point [_ p] nil) ; TODO\n\n  g/IProximity\n  (closest-point [_ p] nil) ; TODO\n\n  g/IBoundary\n  (contains-point? [_ p] nil) ; TODO\n\n  g/IBounds\n  (bounds [_] (gu/bounding-box (g/vertices _)))\n  (width [_] (gu/axis-range 0 (g/vertices _)))\n  (height [_] (gu/axis-range 1 (g/vertices _)))\n  (depth [_] (gu/axis-range 2 (g/vertices _)))\n\n  g/IBoundingSphere\n  (bounding-sphere\n    [_] (gu/bounding-sphere (g/centroid _) (g/vertices _)))\n\n  g/ICenter\n  (center\n    ([_] (Tetrahedron. (gu/center v/V3 (get _ :points))))\n    ([_ o] (Tetrahedron. (gu/center o (get _ :points)))))\n  (centroid [_] (gu/centroid (get _ :points)))\n\n  g/IFlip\n  (flip\n    [{[a b c d] :points}] (Tetrahedron. [b a c d]))\n\n  g/IVertexAccess\n  (vertices\n    [_] (get _ :points))\n\n  g/IEdgeAccess\n  (edges\n    [{[a b c d] :points}]\n    [[a b] [b c] [c a] [a d] [b d] [c d]])\n\n  g/IFaceAccess\n  (faces\n    ([t _] (g/faces t))\n    ([{[a b c d] :points}]\n     [[[a b c]] [[a d b]] [[b d c]] [[c d a]]]))\n\n  g/IGraph\n  (vertex-neighbors\n    [{[a b c d] :points} v]\n    (condp = v\n      a [c b d]\n      b [a c d]\n      c [b a d]\n      d [a b c]\n      nil))\n  (vertex-valence\n    [_ v] (if ((set (get _ :points)) v) 3 0))\n\n  g/IIntersect\n  (intersect-shape\n    [_ s]\n    (cond\n      (instance? Tetrahedron s)\n      (isec/intersect-tetrahedra?\n       (orient-tetra (g/vertices _)) (orient-tetra (g/vertices s)))\n      (and (sequential? s) (= 4 (count s)))\n      (isec/intersect-tetrahedra? (g/vertices _) (orient-tetra s))\n      :else (err/type-error! \"Tetrahedron\" s)))\n  (intersect-line\n    [_ l] (err/unsupported!))\n  (intersect-ray\n    [_ {p :p dir :dir}] (err/unsupported!))\n\n  g/IMeshConvert\n  (as-mesh\n    ([_] (g/as-mesh _ {}))\n    ([_ opts]\n     (let [[a b c d] (orient-tetra (get _ :points))]\n       (g/into (or (get opts :mesh) (bm/basic-mesh)) (g/faces _)))))\n\n  g/ISample\n  (point-at [_ t] nil) ; TODO\n  (random-point\n    [_] (g/point-at _ (m/random)))\n  (random-point-inside\n    [_] (gu/from-barycentric (g/vertices _) (m/normdist-weights 4)))\n\n  g/ISlice\n  (slice-with\n    ([_ e] nil)\n    ([_ e classifier] nil))\n\n  g/ISubdivide\n  (subdivide\n    [_]\n    (let [cp (gu/centroid (get _ :points))]\n      (map #(tetrahedron (conj % cp)) (g/faces _))))\n\n  g/ITessellate\n  (tessellate\n    [_] (g/faces _))\n\n  g/IRotate\n  (rotate [_ theta] (g/rotate-z _ theta))\n\n  g/IRotate3D\n  (rotate-x\n    [_ theta] (Tetrahedron. (mapv #(g/rotate-x % theta) (get _ :points))))\n  (rotate-y\n    [_ theta] (Tetrahedron. (mapv #(g/rotate-y % theta) (get _ :points))))\n  (rotate-z\n    [_ theta] (Tetrahedron. (mapv #(g/rotate-z % theta) (get _ :points))))\n  (rotate-around-axis\n    [_ axis theta]\n    (Tetrahedron.\n     (mapv #(g/rotate-around-axis % axis theta) (get _ :points))))\n\n  g/IScale\n  (scale\n    [_ s] (Tetrahedron. (mapv #(m/* % s) (get _ :points))))\n  (scale-size\n    [_ s] (Tetrahedron. (gu/scale-size s (get _ :points))))\n\n  g/ITranslate\n  (translate\n    [_ t] (Tetrahedron. (mapv #(m/+ % t) (get _ :points))))\n\n  g/ITransform\n  (transform\n    [_ m] (Tetrahedron. (mapv #(g/transform-vector m %) (get _ :points))))\n\n  ;; http://mathcentral.uregina.ca/QQ/database/QQ.09.03/peter2.html\n\n  g/IVolume\n  (volume\n    [{[a b c d] :points}]\n    (let [n (gu/ortho-normal a b c)]\n      (Math/abs (* (* m/THIRD (gu/tri-area3 a b c)) (- (m/dot n d) (m/dot n a)))))))\n"]}