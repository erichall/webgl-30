{"version":3,"sources":["webgl_30/lessons/fundamentals.cljs"],"mappings":";;;;AAIA,AAAA,AAAA,AAAA,AAAKA;AACL,AAAA,AAAAC,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAW,AAAA,AAACC;;AACrB,AAAM,AAAA,AAAAC,AAAA,AAAOF;AAAb,AACE,AAACG,AAAOH,AAAWL;;AADrB;AAGA,AAAA,AAAKS;AAML,AAAA,AAAKC;AAOL,AAAA,AAAMC,AACHC,AAAUC;AADb,AAEE,AAAA,AAAAN,AAACO,AAAmBT;;AAGtB,AAAA,AAAMU;AAAN,AAEE,AAAI,AAACC,AAAMX,AAAW,AAAAY,AAsBlBc;AAtBkB,AAAA,AAAAb,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAAqBM;AAArB,AAAAF,AAAAJ,AAAA,AAAaK;AAAb,AACE,AACME,AAAQ,AAAA,AAAA,AAAA,AAACC,AAAoBH,AAAQd,AAAoBC;AAD/D,AAAA,AAAA,AAEMiB,AAAyB,AAACC,AAAoBL,AACrB,AAAgBA;AAH/C,AAIM,AAAA,AAACM,AAAML,AAAeC,AACtB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACI,AAE+B,AAASN,AAITI,AAChC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACE,AAA6B,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGA,AAAgBP,AAChB,AAAeA,AACf,AAAaA,AACbI;;;AAM9D,AAAA,AAAA,AAAcK,AACJ;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AADV,AAMU;AAAA,AACE,AAAA,AAAMC;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACGC,AAEwBD,AACA;AAAA,AACE,AACE,AAAA,AAACE,AAAM9B,AAAW+B,AAAU,AAACC,AAAkBJ;;AAC/C,AAAClB;;AACD,AAAA,AAAA,AAACJ","names":["webgl-30.lessons.fundamentals/initial-state","js/webgl-30","js/webgl-30.lessons","js/webgl-30.lessons.fundamentals","js/webgl-30.lessons.fundamentals.state-atom","webgl-30.lessons.fundamentals/state-atom","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/deref","cljs.core/reset!","webgl-30.lessons.fundamentals/fragment-shader","webgl-30.lessons.fundamentals/vertex-shader","webgl-30.lessons.fundamentals/draw!","timestamp","continue-fn","webgl-30.webgl/draw-scene!","webgl-30.lessons.fundamentals/setup!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","p__40344","map__40345","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","gl","state","program","webgl-30.webgl/link-shaders!","position-buffer","webgl-30.webgl/create-buffer","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","js/Float32Array","webgl-30.webgl/set-elements!","webgl-30.lessons.fundamentals/lesson","canvas-id","webgl-30.component/webgl-canvas","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","webgl-30.webgl/get-context"],"sourcesContent":["(ns webgl-30.lessons.fundamentals\n  (:require [webgl-30.webgl :as webgl]\n            [webgl-30.component :refer [webgl-canvas]]))\n\n(def initial-state {:gl nil})\n(defonce state-atom (atom nil))\n(when (nil? @state-atom)\n  (reset! state-atom initial-state))\n\n(def fragment-shader\n  \"precision mediump float;\n   void main() {\n       gl_FragColor = vec4(1, 0, 0.5, 1);\n   }\")\n\n(def vertex-shader\n  \"// an attribute will receive data from a buffer\n  attribute vec4 a_position;\n  void main() {\n       gl_Position = a_position;\n  }\")\n\n(defn draw!\n  [timestamp continue-fn]\n  (webgl/draw-scene! @state-atom)\n  )\n\n(defn setup!\n  []\n  (-> (swap! state-atom (fn [{:keys [gl] :as state}]\n                          (let [\n                                program (webgl/link-shaders! gl {:fs fragment-shader :vs vertex-shader})\n                                position-buffer {:buffer (webgl/create-buffer gl)\n                                                 :target (.-ARRAY-BUFFER gl)}]\n                            (-> (assoc state :program program)\n                                (assoc :attributes [{:name      \"a_position\"\n                                                     :size      2\n                                                     :type      (.-FLOAT gl)\n                                                     :normalize false\n                                                     :stride    0\n                                                     :offset    0\n                                                     :buffer    position-buffer}])\n                                (assoc :elements [{:src-data  (js/Float32Array. [0 0\n                                                                                 0 0.5\n                                                                                 0.7 0])\n                                                   :target    (.-ARRAY_BUFFER gl)\n                                                   :usage     (.-STATIC_DRAW gl)\n                                                   :draw-type (.-TRIANGLES gl)\n                                                   :buffer    position-buffer\n                                                   :offset    0\n                                                   :count     3}])))))\n      webgl/set-elements!))\n\n\n(def ^:export lesson\n  {:title (fn []\n            [:div\n             [:h1 {:style {:font-family \"monospace\"}}\n              \"Lesson - WebGL Fundamentals\"]\n             [:h4 \"A simple triangle\"]])\n   :start (fn []\n            (let [canvas-id \"fundamentals\"]\n              [webgl-canvas {:height   400\n                             :width    400\n                             :id       canvas-id\n                             :on-mount (fn []\n                                         (do\n                                           (swap! state-atom assoc :gl (webgl/get-context canvas-id))\n                                           (setup!)\n                                           (draw! 0 nil)))}]))})\n"]}