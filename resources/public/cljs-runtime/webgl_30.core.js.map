{"version":3,"sources":["webgl_30/core.cljs"],"mappings":";;AAEA,AAAA,AAAMA,AACHC;AADH,AAEE,AAACC,AAAK,AAACC,AAAMC,AAAI,AAAA,AAACC,AAAY,AAAKJ;;AAErC,AAAA,AAAA,AAAAK,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AACHM,AAAIC;AADP,AAEE,AAAA,AAACC,AAAMC,AAA0BH,AAAEC;;;AAFrC,AAAA,AAAA,AAAMP;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAI,AAAA;AAAA,AAAA,AAAAA,AAAAH,AAAAD;;;AAAA,AAIA;;;AAAA,AAAMS,AAEHC;AAFH,AAGM,AAACvB,AAAkBuB,AACnB,AAAA,AAAA,AAACC;;AAEP;;;AAAA,AAAMC,AAEHC;AAFH,AAGE,AAAA,AAAI,AAACC,AAAKD;;AAGZ;;;AAAA,AAAME,AAEHC,AAAEC;AAFL,AAGE,AAACC,AAAMF,AAAE,AAAA,AAAK,AAACG,AAAMH,AAAIC","names":["webgl-30.core/current-namespace","s","cljs.core/name","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/str","cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","webgl-30.core/format","seq360213","G__360214","cljs.core/first","cljs.core/next","self__4776__auto__","f","xs","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","cljs.pprint/cl-format","webgl-30.core/ns-str","ns-const","clojure.string/replace-all","webgl-30.core/get-filename","ns-symbol","cljs.core/meta","webgl-30.core/set-last","v","a","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/count"],"sourcesContent":["(ns webgl-30.core)\n\n(defn current-namespace\n  [s]\n  (name (apply str (drop-last 2 (str s)))))\n\n(defn format\n  [f & xs]\n  (apply cljs.pprint/cl-format nil f xs))\n\n(defn ns-str\n  \"Get current ns without only chars in.\"\n  [ns-const]\n  (-> (current-namespace ns-const)\n      (clojure.string/replace-all #\"[\\W_]+\" \"\")))\n\n(defn get-filename\n  \"ns-symbol is in the form #'::x\"\n  [ns-symbol]\n  (-> (meta ns-symbol)\n      :file))\n\n(defn set-last\n  \"Replace last item in a vector, throws if it's empty........!\"\n  [v a]\n  (assoc v (dec (count v)) a))\n\n"]}