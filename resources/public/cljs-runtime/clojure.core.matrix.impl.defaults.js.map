{"version":3,"sources":["clojure/core/matrix/impl/defaults.cljc"],"mappings":"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","names":["clojure.core.matrix.impl.defaults/*trying-current-implementation*","clojure.core.matrix.impl.defaults/calc-element-count","m","temp__5733__auto__","sh","clojure.core.matrix.protocols/get-shape","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/*","clojure.core.matrix.impl.defaults/construct-mutable-matrix","dims","cljs.core/long","clojure.core.matrix.protocols/dimensionality","type","clojure.core.matrix.protocols/element-type","double?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","js/Number","clojure.core.matrix.impl.wrappers/wrap-scalar","clojure.core.matrix.protocols/get-0d","clojure.core.matrix.protocols/coerce-param","clojure.core.matrix.implementations.get_canonical_object.cljs$core$IFn$_invoke$arity$1","goog.object/set","clojure.core.matrix.protocols/PImplementation","G__37316","clojure.core.matrix.protocols/implementation-key","G__37317","G__37318","G__37319","clojure.core.matrix.protocols/meta-info","G__37320","G__37321","G__37322","clojure.core.matrix.protocols/construct-matrix","G__37323","G__37324","G__37325","clojure.core.matrix.protocols/new-vector","G__37326","G__37327","G__37328","clojure.core.matrix.protocols/new-matrix","G__37329","G__37330","G__37331","clojure.core.matrix.protocols/new-matrix-nd","G__37332","G__37333","G__37334","clojure.core.matrix.protocols/supports-dimensionality?","G__37335","G__37336","cljs.core/PROTOCOL_SENTINEL","data","length","rows","columns","shape","dimensions","cljs.core/Keyword","clojure.core.matrix.implementations/get-canonical-object-or-throw","clojure.core.matrix.protocols/PSparse","G__37337","clojure.core.matrix.protocols/sparse-coerce","G__37338","G__37339","G__37340","clojure.core.matrix.protocols/sparse","G__37341","G__37342","G__37343","G__37344","G__37345","G__37346","G__37347","G__37348","clojure.core.matrix.protocols/PNative","G__37349","clojure.core.matrix.protocols/native","G__37350","G__37351","G__37352","clojure.core.matrix.protocols/native?","G__37353","G__37354","G__37355","G__37356","G__37357","G__37358","G__37359","G__37360","clojure.core.matrix.protocols/PNewSparseArray","G__37361","clojure.core.matrix.protocols/new-sparse-array","G__37362","G__37363","clojure.core.matrix.protocols/PDense","G__37364","clojure.core.matrix.protocols/dense-coerce","G__37365","G__37366","G__37367","clojure.core.matrix.protocols/dense","G__37368","G__37369","G__37370","G__37371","G__37372","G__37373","G__37374","G__37375","clojure.core.matrix.protocols/PIndexedAccess","G__37376","clojure.core.matrix.protocols/get-1d","G__37377","G__37378","G__37379","clojure.core.matrix.protocols/get-2d","G__37380","G__37381","G__37382","clojure.core.matrix.protocols/get-nd","G__37383","G__37384","G__37385","G__37386","G__37387","G__37388","G__37389","G__37390","G__37391","G__37392","G__37393","G__37394","G__37395","G__37396","G__37397","G__37398","G__37399","G__37400","G__37401","G__37402","x","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","y","indexes","s","cljs.core/seq","js/Array","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","cljs.core/first","cljs.core/next","cljs.core/type","cljs.core/LazySeq","cljs.core/seqable?","cljs.core/Range","clojure.core.matrix.protocols/PArrayMetrics","G__37403","clojure.core.matrix.protocols/nonzero-count","G__37404","G__37405","G__37406","G__37407","G__37408","G__37409","G__37410","G__37411","clojure.core.matrix.protocols.element_reduce.cljs$core$IFn$_invoke$arity$3","cnt","e","clojure.core.matrix.protocols/PZeroDimensionConstruction","G__37412","clojure.core.matrix.protocols/new-scalar-array","G__37413","G__37414","G__37415","G__37416","G__37417","value","clojure.core.matrix.protocols/PZeroDimensionAccess","G__37418","G__37419","G__37420","G__37421","clojure.core.matrix.protocols/set-0d!","G__37422","G__37423","G__37424","G__37425","G__37426","G__37427","G__37428","G__37429","G__37430","G__37431","G__37432","G__37433","G__37434","G__37435","G__37436","G__37437","G__37438","G__37439","G__37440","G__37441","clojure.core.matrix.protocols/set-nd!","clojure.core.matrix.protocols/PZeroDimensionSet","G__37442","clojure.core.matrix.protocols/set-0d","G__37443","G__37444","G__37445","G__37446","G__37447","clojure.core.matrix.protocols/PIndexedSetting","G__37448","clojure.core.matrix.protocols/set-1d","G__37449","G__37450","G__37451","clojure.core.matrix.protocols/set-2d","G__37452","G__37453","G__37454","clojure.core.matrix.protocols/set-nd","G__37455","G__37456","G__37457","clojure.core.matrix.protocols/is-mutable?","G__37458","G__37459","G__37460","G__37461","G__37462","G__37463","G__37464","G__37465","G__37466","G__37467","G__37468","G__37469","G__37470","G__37471","G__37472","G__37473","G__37474","G__37475","G__37476","G__37477","G__37478","G__37479","G__37480","G__37481","G__37482","G__37483","row","v","column","cljs.core/count","clojure.core.matrix.protocols/clone","clojure.core.matrix.protocols/set-1d!","clojure.core.matrix.protocols/set-2d!","clojure.core.matrix.protocols/PNumerical","G__37484","clojure.core.matrix.protocols/numerical?","G__37485","G__37486","G__37487","G__37488","G__37489","G__37490","G__37491","G__37492","clojure.core.matrix.protocols/is-scalar?","cljs.core/every?","cljs.core/number?","clojure.core.matrix.protocols/element-seq","clojure.core.matrix.protocols/PVectorOps","G__37493","clojure.core.matrix.protocols/vector-dot","G__37494","G__37495","G__37496","clojure.core.matrix.protocols/length","G__37497","G__37498","G__37500","clojure.core.matrix.protocols/length-squared","G__37501","G__37502","G__37503","clojure.core.matrix.protocols/normalise","G__37504","G__37505","G__37506","G__37507","G__37508","G__37509","G__37510","G__37511","G__37513","G__37514","G__37515","G__37516","G__37517","G__37518","a","b","clojure.core.matrix.protocols/pre-scale","G__37499","Math/abs","clojure.core.matrix.protocols/element-sum","clojure.core.matrix.protocols/element-multiply","G__37512","Math/sqrt","r","clojure.core.matrix.protocols/scale","G__37519","clojure.core.matrix.protocols/PVectorDistance","G__37520","clojure.core.matrix.protocols/distance","G__37521","G__37522","G__37524","G__37525","G__37526","G__37523","clojure.core.matrix.protocols/matrix-sub","clojure.core.matrix.protocols/PVectorCross","G__37527","clojure.core.matrix.protocols/cross-product","G__37528","G__37529","G__37530","clojure.core.matrix.protocols/cross-product!","G__37531","G__37532","x1","y1","z1","x2","y2","z2","clojure.core.matrix.protocols/PMutableVectorOps","G__37533","clojure.core.matrix.protocols/normalise!","G__37534","G__37535","clojure.core.matrix.protocols/scale!","G__37536","clojure.core.matrix.protocols/PAssignment","G__37537","clojure.core.matrix.protocols/assign!","G__37538","G__37539","G__37544","clojure.core.matrix.protocols/assign-array!","G__37545","G__37546","cljs.core/ISeq","msize","clojure.core.matrix.protocols/dimension-count","i","xdims","n__4666__auto__","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/not","xss","clojure.core.matrix.protocols/get-major-slice-seq","_","or__4185__auto__","clojure.core.matrix.protocols/same-shapes?","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","cljs.core.map.cljs$core$IFn$_invoke$arity$3","clojure.core.matrix.protocols/get-major-slice-view-seq","seq__37540","chunk__37541","count__37542","i__37543","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","ms","arr","alen","clojure.core.matrix.protocols/is-vector?","clojure.core.matrix.protocols.assign_array_BANG_.cljs$core$IFn$_invoke$arity$4","start","ss","skip","vals__25943__auto__","clojure.core.matrix.protocols/PImmutableAssignment","G__37547","clojure.core.matrix.protocols/assign","G__37548","G__37549","G__37550","G__37551","G__37552","G__37553","G__37554","G__37555","source","clojure.core.matrix.protocols/broadcast-coerce","clojure.core.matrix.protocols/PMutableFill","G__37556","clojure.core.matrix.protocols/fill!","G__37557","G__37558","clojure.core.matrix.protocols/PMatrixCloning","G__37559","G__37560","G__37561","G__37562","G__37563","G__37564","G__37565","G__37566","G__37567","clojure.core.matrix.protocols/PSparseArray","G__37568","clojure.core.matrix.protocols/is-sparse?","G__37569","G__37570","clojure.core.matrix.protocols/PImmutableMatrixConstruction","G__37571","clojure.core.matrix.protocols/immutable-matrix","G__37572","G__37573","G__37574","G__37575","G__37576","clojure.core.matrix.protocols/convert-to-nested-vectors","clojure.core.matrix.protocols/PZeroCount","G__37577","clojure.core.matrix.protocols/zero-count","G__37578","G__37579","G__37580","G__37581","G__37582","G__37583","G__37584","G__37585","acc","clojure.core.matrix.protocols/PMutableMatrixConstruction","G__37586","clojure.core.matrix.protocols/mutable-matrix","G__37587","G__37588","G__37589","G__37590","G__37591","G__37592","G__37593","G__37594","clojure.core.matrix.protocols/PMutableCoercion","G__37595","clojure.core.matrix.protocols/ensure-mutable","G__37596","G__37597","G__37598","G__37599","G__37600","G__37601","G__37602","G__37603","clojure.core.matrix.protocols/PComputeMatrix","G__37604","clojure.core.matrix.protocols/compute-matrix","G__37605","G__37606","f","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ix","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","clojure.core.matrix.utils/base-index-seq-for-shape","clojure.core.matrix.protocols/PDimensionInfo","G__37607","G__37608","G__37609","G__37610","G__37611","G__37612","G__37613","G__37614","G__37615","G__37616","G__37617","G__37618","G__37619","G__37620","G__37621","G__37622","G__37623","G__37624","G__37625","G__37626","G__37627","G__37628","G__37629","G__37630","G__37631","G__37632","G__37633","G__37634","G__37635","G__37636","G__37637","G__37638","G__37639","G__37640","G__37641","G__37642","G__37643","G__37644","G__37645","G__37646","G__37647","G__37648","G__37649","G__37650","G__37651","G__37652","G__37653","G__37654","G__37655","G__37656","G__37657","G__37658","G__37659","G__37660","G__37661","G__37662","G__37663","G__37664","G__37665","G__37666","n","cljs.core/cons","cljs.core/List","cljs.core/IndexedSeq","cljs.core/Cons","clojure.core.matrix.protocols/PSameShape","G__37667","clojure.core.matrix.protocols/same-shape?","G__37668","G__37669","G__37670","G__37671","G__37672","G__37673","G__37674","G__37675","G__37676","G__37677","G__37678","clojure.core.matrix.utils/same-shape-object?","clojure.core.matrix.protocols/PMatrixOps","G__37679","clojure.core.matrix.protocols/trace","G__37680","G__37681","G__37682","G__37683","G__37684","G__37685","clojure.core.matrix.protocols/inverse","G__37686","G__37687","G__37688","G__37689","G__37690","G__37691","clojure.core.matrix.protocols/determinant","G__37692","G__37693","G__37694","G__37695","G__37696","rc","cc","Math/min","res","imp","mm","clojure.core.matrix.protocols/PTranspose","G__37697","clojure.core.matrix.protocols/transpose","G__37698","G__37699","G__37700","G__37701","G__37702","G__37703","G__37704","G__37705","G__37706","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/mapv","cljs.core/vector","clojure.core.matrix.protocols/transpose-dims","cljs.core/reverse","cljs.core.range.cljs$core$IFn$_invoke$arity$1","clojure.core.matrix.protocols/PTransposeDims","G__37707","G__37708","G__37709","G__37710","G__37711","G__37712","G__37713","G__37714","G__37715","ordering","clojure.core.matrix.protocols/PTransposeInPlace","G__37716","clojure.core.matrix.protocols/transpose!","G__37717","G__37718","j","t","clojure.core.matrix.protocols/PRotate","G__37719","clojure.core.matrix.protocols/rotate","G__37720","G__37721","G__37722","G__37723","G__37724","G__37725","G__37726","G__37727","dim","places","c","cljs.core/mod","cljs.core/vec","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/take-last","cljs.core.take.cljs$core$IFn$_invoke$arity$2","clojure.core.matrix.protocols/PRotateAll","G__37728","clojure.core.matrix.protocols/rotate-all","G__37729","G__37730","G__37731","G__37732","G__37733","G__37734","G__37735","G__37736","shifts","p__37737","vec__37738","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","shift","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","clojure.core.matrix.protocols/PShift","G__37741","clojure.core.matrix.protocols/shift","G__37742","G__37743","G__37744","clojure.core.matrix.protocols/shift-all","G__37745","G__37746","z","clojure.core.matrix.protocols/generic-zero","clojure.core.matrix.protocols/join-along","clojure.core.matrix.protocols/broadcast","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","clojure.core.matrix.protocols/submatrix","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","p__37747","vec__37748","clojure.core.matrix.protocols/POrder","G__37754","clojure.core.matrix.protocols/order","G__37755","G__37756","G__37757","G__37758","G__37759","G__37760","G__37761","G__37762","indices","mshape","subshape","p1__37751#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","clojure.core.matrix.protocols/get-major-slice","p1__37752#","p2__37753#","clojure.core.matrix.protocols/join","clojure.core.matrix.protocols.order.cljs$core$IFn$_invoke$arity$3","clojure.core.matrix.impl.defaults/output-rank","pairs","dest","cljs.core.object_array.cljs$core$IFn$_invoke$arity$1","Long/valueOf","clojure.core.matrix.protocols/PIndexRank","G__37764","clojure.core.matrix.protocols/index-rank","G__37765","G__37766","G__37767","clojure.core.matrix.protocols/element-count","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","cljs.core/second","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","comp","G__37768","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3","p1__37763#","clojure.core.matrix.protocols.index_rank.cljs$core$IFn$_invoke$arity$2","clojure.core.matrix.protocols/PMatrixProducts","G__37770","clojure.core.matrix.protocols/inner-product","G__37771","G__37772","G__37773","clojure.core.matrix.protocols/outer-product","G__37774","G__37775","G__37776","G__37777","G__37778","G__37779","G__37780","G__37781","clojure.core.matrix.protocols/matrix-add","sl","clojure.core.matrix.implementations.get_canonical_object.cljs$core$IFn$_invoke$arity$0","p1__37769#","clojure.core.matrix.protocols.element_map.cljs$core$IFn$_invoke$arity$2","clojure.core.matrix.protocols/PMatrixMultiply","G__37782","G__37783","G__37784","G__37785","clojure.core.matrix.protocols/matrix-multiply","G__37786","G__37787","G__37788","G__37789","G__37790","G__37803","G__37804","G__37805","mdims","adims","vec__37791","arows","acols","clojure.core.matrix.protocols/reshape","vec__37794","mrows","mcols","acount","vec__37797","vec__37800","mutable","new-m-type","new-m","k","vec__37806","clojure.core.matrix.protocols/broadcast-compatible","clojure.core.matrix.protocols.element_map.cljs$core$IFn$_invoke$arity$3","clojure.core.matrix.protocols/PMatrixMultiplyMutable","G__37809","clojure.core.matrix.protocols/element-multiply!","G__37810","G__37811","G__37812","clojure.core.matrix.protocols/matrix-multiply!","G__37813","G__37814","G__37815","G__37816","G__37817","G__37818","G__37819","G__37820","clojure.core.matrix.protocols/PMatrixDivide","G__37821","clojure.core.matrix.protocols/element-divide","G__37822","G__37823","G__37824","G__37825","G__37826","clojure.core.matrix.protocols.element_divide.cljs$core$IFn$_invoke$arity$1","clojure.core.matrix.protocols/PMatrixDivideMutable","G__37827","clojure.core.matrix.protocols/element-divide!","G__37828","G__37829","G__37830","G__37831","G__37832","cljs.core//","clojure.core.matrix.protocols.element_map_BANG_.cljs$core$IFn$_invoke$arity$2","vec__37833","clojure.core.matrix.protocols.element_map_BANG_.cljs$core$IFn$_invoke$arity$3","clojure.core.matrix.protocols/PSummable","G__37836","G__37837","G__37838","G__37839","G__37840","G__37841","clojure.core.matrix.protocols.element_reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/+","clojure.core.matrix.protocols/PElementMinMax","G__37843","clojure.core.matrix.protocols/element-min","G__37844","G__37845","G__37846","clojure.core.matrix.protocols/element-max","G__37847","G__37848","G__37849","clojure.core.matrix.protocols/element-clamp","G__37850","G__37851","G__37852","G__37853","G__37854","G__37855","G__37856","G__37857","G__37858","G__37859","G__37860","best","p1__37842#","clojure.core.matrix.protocols/PCompare","G__37888","clojure.core.matrix.protocols/element-compare","G__37889","G__37890","G__37891","clojure.core.matrix.protocols/element-if","G__37892","G__37893","G__37897","clojure.core.matrix.protocols/element-lt","G__37898","G__37899","G__37900","clojure.core.matrix.protocols/element-le","G__37901","G__37902","G__37903","clojure.core.matrix.protocols/element-gt","G__37904","G__37905","G__37906","clojure.core.matrix.protocols/element-ge","G__37907","G__37908","G__37909","clojure.core.matrix.protocols/element-ne","G__37910","G__37911","G__37912","clojure.core.matrix.protocols/element-eq","G__37913","G__37914","G__37915","G__37916","G__37917","G__37918","G__37919","G__37920","G__37921","G__37922","G__37923","G__37924","G__37925","G__37926","G__37927","G__37928","G__37929","G__37930","G__37931","G__37932","G__37933","G__37934","G__37935","G__37936","G__37937","G__37938","clojure.core.matrix.impl.mathsops/signum","clojure.core.matrix.protocols/signum","vec__37894","clojure.core.matrix.protocols/broadcast-same-shape","p1__37861#","p1__37862#","p1__37863#","p2__37864#","p1__37865#","p2__37866#","p1__37867#","p2__37868#","p3__37869#","clojure.core.matrix.protocols.element_map.cljs$core$IFn$_invoke$arity$4","p1__37870#","p1__37871#","p2__37872#","p1__37873#","p1__37874#","p2__37875#","p1__37876#","p1__37877#","p2__37878#","p1__37879#","p1__37880#","p2__37881#","p1__37882#","p1__37883#","p2__37884#","p1__37885#","p1__37886#","p2__37887#","clojure.core.matrix.protocols/PAddProduct","G__37939","clojure.core.matrix.protocols/add-product","G__37940","G__37941","G__37942","G__37943","G__37944","clojure.core.matrix.protocols/PAddProductMutable","G__37945","clojure.core.matrix.protocols/add-product!","G__37946","G__37947","G__37948","G__37949","G__37950","clojure.core.matrix.protocols/matrix-add!","clojure.core.matrix.protocols/PAddScaled","G__37951","clojure.core.matrix.protocols/add-scaled","G__37952","G__37953","G__37954","G__37955","G__37956","factor","clojure.core.matrix.protocols/PAddScaledMutable","G__37957","clojure.core.matrix.protocols/add-scaled!","G__37958","G__37959","G__37960","G__37961","G__37962","clojure.core.matrix.protocols/PAddScaledProduct","G__37963","clojure.core.matrix.protocols/add-scaled-product","G__37964","G__37965","G__37966","G__37967","G__37968","clojure.core.matrix.protocols/PAddScaledProductMutable","G__37969","clojure.core.matrix.protocols/add-scaled-product!","G__37970","G__37971","G__37972","G__37973","G__37974","clojure.core.matrix.protocols/PScaleAdd","G__37975","clojure.core.matrix.protocols/scale-add!","G__37976","G__37977","m1","m2","constant","clojure.core.matrix.protocols/PScaleAdd2","G__37978","clojure.core.matrix.protocols/scale-add","G__37979","G__37980","clojure.core.matrix.protocols/PLerp","G__37981","clojure.core.matrix.protocols/lerp","G__37982","G__37983","G__37984","clojure.core.matrix.protocols/lerp!","G__37985","G__37986","clojure.core.matrix.protocols/PAddInnerProductMutable","G__37987","clojure.core.matrix.protocols/add-inner-product!","G__37988","G__37989","clojure.core.matrix.protocols/PAddOuterProductMutable","G__37990","clojure.core.matrix.protocols/add-outer-product!","G__37991","G__37992","clojure.core.matrix.protocols/PSetInnerProductMutable","G__37993","clojure.core.matrix.protocols/set-inner-product!","G__37994","G__37995","clojure.core.matrix.protocols/PTypeInfo","G__37996","G__37997","G__37998","G__37999","G__38000","G__38001","js/Object","clojure.core.matrix.protocols/PGenericValues","G__38002","G__38003","G__38004","G__38005","clojure.core.matrix.protocols/generic-one","G__38006","G__38007","G__38008","clojure.core.matrix.protocols/generic-value","G__38009","G__38010","clojure.core.matrix.protocols/PVectorTransform","G__38011","clojure.core.matrix.protocols/vector-transform","G__38012","G__38013","G__38014","clojure.core.matrix.protocols/vector-transform!","G__38015","G__38016","cljs.core/IFn","cljs.core/vector?","clojure.core.matrix.protocols/PMatrixScaling","G__38018","G__38019","G__38020","G__38021","G__38022","G__38023","G__38024","G__38025","G__38026","G__38027","G__38028","G__38029","p1__38017#","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","clojure.core.matrix.protocols/PMatrixMutableScaling","G__38031","G__38032","G__38033","G__38034","clojure.core.matrix.protocols/pre-scale!","G__38035","G__38036","G__38037","G__38038","G__38039","G__38040","G__38041","G__38042","p1__38030#","clojure.core.matrix.protocols/PMatrixAdd","G__38043","G__38044","G__38045","G__38046","G__38047","G__38048","G__38049","G__38050","G__38051","G__38055","G__38056","G__38057","clojure.core.matrix.protocols/negate","vec__38052","vec__38058","cljs.core/-","clojure.core.matrix.protocols/PMatrixAddMutable","G__38061","G__38062","G__38063","G__38064","clojure.core.matrix.protocols/matrix-sub!","G__38065","G__38066","G__38067","G__38068","G__38069","G__38070","G__38071","G__38072","clojure.core.matrix.protocols/PNegation","G__38073","G__38074","G__38075","G__38076","G__38077","G__38078","G__38079","G__38080","G__38081","clojure.core.matrix.protocols/PMatrixEquality","G__38082","clojure.core.matrix.protocols/matrix-equals","G__38083","G__38084","G__38085","G__38086","G__38087","G__38088","G__38089","G__38090","x__25978__auto__","cljs.core/not-any?","cljs.core/false?","cljs.core/==","clojure.core.matrix.protocols/PValueEquality","G__38091","clojure.core.matrix.protocols/value-equals","G__38092","G__38093","G__38094","G__38095","G__38096","G__38097","G__38098","G__38099","and__4174__auto__","cljs.core/true?","cljs.core/=","clojure.core.matrix.protocols/PMatrixEqualityEpsilon","G__38101","clojure.core.matrix.protocols/matrix-equals-epsilon","G__38102","G__38103","G__38104","G__38105","G__38106","G__38107","G__38108","G__38109","eps","js/Math.abs","p1__38100#","G__38110","clojure.core.matrix.protocols/PDoubleArrayOutput","G__38111","clojure.core.matrix.protocols/to-double-array","G__38112","G__38113","G__38114","clojure.core.matrix.protocols/as-double-array","G__38115","G__38116","G__38117","G__38118","G__38119","G__38120","G__38121","G__38122","cljs.core.double_array.cljs$core$IFn$_invoke$arity$1","clojure.core.matrix.protocols/PObjectArrayOutput","G__38123","clojure.core.matrix.protocols/to-object-array","G__38124","G__38125","G__38126","clojure.core.matrix.protocols/as-object-array","G__38127","G__38128","G__38129","G__38130","G__38131","G__38132","G__38133","G__38134","G__38135","G__38136","G__38137","G__38138","G__38139","G__38140","clojure.core.matrix.protocols/PRowOperations","G__38141","clojure.core.matrix.protocols/swap-rows","G__38142","G__38143","G__38144","clojure.core.matrix.protocols/multiply-row","G__38145","G__38146","G__38147","clojure.core.matrix.protocols/add-row","G__38148","G__38149","clojure.core.matrix.protocols/PRowSetting","G__38150","clojure.core.matrix.protocols/set-row","G__38151","G__38152","G__38153","clojure.core.matrix.protocols/set-row!","G__38154","G__38155","svec","clojure.core.matrix.protocols/broadcast-like","clojure.core.matrix.protocols/get-major-slice-view","clojure.core.matrix.protocols/PColumnSetting","G__38156","clojure.core.matrix.protocols/set-column","G__38157","G__38158","G__38159","clojure.core.matrix.protocols/set-column!","G__38160","G__38161","scol","clojure.core.matrix.protocols/get-column","idx","clojure.core.matrix.protocols/PSliceMap","G__38162","clojure.core.matrix.protocols/slice-map","G__38163","G__38164","clojure.core.matrix.impl.common/construct-matrix","cljs.core.mapv.cljs$core$IFn$_invoke$arity$3","more","cljs.core.apply.cljs$core$IFn$_invoke$arity$5","clojure.core.matrix.protocols/PFilterSlices","G__38165","clojure.core.matrix.protocols/filter-slices","G__38166","G__38167","slcs","cljs.core/filterv","clojure.core.matrix.protocols/PAddEmap","G__38168","clojure.core.matrix.protocols/add-emap!","G__38169","G__38170","clojure.core.matrix.protocols/PSetEmap","G__38171","clojure.core.matrix.protocols/set-emap!","G__38172","G__38173","clojure.core.matrix.protocols/PFunctionalOperations","G__38181","G__38182","G__38183","G__38184","clojure.core.matrix.protocols/element-map","G__38185","G__38186","G__38187","clojure.core.matrix.protocols/element-map!","G__38188","G__38189","G__38190","clojure.core.matrix.protocols/element-reduce","G__38191","G__38192","G__38193","G__38194","G__38195","G__38196","G__38197","G__38198","G__38202","G__38203","G__38204","G__38205","G__38206","G__38207","G__38208","G__38209","G__38210","G__38211","G__38212","G__38213","G__38214","G__38215","G__38216","G__38217","G__38218","G__38219","cljs.core/PersistentVector","p1__38174#","moremore","p1__38175#","p2__38176#","rest__38177#","p1__38178#","p2__38179#","init","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/seq?","clojure.core.matrix.impl.common.mapmatrix.cljs$core$IFn$_invoke$arity$2","vec__38199","clojure.core.matrix.impl.common.mapmatrix.cljs$core$IFn$_invoke$arity$3","arrays","shapes","clojure.core.matrix.protocols/common-shape","p1__38180#","clojure.core.matrix.impl.common/mapmatrix","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","clojure.core.matrix.impl.defaults/cart","colls","cljs.core/empty?","iter__4582__auto__","s__38221","xs__6292__auto__","iterys__4578__auto__","s__38223","c__4580__auto__","size__4581__auto__","b__38225","cljs.core/chunk-buffer","i__38224","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__38222","cljs.core/rest","fs__4579__auto__","iter__38220","G__38226","clojure.core.matrix.impl.defaults/indices-seq","cljs.core/range","clojure.core.matrix.protocols/PMapIndexed","G__38235","clojure.core.matrix.protocols/element-map-indexed","G__38236","G__38237","G__38247","clojure.core.matrix.protocols/element-map-indexed!","G__38248","G__38249","G__38250","G__38251","G__38252","G__38258","G__38259","G__38260","G__38261","G__38262","G__38263","G__38269","G__38270","G__38271","G__38238","G__38239","p1__38227#","G__38240","G__38241","G__38242","p1__38228#","p2__38229#","rest__38230#","cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic","p1__38231#","p2__38232#","G__38243","G__38244","G__38245","G__38246","G__38253","G__38254","p1__38233#","p2__38234#","clojure.core.matrix.protocols.element_map_indexed.cljs$core$IFn$_invoke$arity$2","vec__38255","cljs.core.map.cljs$core$IFn$_invoke$arity$4","cljs.core/map","cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4","clojure.core.matrix.protocols.element_map_indexed.cljs$core$IFn$_invoke$arity$3","clojure.core.matrix.protocols.element_map_indexed.cljs$core$IFn$_invoke$arity$4","G__38264","G__38265","G__38266","G__38267","G__38268","clojure.core.matrix.protocols/PElementCount","G__38272","G__38273","G__38274","G__38275","G__38276","G__38277","G__38278","G__38279","G__38280","clojure.core.matrix.protocols/PValidateShape","G__38282","clojure.core.matrix.protocols/validate-shape","G__38283","G__38284","G__38285","G__38286","G__38287","clojure.core.matrix.protocols.validate_shape.cljs$core$IFn$_invoke$arity$2","expected-shape","efirst","enext","p1__38281#","clojure.core.matrix.protocols/PMatrixSlices","G__38288","clojure.core.matrix.protocols/get-row","G__38289","G__38290","G__38291","G__38292","G__38293","G__38294","G__38295","G__38296","G__38297","clojure.core.matrix.protocols/get-slice","G__38298","G__38299","clojure.core.matrix.impl.wrappers/wrap-slice","dimension","ldimension","clojure.core.matrix.protocols/PBLASBase","G__38300","clojure.core.matrix.protocols/gemm!","G__38301","G__38302","G__38303","clojure.core.matrix.protocols/gemv!","G__38304","G__38305","trans-a?","trans-b?","alpha","beta","clojure.core.matrix.protocols.add_inner_product_BANG_.cljs$core$IFn$_invoke$arity$4","clojure.core.matrix.protocols/PMatrixColumns","G__38306","clojure.core.matrix.protocols/get-columns","G__38307","G__38308","G__38309","clojure.core.matrix.protocols/get-slice-seq","clojure.core.matrix.protocols/PMatrixRows","G__38310","clojure.core.matrix.protocols/get-rows","G__38311","G__38312","G__38313","clojure.core.matrix.protocols/PSliceView","G__38314","G__38315","G__38316","clojure.core.matrix.protocols/PSliceView2","G__38317","clojure.core.matrix.protocols/get-slice-view","G__38318","G__38319","clojure.core.matrix.impl.wrappers/wrap-nd","clojure.core.matrix.protocols/PSliceSeq","G__38321","G__38322","G__38323","s__38325","b__38327","i__38326","iter__38324","p1__38320#","clojure.core.matrix.protocols/PSliceSeq2","G__38329","G__38330","G__38331","p1__38328#","clojure.core.matrix.protocols/PSliceViewSeq","G__38332","G__38333","G__38334","s__38336","b__38338","i__38337","iter__38335","clojure.core.matrix.protocols/PSliceJoin","G__38339","G__38340","G__38341","G__38342","G__38343","G__38344","G__38345","G__38346","G__38347","clojure.core.matrix.protocols/PSliceJoinAlong","G__38350","G__38351","G__38352","G__38353","G__38354","G__38355","G__38356","G__38357","G__38358","ddim","p1__38348#","p2__38349#","clojure.core.matrix.protocols/PSubVector","G__38359","clojure.core.matrix.protocols/subvector","G__38360","G__38361","G__38362","G__38363","G__38364","G__38365","G__38366","G__38367","clojure.core.matrix.protocols/PSubMatrix","G__38368","G__38369","G__38370","G__38371","G__38372","G__38373","G__38374","G__38375","G__38376","index-ranges","clojure.core.matrix.impl.wrappers/wrap-submatrix","clojure.core.matrix.protocols/PBroadcast","G__38377","G__38378","G__38379","G__38380","G__38381","G__38382","G__38383","G__38384","G__38385","new-shape","clojure.core.matrix.impl.wrappers/wrap-broadcast","nshape","ndims","clojure.core.matrix.protocols/PBroadcastLike","G__38386","G__38387","G__38388","G__38389","G__38390","G__38391","sm","sa","clojure.core.matrix.protocols/PBroadcastCoerce","G__38392","G__38393","G__38394","G__38395","G__38396","G__38397","clojure.core.matrix.protocols/PPack","G__38398","clojure.core.matrix.protocols/pack","G__38399","G__38400","G__38401","G__38402","G__38403","clojure.core.matrix.protocols/PConversion","G__38404","G__38405","G__38406","G__38407","G__38408","G__38409","G__38410","G__38411","G__38412","cljs.core/sequential?","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","clojure.core.matrix.protocols/PRowColMatrix","G__38413","clojure.core.matrix.protocols/column-matrix","G__38414","G__38415","G__38416","clojure.core.matrix.protocols/row-matrix","G__38417","G__38418","G__38419","G__38420","G__38421","G__38422","G__38423","G__38424","clojure.core.matrix.protocols/PVectorView","G__38425","clojure.core.matrix.protocols/as-vector","G__38426","G__38427","G__38428","G__38429","G__38430","G__38431","G__38432","G__38433","clojure.core.matrix.protocols/to-vector","clojure.core.matrix.protocols/PVectorisable","G__38434","G__38435","G__38436","G__38437","G__38438","G__38439","G__38440","G__38441","G__38442","clojure.core.matrix.protocols/PReshaping","G__38444","G__38445","G__38446","G__38447","G__38448","G__38449","G__38450","G__38451","G__38452","gv","es","cljs.core.repeat.cljs$core$IFn$_invoke$arity$1","partition-shape","ns","plen","p1__38443#","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","fs","parts","clojure.core.matrix.protocols/PCoercion","G__38453","G__38454","G__38455","G__38456","G__38457","G__38458","G__38459","G__38460","G__38461","param","clojure.core.matrix.protocols/PExponent","G__38470","clojure.core.matrix.protocols/element-pow","G__38471","G__38472","G__38473","G__38474","G__38475","exponent","p1__38463#","Math/pow","p1__38467#","p2__38468#","p1__38469#","clojure.core.matrix.protocols/PSquare","G__38476","clojure.core.matrix.protocols/square","G__38477","G__38478","G__38479","G__38480","G__38481","clojure.core.matrix.protocols/PLogistic","G__38482","clojure.core.matrix.protocols/logistic","G__38483","G__38484","G__38486","G__38487","G__38488","e-t","G__38485","Math/exp","clojure.core.matrix.impl.common/logistic-fn","clojure.core.matrix.protocols/PLogisticMutable","G__38489","clojure.core.matrix.protocols/logistic!","G__38490","G__38491","clojure.core.matrix.protocols/PSoftplus","G__38492","clojure.core.matrix.protocols/softplus","G__38493","G__38494","G__38497","G__38498","G__38499","et","G__38495","G__38496","Math/log","clojure.core.matrix.impl.common/softplus-fn","clojure.core.matrix.protocols/PSoftmax","G__38500","clojure.core.matrix.protocols/softmax","G__38501","G__38502","em","clojure.core.matrix.protocols/exp","clojure.core.matrix.protocols.element_divide.cljs$core$IFn$_invoke$arity$2","clojure.core.matrix.protocols/PSoftmaxMutable","G__38503","clojure.core.matrix.protocols/softmax!","G__38504","G__38505","clojure.core.matrix.protocols/exp!","clojure.core.matrix.protocols.element_divide_BANG_.cljs$core$IFn$_invoke$arity$2","clojure.core.matrix.protocols/PSoftplusMutable","G__38506","clojure.core.matrix.protocols/softplus!","G__38507","G__38508","clojure.core.matrix.protocols/PReLU","G__38509","clojure.core.matrix.protocols/relu","G__38510","G__38511","G__38514","G__38515","G__38516","G__38512","G__38513","Math/max","clojure.core.matrix.impl.common/relu-fn","clojure.core.matrix.protocols/PReLUMutable","G__38517","clojure.core.matrix.protocols/relu!","G__38518","G__38519","clojure.core.matrix.protocols/PMathsFunctions","G__38528","clojure.core.matrix.protocols/abs","G__38529","G__38530","G__38531","G__38532","clojure.core.matrix.protocols/acos","G__38533","G__38534","G__38535","Math/acos","G__38536","clojure.core.matrix.protocols/asin","G__38537","G__38538","G__38539","Math/asin","G__38540","clojure.core.matrix.protocols/atan","G__38541","G__38542","G__38543","Math/atan","G__38544","clojure.core.matrix.protocols/cbrt","G__38545","G__38546","G__38547","Math/cbrt","G__38548","clojure.core.matrix.protocols/ceil","G__38549","G__38550","G__38551","Math/ceil","G__38552","clojure.core.matrix.protocols/cos","G__38553","G__38554","G__38555","Math/cos","G__38556","clojure.core.matrix.protocols/cosh","G__38557","G__38558","G__38559","Math/cosh","G__38560","G__38561","G__38562","G__38563","G__38564","clojure.core.matrix.protocols/floor","G__38565","G__38566","G__38567","Math/floor","G__38568","clojure.core.matrix.protocols/log","G__38569","G__38570","G__38571","G__38572","clojure.core.matrix.protocols/log10","G__38573","G__38574","G__38575","Math/log10","G__38576","clojure.core.matrix.protocols/round","G__38577","G__38578","G__38579","Math/rint","G__38580","G__38581","G__38582","G__38583","Math/sign","G__38584","clojure.core.matrix.protocols/sin","G__38585","G__38586","G__38587","Math/sin","G__38588","clojure.core.matrix.protocols/sinh","G__38589","G__38590","G__38591","Math/sinh","G__38592","clojure.core.matrix.protocols/sqrt","G__38593","G__38594","G__38595","G__38596","clojure.core.matrix.protocols/tan","G__38597","G__38598","G__38599","Math/tan","G__38600","clojure.core.matrix.protocols/tanh","G__38601","G__38602","G__38603","Math/tanh","G__38604","clojure.core.matrix.protocols/to-degrees","G__38605","G__38606","clojure.core.matrix.impl.mathsops/to-degrees*","G__38607","clojure.core.matrix.protocols/to-radians","G__38608","G__38609","clojure.core.matrix.impl.mathsops/to-radians*","G__38610","G__38611","G__38612","p1__36623__36624__auto__","G__38613","G__38614","G__38615","G__38616","G__38617","G__38618","G__38619","G__38620","G__38621","G__38622","G__38623","G__38624","G__38625","G__38626","G__38627","G__38628","G__38629","G__38630","G__38631","G__38632","G__38633","G__38634","G__38635","G__38636","G__38637","G__38638","G__38639","G__38640","G__38641","G__38642","G__38643","G__38644","G__38645","G__38646","G__38647","G__38648","G__38649","G__38650","G__38651","G__38652","G__38653","G__38654","G__38655","G__38656","G__38657","G__38658","G__38659","G__38660","G__38661","G__38662","G__38663","G__38664","G__38665","G__38666","G__38667","G__38668","G__38669","G__38670","G__38671","G__38672","G__38673","G__38674","G__38675","G__38676","G__38677","G__38678","G__38679","G__38680","G__38681","G__38682","G__38683","G__38684","G__38685","G__38686","G__38687","G__38688","G__38689","G__38690","G__38691","G__38692","G__38693","G__38694","p1__36625__36626__auto__","G__38695","G__38696","G__38697","G__38698","G__38699","G__38700","G__38701","G__38702","G__38703","G__38704","G__38705","G__38706","G__38707","G__38708","G__38709","G__38710","G__38711","G__38712","G__38713","G__38714","G__38715","G__38716","G__38717","G__38718","G__38719","G__38720","G__38721","G__38722","G__38723","G__38724","G__38725","G__38726","G__38727","G__38728","G__38729","G__38730","G__38731","G__38732","G__38733","G__38734","G__38735","G__38736","G__38737","G__38738","G__38739","G__38740","G__38741","G__38742","G__38743","G__38744","G__38745","G__38746","G__38747","G__38748","G__38749","G__38750","G__38751","G__38752","G__38753","G__38754","G__38755","G__38756","G__38757","G__38758","G__38759","G__38760","G__38761","G__38762","G__38763","G__38764","G__38765","G__38766","G__38767","G__38768","G__38769","G__38770","G__38771","G__38772","G__38773","clojure.core.matrix.protocols/PMathsFunctionsMutable","G__38774","clojure.core.matrix.protocols/abs!","G__38775","G__38776","G__38777","clojure.core.matrix.protocols/acos!","G__38778","G__38779","G__38780","clojure.core.matrix.protocols/asin!","G__38781","G__38782","G__38783","clojure.core.matrix.protocols/atan!","G__38784","G__38785","G__38786","clojure.core.matrix.protocols/cbrt!","G__38787","G__38788","G__38789","clojure.core.matrix.protocols/ceil!","G__38790","G__38791","G__38792","clojure.core.matrix.protocols/cos!","G__38793","G__38794","G__38795","clojure.core.matrix.protocols/cosh!","G__38796","G__38797","G__38798","G__38799","G__38800","G__38801","clojure.core.matrix.protocols/floor!","G__38802","G__38803","G__38804","clojure.core.matrix.protocols/log!","G__38805","G__38806","G__38807","clojure.core.matrix.protocols/log10!","G__38808","G__38809","G__38810","clojure.core.matrix.protocols/round!","G__38811","G__38812","G__38813","clojure.core.matrix.protocols/signum!","G__38814","G__38815","G__38816","clojure.core.matrix.protocols/sin!","G__38817","G__38818","G__38819","clojure.core.matrix.protocols/sinh!","G__38820","G__38821","G__38822","clojure.core.matrix.protocols/sqrt!","G__38823","G__38824","G__38825","clojure.core.matrix.protocols/tan!","G__38826","G__38827","G__38828","clojure.core.matrix.protocols/tanh!","G__38829","G__38830","G__38831","clojure.core.matrix.protocols/to-degrees!","G__38832","G__38833","G__38834","clojure.core.matrix.protocols/to-radians!","G__38835","G__38836","G__38837","G__38838","G__38839","p1__36627__36628__auto__","G__38840","G__38841","G__38842","G__38843","G__38844","G__38845","G__38846","G__38847","G__38848","G__38849","G__38850","G__38851","G__38852","G__38853","G__38854","G__38855","G__38856","G__38857","G__38858","G__38859","G__38860","G__38861","G__38862","G__38863","G__38864","G__38865","G__38866","G__38867","G__38868","G__38869","G__38870","G__38871","G__38872","G__38873","G__38874","G__38875","G__38876","G__38877","G__38878","G__38879","G__38880","G__38881","G__38882","G__38883","G__38884","G__38885","G__38886","G__38887","G__38888","G__38889","G__38890","G__38891","G__38892","G__38893","G__38894","G__38895","G__38896","G__38897","G__38898","G__38899","G__38900","G__38901","G__38902","G__38903","G__38904","G__38905","G__38906","G__38907","G__38908","G__38909","G__38910","G__38911","G__38912","G__38913","G__38914","G__38915","G__38916","G__38917","G__38918","G__38919","G__38920","G__38921","p1__36629__36630__auto__","G__38922","G__38923","G__38924","G__38925","G__38926","G__38927","G__38928","G__38929","G__38930","G__38931","G__38932","G__38933","G__38934","G__38935","G__38936","G__38937","G__38938","G__38939","G__38940","G__38941","G__38942","G__38943","G__38944","G__38945","G__38946","G__38947","G__38948","G__38949","G__38950","G__38951","G__38952","G__38953","G__38954","G__38955","G__38956","G__38957","G__38958","G__38959","G__38960","G__38961","G__38962","G__38963","G__38964","G__38965","G__38966","G__38967","G__38968","G__38969","G__38970","G__38971","G__38972","G__38973","G__38974","G__38975","G__38976","G__38977","G__38978","G__38979","G__38980","G__38981","G__38982","G__38983","G__38984","G__38985","G__38986","G__38987","G__38988","G__38989","G__38990","G__38991","G__38992","G__38993","G__38994","G__38995","G__38996","G__38997","G__38998","G__38999","G__39000","clojure.core.matrix.protocols/PMatrixSubComponents","G__39001","clojure.core.matrix.protocols/main-diagonal","G__39002","G__39003","rank","cljs.core/min","diag-vals","s__39005","b__39007","i__39006","iter__39004","clojure.core.matrix.implementations/construct","clojure.core.matrix.protocols/PSpecialisedConstructors","G__39008","clojure.core.matrix.protocols/identity-matrix","G__39009","G__39010","G__39011","clojure.core.matrix.protocols/diagonal-matrix","G__39012","G__39013","diagonal-values","zs","dm","s__39015","b__39017","i__39016","iter__39014","clojure.core.matrix.protocols/PPermutationMatrix","G__39018","clojure.core.matrix.protocols/permutation-matrix","G__39019","G__39020","permutation","clojure.core.matrix.protocols/PBlockDiagonalMatrix","G__39021","clojure.core.matrix.protocols/block-diagonal-matrix","G__39022","G__39023","blocks","aux","acc-dim","new-block","new-block-dim","new-dim","s__39025","b__39027","i__39026","iter__39024","cljs.core.into.cljs$core$IFn$_invoke$arity$2","G__39028","G__39029","cljs.core.subvec.cljs$core$IFn$_invoke$arity$2","clojure.core.matrix.protocols/PMatrixPredicates","G__39031","clojure.core.matrix.protocols/identity-matrix?","G__39032","G__39033","G__39034","clojure.core.matrix.protocols/zero-matrix?","G__39035","G__39036","G__39037","clojure.core.matrix.protocols/symmetric?","G__39038","G__39039","G__39041","G__39042","G__39043","G__39044","G__39045","G__39046","G__39047","G__39048","G__39049","elem","p1__39030#","G__39040","clojure.core.matrix.impl.common/square?","clojure.core.matrix.impl.common/symmetric-matrix-entries?","clojure.core.matrix.protocols/PIndicesAccess","G__39051","clojure.core.matrix.protocols/get-indices","G__39052","G__39053","vals","p1__39050#","clojure.core.matrix.protocols/PIndicesSetting","G__39054","clojure.core.matrix.protocols/set-indices","G__39055","G__39056","G__39083","clojure.core.matrix.protocols/set-indices!","G__39084","G__39085","values","G__39063","vec__39065","seq__39066","first__39067","G__39064","vec__39068","seq__39069","first__39070","vec__39077","seq__39078","first__39079","vec__39080","seq__39081","first__39082","id","vs","G__39092","vec__39094","seq__39095","first__39096","G__39093","vec__39097","seq__39098","first__39099","vec__39106","seq__39107","first__39108","vec__39109","seq__39110","first__39111","clojure.core.matrix.protocols/PNonZeroIndices","G__39112","clojure.core.matrix.protocols/non-zero-indices","G__39113","G__39114","s__39116","b__39118","i__39117","iter__39115","s__39120","b__39122","i__39121","iter__39119","clojure.core.matrix.protocols/PMatrixTypes","G__39123","clojure.core.matrix.protocols/diagonal?","G__39124","G__39125","G__39133","clojure.core.matrix.protocols/upper-triangular?","G__39134","G__39135","G__39140","clojure.core.matrix.protocols/lower-triangular?","G__39141","G__39142","G__39147","clojure.core.matrix.protocols/positive-definite?","G__39148","G__39149","G__39150","clojure.core.matrix.protocols/positive-semidefinite?","G__39151","G__39152","G__39153","clojure.core.matrix.protocols/orthogonal?","G__39154","G__39155","vec__39126","cljs.core/quot","cljs.core/rem","p__39129","vec__39130","cljs.core.range.cljs$core$IFn$_invoke$arity$0","p__39136","vec__39137","xs","cljs.core/zero?","p__39143","vec__39144","cljs.core.drop.cljs$core$IFn$_invoke$arity$2","clojure.core.matrix.protocols/PSelect","G__39156","clojure.core.matrix.protocols/select","G__39157","G__39158","G__39159","G__39160","G__39161","G__39162","G__39163","G__39164","area","clojure.core.matrix.protocols/select-view","clojure.core.matrix.impl.wrappers/wrap-selection","clojure.core.matrix.protocols/PSelectView","G__39165","G__39166","G__39167","G__39168","G__39169","G__39170","G__39171","G__39172","G__39173","G__39174","G__39175","G__39176","clojure.core.matrix.impl.defaults/area-indices","io","in","s__39178","s__39180","b__39182","i__39181","iter__39179","iter__39177","cljs.core/last","clojure.core.matrix.impl.defaults/indices","clojure.core.matrix.protocols/PSetSelection","G__39183","clojure.core.matrix.protocols/set-selection","G__39184","G__39185","clojure.core.matrix.protocols/PIndexImplementation","G__39186","clojure.core.matrix.protocols/index?","G__39187","G__39188","G__39189","clojure.core.matrix.protocols/index-to-longs","G__39190","G__39191","G__39192","clojure.core.matrix.protocols/index-to-ints","G__39193","G__39194","G__39195","clojure.core.matrix.protocols/index-from-longs","G__39196","G__39197","G__39198","clojure.core.matrix.protocols/index-from-ints","G__39199","G__39200","G__39201","clojure.core.matrix.protocols/index-coerce","G__39202","G__39203","cljs.core.long_array.cljs$core$IFn$_invoke$arity$1","cljs.core.int_array.cljs$core$IFn$_invoke$arity$1","clojure.core.matrix.protocols/PDimensionLabels","G__39204","clojure.core.matrix.protocols/label","G__39205","G__39206","G__39207","clojure.core.matrix.protocols/labels","G__39208","G__39209","clojure.core.matrix.protocols/PColumnNames","G__39210","clojure.core.matrix.protocols/column-name","G__39211","G__39212","G__39213","clojure.core.matrix.protocols/column-names","G__39214","G__39215","clojure.core.matrix.protocols/PNorm","G__39216","clojure.core.matrix.protocols/norm","G__39217","G__39218","p","js/Number.POSITIVE_INFINITY","clojure.core.matrix.impl.mathsops/abs","sum-of-element-powers","pred__39219","expr__39220","G__39222","G__39223","clojure.core.matrix.impl.defaults/compute-q","qr-data","min-len","us","gammas","q","gamma","u","q-idx","qr-idx","clojure.core.matrix.impl.defaults/compute-r","compact?","cm","non-zero-rows","slice","clojure.core.matrix.impl.defaults/householder-qr","max_","cljs.core/max","p1__39224#","G__39225","tau","G__39226","u-idx","u-0","clojure.core.matrix.impl.defaults/update-qr","idx+1","clojure.core.matrix.protocols/PQRDecomposition","G__39227","clojure.core.matrix.protocols/qr","G__39228","G__39229","options","vec__39230","x__4276__auto__","y__4277__auto__","max-len","x__4273__auto__","y__4274__auto__","map__39241","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","error","map__39243","cljs.core/select-keys","p__39245","vec__39246","clojure.core.matrix.protocols/PCholeskyDecomposition","G__39249","clojure.core.matrix.protocols/cholesky","G__39250","G__39251","*trying-current-implementation*-orig-val__39252","*trying-current-implementation*-temp-val__39253","imp__26335__auto__","clojure.core.matrix.protocols/PLUDecomposition","G__39254","clojure.core.matrix.protocols/lu","G__39255","G__39256","*trying-current-implementation*-orig-val__39257","*trying-current-implementation*-temp-val__39258","clojure.core.matrix.protocols/PSVDDecomposition","G__39259","clojure.core.matrix.protocols/svd","G__39260","G__39261","*trying-current-implementation*-orig-val__39262","*trying-current-implementation*-temp-val__39263","clojure.core.matrix.protocols/PEigenDecomposition","G__39264","clojure.core.matrix.protocols/eigen","G__39265","G__39266","*trying-current-implementation*-orig-val__39267","*trying-current-implementation*-temp-val__39268","clojure.core.matrix.protocols/PSolveLinear","G__39269","clojure.core.matrix.protocols/solve","G__39270","G__39271","*trying-current-implementation*-orig-val__39272","*trying-current-implementation*-temp-val__39273","clojure.core.matrix.protocols/PLeastSquares","G__39274","clojure.core.matrix.protocols/least-squares","G__39275","G__39276","*trying-current-implementation*-orig-val__39277","*trying-current-implementation*-temp-val__39278"],"sourcesContent":["(ns clojure.core.matrix.impl.defaults\n  \"Default implementations for core.matrix protocols\n\n   These should be correct reference implementations for all protocols that work on\n   arbitrary objects. They are not necessarily tuned for performance.\n\n   Default implementations are defined for:\n    - nil (treated as a scalar nil value)\n    - Numbers (treated as scalar numerical values)\n    - Arbitrary arrays for which the protocol is not otherwise defined\n  \"\n  (:require [clojure.core.matrix.protocols :as mp]\n            [clojure.core.matrix.impl.wrappers :as wrap]\n            [clojure.core.matrix.impl.mathsops :as mops :refer [to-degrees* to-radians*]]\n            [clojure.core.matrix.implementations :as imp]\n            [clojure.core.matrix.impl.double-array :as da]\n            [clojure.core.matrix.impl.common :refer [logistic-fn softplus-fn relu-fn construct-matrix\n                                                     square? symmetric-matrix-entries? mapmatrix]]\n            [clojure.core.matrix.utils :as u])\n  #?@(:clj [(:require\n              [clojure.core.matrix.macros :refer [TODO error scalar-coerce c-for doseq-indexed array?]]\n              [clojure.core.matrix.macros-clj :refer [try-current-implementation eps== native-array?]])\n            (:import [clojure.lang ISeq])]\n      :cljs [(:require-macros\n               [clojure.core.matrix.impl.defaults :refer [def-PMathsFunctions def-PMathsFunctionsMutable]]\n               [clojure.core.matrix.macros :refer [TODO error scalar-coerce c-for doseq-indexed array?]]\n               [clojure.core.matrix.macros-cljs :refer [try-current-implementation eps== native-array?]])]))\n\n(def ^:dynamic *trying-current-implementation* nil)\n\n;; =========================================================================\n;; This namespace contains default implementations for core.matrix protocols\n;;\n;; These will be used for any protocol that is not extended to an array type\n;;\n;; In general, default implementations are provided for:\n;; - nil : treated as a nil scalar value\n;; - java.lang.Number : treated as a numerical scalar value\n;; - java.lang.Object : any unrecognised object, will be treated as an array\n;;\n\n#? (:clj (do\n(set! *warn-on-reflection* true)\n(set! *unchecked-math* true)\n\n;; (set! *unchecked-math* :warn-on-boxed) ;; use to check for boxing\n\n;; ============================================================\n;; Utility functions for default implementations\n))\n\n(defn- calc-element-count\n  \"Returns the total count of elements in an array\"\n  ([m]\n    (if-let [sh (mp/get-shape m)]\n      (reduce * sh)\n      1)))\n\n;; TODO: make smarter for different numeric types\n;; TODO: have this return ndarrays once we have cljs support\n(defn construct-mutable-matrix\n  \"Constructs a new mutable matrix with the given data.\"\n  ([m]\n    (let [dims (long (mp/dimensionality m))\n          type (mp/element-type m)\n          double? #?(:clj (or (= Double/TYPE type) (= java.lang.Double type))\n                     :cljs (= js/Number type))]\n      (cond\n        (== dims 0)\n          (wrap/wrap-scalar (mp/get-0d m))\n        (and (== dims 1) double?)\n          #?(:clj (da/construct-double-array m)\n             :cljs (mp/coerce-param (imp/get-canonical-object :aljabr) m))\n        double?\n          (mp/coerce-param (imp/get-canonical-object #?(:clj :ndarray-double :cljs :aljabr)) m)\n        :else\n          (mp/coerce-param (imp/get-canonical-object #?(:clj :ndarray :cljs :aljabr)) m)))))\n\n;; ============================================================\n;; Default implementations\n;; - default behaviour for java.lang.Number scalars\n;; - for stuff we don't recognise (java.lang.Object) we should try to\n;;   implement in terms of simpler operations, on assumption that\n;;   we have fallen through to the default implementation\n\n;; default overall implementation\n\n(extend-protocol mp/PImplementation\n  #?(:clj Object :cljs object)\n    (implementation-key [m] :default)\n    (meta-info [m] {})\n    (construct-matrix [m data]\n      (mp/construct-matrix [] data))\n    (new-vector [m length]\n      (mp/new-vector [] length))\n    (new-matrix [m rows columns]\n      (mp/new-matrix [] rows columns))\n    (new-matrix-nd [m shape]\n      (mp/new-matrix-nd [] shape))\n    (supports-dimensionality? [m dimensions]\n      true)\n\n  ;; keyword implementation looks up the underlying implementation by keyword\n  ;; this is intended to allow keywords to be used for dispatch rather than concrete\n  ;; instances from the underlying implementation, e.g. (coerce :vectorz some-other-array)\n  #?(:clj clojure.lang.Keyword\n     :cljs cljs.core.Keyword)\n    (implementation-key [m] m)\n    (meta-info [m] (mp/meta-info (imp/get-canonical-object-or-throw m)))\n    (construct-matrix [m data]\n      (mp/construct-matrix (imp/get-canonical-object-or-throw m) data))\n    (new-vector [m length]\n      (mp/new-vector (imp/get-canonical-object-or-throw m) length))\n    (new-matrix [m rows columns]\n      (mp/new-matrix (imp/get-canonical-object-or-throw m) rows columns))\n    (new-matrix-nd [m shape]\n      (mp/new-matrix-nd (imp/get-canonical-object-or-throw m) shape))\n    (supports-dimensionality? [m dimensions]\n      (mp/supports-dimensionality? (imp/get-canonical-object-or-throw m) dimensions)))\n\n(extend-protocol mp/PSparse\n  nil\n    (sparse-coerce [m data]\n      (mp/sparse data))\n    (sparse [m]\n      nil)\n  #?(:clj Object :cljs object)\n    (sparse-coerce [m data]\n      nil) ;; allow fall through if sparse coercion is not directly supported\n    (sparse [m]\n      m))\n\n(extend-protocol mp/PNative\n  nil\n    (native [m]\n      nil)\n    (native? [m] false)\n  #?(:clj Object :cljs object)\n    (native [m]\n      nil) ;; allow fall through if native coercion is not directly supported\n    (native? [m]\n      false))\n\n(extend-protocol mp/PNewSparseArray\n  #?(:clj Object :cljs object)\n    (new-sparse-array [m shape]\n      ;; we don't support sparse arrays by default, so just return nil\n      nil))\n\n(extend-protocol mp/PDense\n  nil\n    (dense-coerce [m data]\n      (mp/dense data))\n    (dense [m]\n      nil)\n  #?(:clj Object :cljs object)\n    (dense-coerce [m data]\n      nil) ;; allow fall-through if dense coercion is not directly supported\n    (dense [m]\n      m))\n\n;; default implementation for matrix ops\n\n(extend-protocol mp/PIndexedAccess\n  nil\n    (get-1d [m x]\n      (error \"Can't do 1D get on nil\"))\n    (get-2d [m x y]\n      (error \"Can't do 2D get on nil\"))\n    (get-nd [m indexes]\n      (if-let [s (seq indexes)]\n        (error \"Can't do ND get on nil with indexes: \" s)\n        m))\n  #?(:clj Number :cljs number)\n    (get-1d [m x]\n      (error \"Can't do 1D get on a scalar number\"))\n    (get-2d [m x y]\n      (error \"Can't do 2D get on a scalar number\"))\n    (get-nd [m indexes]\n      (if-let [s (seq indexes)]\n        (error \"Can't do ND get on a scalar number with indexes: \" s)\n        m))\n  #?(:clj Object :cljs object)\n    (get-1d [m x]\n      (cond\n        (native-array? m) (mp/get-0d (nth m x))\n        :else (mp/get-nd m [x])))\n    (get-2d [m x y]\n      (cond\n        (native-array? m) (mp/get-1d (nth m x) y)\n        :else (mp/get-nd m [x y])))\n    (get-nd [m indexes]\n      (if (seq indexes)\n        (cond\n          (native-array? m) (mp/get-nd (nth m (first indexes)) (next indexes))\n          :else (error \"Indexed get failed, not defined for:\" (#?(:clj class :cljs type) m)))\n        (mp/get-0d m)))\n\n#?@(:cljs\n     [cljs.core/LazySeq\n      (get-1d [m x] (nth m x))\n      (get-2d [m x y]\n        (if (seqable? (first m))\n          (mp/get-1d (nth m x) y)\n          (error \"Can't do 2D get on a lazy seq\")))\n      (get-nd [m indexes]\n        (if (seq indexes)\n          (mp/get-nd (nth m (first indexes)) (next indexes))\n          (mp/get-0d m)))\n\n      cljs.core/Range\n      (get-1d [m x] (nth m x))\n      (get-2d [m x y]\n        (error \"Can't do 2D get on a range\"))\n      (get-nd [m indexes]\n              (if (seq indexes)\n                (mp/get-nd (nth m (first indexes)) (next indexes))\n                (mp/get-0d m)))\n      ]\n))\n\n(extend-protocol mp/PArrayMetrics\n  nil\n    (nonzero-count [m] 1)\n  #?(:clj Number :cljs number)\n    (nonzero-count [m] (if (zero? m) 0 1)) ;; not possible to remove boxing warning\n  #?(:clj Object :cljs object)\n    (nonzero-count [m]\n      (mp/element-reduce m (fn [cnt e] (if (zero? e) cnt (inc cnt))) 0))) ;; not possible to remove boxing warning\n\n(extend-protocol mp/PZeroDimensionConstruction\n  nil\n    (new-scalar-array\n      ([m] 0.0)\n      ([m value]\n        (wrap/wrap-scalar value)))\n  #?(:clj Object :cljs object)\n    (new-scalar-array\n      ([m] (wrap/wrap-scalar 0.0))\n      ([m value] (wrap/wrap-scalar value))))\n\n(extend-protocol mp/PZeroDimensionAccess\n  nil\n    (get-0d [m]\n      nil)\n    (set-0d! [m value]\n      (error \"Can't set the value of nil!\"))\n  #?(:clj String :cljs string)\n    (get-0d [m]\n      m)\n    (set-0d! [m value]\n      (error \"Can't set a string value!\"))\n  #?(:clj clojure.lang.Keyword :cljs cljs.core.Keyword)\n    (get-0d [m]\n      m)\n    (set-0d! [m value]\n      (error \"Can't set a keyword!\"))\n  #?(:clj Number :cljs number)\n    (get-0d [m]\n      m)\n    (set-0d! [m value]\n      (error \"Can't set a scalar number!\"))\n  #?(:clj Object :cljs object)\n    (get-0d [m]\n      ;; assume this is a scalar value\n      m)\n    (set-0d! [m value]\n      (mp/set-nd! m [] value)))\n\n(extend-protocol mp/PZeroDimensionSet\n  nil\n    (set-0d [m value]\n      value ;; should be OK, since scalars satisfy 0d array abstraction\n      )\n  #?(:clj Object :cljs object)\n    (set-0d [m value]\n      value ;; should be OK, since scalars satisfy 0d array abstraction\n      ))\n\n(extend-protocol mp/PIndexedSetting\n  nil\n    (set-1d [m row v]\n      (error \"Can't do 1D set on nil\"))\n    (set-2d [m row column v]\n      (error \"Can't do 2D set on nil\"))\n    (set-nd [m indexes v]\n      (if (seq indexes)\n        (error \"Can't do \" (count indexes) \"D set on nil\")\n        v))\n    (is-mutable? [m]\n      false)\n  #?(:clj Number :cljs number)\n    (set-1d [m row v]\n      (error \"Can't do 1D set on a scalar number\"))\n    (set-2d [m row column v]\n      (error \"Can't do 2D set on a scalar number\"))\n    (set-nd [m indexes v]\n      (if (seq indexes)\n        (error \"Can't do \" (count indexes) \"D set on a scalar number\")\n        v))\n    (is-mutable? [m]\n      false)\n  #?(:clj Object :cljs object)\n    (set-1d [m row v]\n      (let [m (mp/clone m)]\n        (mp/set-1d! m row v)\n        m))\n    (set-2d [m row column v]\n      (let [m (mp/clone m)]\n        (mp/set-2d! m row column v)\n        m))\n    (set-nd [m indexes v]\n      (let [m (mp/clone m)]\n        (mp/set-nd! m indexes v)\n        m))\n    (is-mutable? [m]\n      ;; assume an object is mutable unless we know otherwise.\n      ;; certainly true for arbitrary Java arrays, for example.\n      true))\n\n(extend-protocol mp/PNumerical\n  #?(:clj Number :cljs number)\n    (numerical? [m]\n      true)\n  nil\n    (numerical? [m]\n      false)\n  #?(:clj Object :cljs object)\n    (numerical? [m]\n      (if (mp/is-scalar? m)\n        false ;; it's a scalar but not a number, so we do not recognise it as numerical\n        (every? number? (mp/element-seq m)))))\n\n(extend-protocol mp/PVectorOps\n  #?(:clj Number :cljs number)\n    (vector-dot [a b] (mp/pre-scale b a))\n    (length [a] (Math/abs (double a)))\n    (length-squared [a] (let [a (double a)] (* a a)))\n    (normalise [a]\n      (let [a (double a)]\n        (cond\n          (> a 0.0) 1.0\n          (< a 0.0) -1.0\n          :else 0.0)))\n  #?(:clj Object :cljs object)\n    (vector-dot [a b]\n      ;; compute dot product if we have two vectors, otherwise return nil\n      (when (and (== 1 (long (mp/dimensionality a))) (== 1 (long (mp/dimensionality b))))\n        (mp/element-sum (mp/element-multiply a b))))\n    (length [a]\n      (Math/sqrt (double (mp/length-squared a))))\n    (length-squared [a]\n      (mp/element-reduce a (fn [^double r ^double x] (+ r (* x x))) 0.0))\n    (normalise [a]\n      (mp/scale a (/ 1.0 (Math/sqrt (double (mp/length-squared a)))))))\n\n(extend-protocol mp/PVectorDistance\n  #?(:clj Number :cljs number)\n    (distance [a b]\n      (if (number? b)\n        (Math/abs (- (double b) (double a)))\n        (mp/distance b a)))\n  #?(:clj Object :cljs object)\n    (distance [a b] (double (mp/length (mp/matrix-sub a b)))))\n\n(extend-protocol mp/PVectorCross\n  #?(:clj Object :cljs object)\n    (cross-product [a b]\n      (let [x1 (double (mp/get-1d a 0))\n            y1 (double (mp/get-1d a 1))\n            z1 (double (mp/get-1d a 2))\n            x2 (double (mp/get-1d b 0))\n            y2 (double (mp/get-1d b 1))\n            z2 (double (mp/get-1d b 2))]\n        (mp/construct-matrix a [(- (* y1 z2) (* z1 y2))\n                                (- (* z1 x2) (* x1 z2))\n                                (- (* x1 y2) (* y1 x2))])))\n    (cross-product! [a b]\n      (let [x1 (double (mp/get-1d a 0))\n            y1 (double (mp/get-1d a 1))\n            z1 (double (mp/get-1d a 2))\n            x2 (double (mp/get-1d b 0))\n            y2 (double (mp/get-1d b 1))\n            z2 (double (mp/get-1d b 2))]\n        (mp/set-1d! a 0 (- (* y1 z2) (* z1 y2)))\n        (mp/set-1d! a 1 (- (* z1 x2) (* x1 z2)))\n        (mp/set-1d! a 2 (- (* x1 y2) (* y1 x2)))\n        a)))\n\n(extend-protocol mp/PMutableVectorOps\n  #?(:clj Object :cljs object)\n    (normalise! [a]\n      (mp/scale! a (/ 1.0 (Math/sqrt (double (mp/length-squared a)))))))\n\n(extend-protocol mp/PAssignment\n  #?(:clj Object :cljs object)\n    (assign! [m x]\n      (let [dims (long (mp/dimensionality m))]\n        (cond\n          (== 0 dims) (mp/set-0d! m (mp/get-0d x))\n          (== 1 dims)\n            (if (instance? ISeq x)\n              ;; specialised handling for sequence (since indexed access would be O(n^2))\n              (let [x (seq x)\n                    msize (long (mp/dimension-count m 0))]\n                (loop [i 0 s (seq x)]\n                  (if (>= i msize)\n                    (when s (error \"Mismatches size of sequence in assign!\"))\n                    (do\n                      (mp/set-1d! m i (first s))\n                      (recur (inc i) (next s))))))\n              ;; otherwise use indexed access\n              (let [xdims (long (mp/dimensionality x))\n                    msize (long (mp/dimension-count m 0))]\n                (cond\n                  (== 0 xdims)\n                    (let [value (mp/get-0d x)]\n                      (dotimes [i msize] (mp/set-1d! m i value)))\n                  (== 1 xdims)\n                    (do\n                      (when (not= msize (long (mp/dimension-count x 0))) (error \"Mismatched shapes in assign to array of shape: \" (mp/get-shape m) \" with argument of shape: \" (mp/get-shape x)))\n                      (dotimes [i msize] (mp/set-1d! m i (mp/get-1d x i))))\n                  :else\n                    (error \"Can't assign! with an argument of higher dimensionality\"))))\n\n          (array? m)\n            (let [xdims (long (mp/dimensionality x))]\n              (if (== dims xdims)\n                (let [xss (mp/get-major-slice-seq x)\n                      _ (or (mp/same-shapes? xss) (error \"Inconsistent slice shapes for assign!\"))]\n                  (doall (map (fn [a b] (mp/assign! a b)) (mp/get-major-slice-view-seq m) xss)))\n                (doseq [ms (mp/get-major-slice-view-seq m)] (mp/assign! ms x))))\n           :else\n              (error \"Can't assign to a non-array object: \" (#?(:clj class :cljs type) m)))))\n    (assign-array!\n      ([m arr]\n          (let [alen (long (count arr))]\n            (if (mp/is-vector? m)\n              (dotimes [i alen]\n                (mp/set-1d! m i (nth arr i)))\n              (mp/assign-array! m arr 0 alen))))\n      ([m arr start length]\n          (let [length (long length)\n                start (long start)]\n         (if (mp/is-vector? m)\n              (dotimes [i length]\n                (mp/set-1d! m i (nth arr (+ start i))))\n              (let [ss (seq (mp/get-major-slice-seq m))\n                    skip (long (if ss (calc-element-count (first (mp/get-major-slice-seq m))) 0))]\n                (doseq-indexed [s ss i]\n                  (mp/assign-array! s arr (+ start (* skip i)) skip))))))))\n\n(extend-protocol mp/PImmutableAssignment\n  nil\n    (assign [m source]\n      (let [r (mp/broadcast-coerce m source)]\n        (if (identical? r source) (mp/clone r) r)))\n  #?(:clj Number :cljs number)\n  (assign [m source]\n    source)\n  #?(:clj Object :cljs object)\n    (assign [m source]\n      (let [r (mp/broadcast-coerce m source)]\n        (if (identical? r source) (mp/clone r) r))))\n\n(extend-protocol mp/PMutableFill\n  #?(:clj Object :cljs object)\n    (fill! [m value]\n      (mp/assign! m value)))\n\n(extend-protocol mp/PMatrixCloning\n   nil\n     (clone [m]\n       m)\n   #?(:clj Number :cljs number)\n     (clone [m]\n       m)\n   #?(:clj Object :cljs object)\n     (clone [m]\n       (mp/construct-matrix m m)))\n\n(extend-protocol mp/PSparseArray\n   #?(:clj Object :cljs object)\n     (is-sparse? [m]\n       false))\n\n(extend-protocol mp/PImmutableMatrixConstruction\n  nil\n    (immutable-matrix [m]\n      nil)\n  #?(:clj Object :cljs object)\n    (immutable-matrix [m]\n      (if (mp/is-mutable? m)\n        (mp/convert-to-nested-vectors m)\n        m)))\n\n(extend-protocol mp/PZeroCount\n  nil\n    (zero-count [m]\n      0)\n  #?(:clj Number :cljs number)\n     (zero-count [m]\n       ;; not possible to remove boxing warning, m may be any numeric type\n       (if (zero? m) 1 0))\n  #?(:clj Object :cljs object)\n     (zero-count [m]\n       ;; not possible to remove boxing warning, m may be any numeric type\n       (mp/element-reduce m (fn [acc e] (if (zero? e) (inc acc) acc)) 0)))\n\n\n(extend-protocol mp/PMutableMatrixConstruction\n  nil\n    (mutable-matrix [m]\n      (wrap/wrap-scalar m))\n  #?(:clj Number :cljs number)\n    (mutable-matrix [m]\n      (wrap/wrap-scalar m))\n  #?(:clj Object :cljs object)\n    (mutable-matrix [m]\n      (construct-mutable-matrix m)))\n\n(extend-protocol mp/PMutableCoercion\n  nil\n    (ensure-mutable [m]\n      (wrap/wrap-scalar m))\n  #?(:clj Number :cljs number)\n    (ensure-mutable [m]\n      (wrap/wrap-scalar m))\n  #?(:clj Object :cljs object)\n    (ensure-mutable [m]\n      (if (mp/is-mutable? m)\n        m\n        (construct-mutable-matrix m))))\n\n(extend-protocol mp/PComputeMatrix\n  #?(:clj Object :cljs object)\n    (compute-matrix [m shape f]\n      (let [m (mp/new-matrix-nd m shape)]\n        (reduce (fn [m ix] (mp/set-nd m ix (apply f ix))) m (u/base-index-seq-for-shape shape)))))\n\n(extend-protocol mp/PDimensionInfo\n  nil\n    (dimensionality [m] 0)\n    (is-scalar? [m] true)\n    (is-vector? [m] false)\n    (get-shape [m] nil)\n    (dimension-count [m i] (error \"nil has zero dimensionality, cannot get count for dimension: \" i))\n  #?(:clj clojure.lang.Keyword\n     :cljs cljs.core.Keyword)\n    (dimensionality [m] 0)\n    (is-scalar? [m] true)\n    (is-vector? [m] false)\n    (get-shape [m] nil)\n    (dimension-count [m i] (error \"Keyword has zero dimensionality, cannot get count for dimension: \" i))\n  #?(:clj String :cljs string)\n    (dimensionality [m] 0)\n    (is-scalar? [m] true)\n    (is-vector? [m] false)\n    (get-shape [m] nil)\n    (dimension-count [m i] (error \"String has zero dimensionality, cannot get count for dimension: \" i))\n  #?(:clj Number :cljs number)\n    (dimensionality [m] 0)\n    (is-scalar? [m] true)\n    (is-vector? [m] false)\n    (get-shape [m] nil)\n    (dimension-count [m i] (error \"Number has zero dimensionality, cannot get count for dimension: \" i))\n  #?(:clj Object :cljs object)\n    (dimensionality [m]\n      (cond\n        #?(:clj (.isArray (.getClass m)) :cljs (= js/Array (type m)))\n          (let [n (long (count m))]\n            (if (> n 0) (inc (long (mp/dimensionality (nth m 0)))) 1))\n        :else 0))\n    (is-vector? [m]\n      (cond\n        #?(:clj (.isArray (.getClass m)) :cljs (= js/Array (type m)))\n          (let [n (long (count m))]\n            (or (== n 0) (== 0 (long (mp/dimensionality (nth m 0))))))\n        :else false))\n    (is-scalar? [m]\n      (cond\n        #?(:clj (.isArray (.getClass m)) :cljs (= js/Array (type m))) false ;; Java arrays are core.matrix arrays\n        :else true)) ;; assume objects are scalars unless told otherwise\n    (get-shape [m]\n      (cond\n        #?(:clj (.isArray (.getClass m)) :cljs (= js/Array (type m)))\n          (let [n (count m)]\n            (if (== n 0) [0] (cons n (mp/get-shape (nth m 0)))))\n        :else nil))\n    (dimension-count [m i]\n      (let [i (long i)]\n        (cond\n          #?(:clj (.isArray (.getClass m)) :cljs (= js/Array (type m)))\n            (if (== i 0) (count m) (mp/dimension-count (nth m 0) (dec i)))\n          (== 0 i)\n            (count m)\n          :else (error \"Can't determine count of dimension \" i \" on Object: \" (#?(:clj class :cljs type) m)))))\n\n#?@(:cljs\n     [cljs.core/List\n      (dimensionality [m] (inc (mp/dimensionality (first m))))\n      (is-vector? [m] (== 0 (mp/dimensionality (first m))))\n      (is-scalar? [m] false)\n      (get-shape [m] (cons (count m) (mp/get-shape (first m))))\n      (dimension-count [m x]\n                       (if (== x 0)\n                         (count m)\n                         (mp/dimension-count (first m) (dec x))))\n\n      cljs.core/LazySeq\n      (dimensionality [m] (inc (mp/dimensionality (first m))))\n      (is-vector? [m] (== 0 (mp/dimensionality (first m))))\n      (is-scalar? [m] false)\n      (get-shape [m] (cons (count m) (mp/get-shape (first m))))\n      (dimension-count [m x]\n                       (if (== x 0)\n                         (count m)\n                         (mp/dimension-count (first m) (dec x))))\n\n      cljs.core/IndexedSeq\n      (dimensionality [m] (inc (mp/dimensionality (first m))))\n      (is-vector? [m] (== 0 (mp/dimensionality (first m))))\n      (is-scalar? [m] false)\n      (get-shape [m] (cons (count m) (mp/get-shape (first m))))\n      (dimension-count [m x]\n                       (if (== x 0)\n                         (count m)\n                         (mp/dimension-count (first m) (dec x))))\n\n      cljs.core/Cons\n      (dimensionality [m] (inc (mp/dimensionality (first m))))\n      (is-vector? [m] (== 0 (mp/dimensionality (first m))))\n      (is-scalar? [m] false)\n      (get-shape [m] (cons (count m) (mp/get-shape (first m))))\n      (dimension-count [m x]\n                       (if (== x 0)\n                         (count m)\n                         (mp/dimension-count (first m) (dec x))))\n\n      cljs.core/Range\n      (dimensionality [m] (inc (mp/dimensionality (first m))))\n      (is-vector? [m] (== 0 (mp/dimensionality (first m))))\n      (is-scalar? [m] false)\n      (get-shape [m] (cons (count m) (mp/get-shape (first m))))\n      (dimension-count [m x]\n                       (if (== x 0)\n                         (count m)\n                         (mp/dimension-count (first m) (dec x))))\n      ]))\n\n(extend-protocol mp/PSameShape\n  nil\n    (same-shape? [a b]\n      (== 0 (long (mp/dimensionality b))))\n  #?(:clj String :cljs string)\n    (same-shape? [a b]\n      (== 0 (long (mp/dimensionality b))))\n  #?(:clj Number :cljs number)\n    (same-shape? [a b]\n      (== 0 (long (mp/dimensionality b))))\n  #?(:clj Object :cljs object)\n    (same-shape? [a b]\n      (u/same-shape-object? (mp/get-shape a) (mp/get-shape b))))\n\n;; generic versions of matrix ops\n(extend-protocol mp/PMatrixOps\n  nil\n    (trace [m] m)\n  #?(:clj Number :cljs number)\n    (trace [m] m)\n    (inverse [m] (/ m))\n  #?(:clj Object :cljs object)\n    (trace [m]\n      (when-not (== 2 (long (mp/dimensionality m))) (error \"Trace requires a 2D matrix\"))\n      (let [rc (long (mp/dimension-count m 0))\n            cc (long (mp/dimension-count m 1))\n            dims (Math/min rc cc)]\n        (loop [i 0 res 0.0]\n          (if (>= i dims)\n            res\n            (recur (inc i) (+ res (double (mp/get-2d m i i))))))))\n    (determinant [m]\n      (let [imp (or (imp/get-canonical-object :vectorz) (error \"(let Need to load an implementation which supports determinant, e.g. vectorz-clj\"))\n            m (mp/coerce-param imp m)]\n        (mp/determinant m)))\n    (inverse [m]\n      (let [imp (or (imp/get-canonical-object :vectorz) (error \"Need to load an implementation which supports inverse, e.g. vectorz-clj\"))\n            mm (mp/coerce-param imp m)]\n        (mp/coerce-param m (mp/inverse mm)))))\n\n(extend-protocol mp/PTranspose\n  nil\n    (transpose [m] m)\n  #?(:clj Number :cljs number)\n    (transpose [m] m)\n  #?(:clj Object :cljs object)\n    (transpose [m]\n      (mp/coerce-param\n       m\n       (let [dims (long (mp/dimensionality m))]\n         (case dims\n           0 m\n           1 m\n           2 (apply mapv vector (mp/convert-to-nested-vectors m))\n           (mp/transpose-dims m (reverse (range dims))))))))\n\n(extend-protocol mp/PTransposeDims\n  nil\n    (transpose-dims [m ordering] m)\n  #?(:clj Number :cljs number)\n    (transpose-dims [m ordering] m)\n  #?(:clj Object :cljs object)\n    (transpose-dims [m ordering]\n      (mp/transpose-dims (mp/convert-to-nested-vectors m) ordering)))\n\n(extend-protocol mp/PTransposeInPlace\n  #?(:clj Object :cljs object)\n    (transpose! [m]\n      (let [n (long (mp/dimension-count m 0))]\n        (when (not= n (long (mp/dimension-count m 1))) (error \"transpose! requires a quare matrix\"))\n        (dotimes [i n]\n          (dotimes [j i]\n            (let [t (mp/get-2d m i j)]\n              (mp/set-2d! m i j (mp/get-2d m j i))\n              (mp/set-2d! m j i t)))))\n      m))\n\n(extend-protocol mp/PRotate\n  nil\n    (rotate [m dim places] nil)\n  #?(:clj Number :cljs number)\n    (rotate [m dim places] m)\n  #?(:clj Object :cljs object)\n    (rotate [m dim places]\n      (let [dim (long dim)\n            places (long places)]\n        (cond\n          (<= (long (mp/dimensionality m)) 0)\n            m\n          (== 0 dim)\n            (let [ss (mp/get-major-slice-seq m)\n                  c (long (mp/dimension-count m 0))\n                  sh (long (if (pos? c) (long (mod places c)) 0))]\n              (if (== sh 0)\n                m\n                (vec (concat (take-last (- c sh) ss) (take sh ss)))))\n         :else\n           (mp/rotate (mp/convert-to-nested-vectors m) dim places)))))\n\n\n(extend-protocol mp/PRotateAll\n  nil\n    (rotate-all [m shifts] nil)\n  #?(:clj Number :cljs number)\n    (rotate-all [m shifts] m)\n  #?(:clj Object :cljs object)\n    (rotate-all [m shifts]\n      (reduce (fn [m [^long dim ^long shift]] (if (zero? shift) m (mp/rotate m dim shift)))\n         m\n         (map-indexed (fn [i v] [i v]) shifts))))\n\n(extend-protocol mp/PShift\n  #?(:clj Object :cljs object)\n    (shift [m dim shift]\n      (let [shift (long shift)\n            z (mp/generic-zero m)\n            c (long (mp/dimension-count m dim))\n            sh (vec (mp/get-shape m))]\n        (cond\n          (== shift 0) m\n          (>= shift c) (mp/broadcast-coerce m z)\n          (<= shift (- c)) (mp/broadcast-coerce m z)\n          (< shift 0) (mp/join-along\n                        (mp/broadcast (mp/construct-matrix m z) (assoc sh dim (- shift)))\n                        (mp/submatrix m (map vector\n                                             (vec (repeat (count sh) 0))\n                                             (assoc sh dim (+ c shift))))\n                        dim)\n          (> shift 0) (mp/join-along\n                        (mp/submatrix m (map vector\n                                             (assoc (vec (repeat (count sh) 0)) dim shift)\n                                             (assoc sh dim (- c shift))))\n                        (mp/broadcast (mp/construct-matrix m z) (assoc sh dim shift))\n                        dim)\n          :else (error \"Shouldn't be possible!!\"))))\n    (shift-all [m shifts]\n      (reduce (fn [m [dim ^long shift]] (if (zero? shift) m (mp/shift m dim shift)))\n         m\n         (map-indexed (fn [i v] [i v]) shifts))))\n\n\n(extend-protocol mp/POrder\n  nil\n    (order\n      ([m indices] (error \"Can't reorder a scalar nil\"))\n      ([m dim indices] (error \"Can't reorder a scalar nil\")))\n  #?(:clj Number :cljs number)\n    (order\n      ([m indices] (error \"Can't reorder a scalar number\"))\n      ([m dim indices] (error \"Can't reorder a scalar number\")))\n  #?(:clj Object :cljs object)\n    (order\n      ([m indices]\n        (let [mshape (vec (mp/get-shape m))\n              subshape (assoc m 0 1)\n              ss (map #(mp/broadcast (mp/get-major-slice m %) subshape) indices)]\n          (reduce #(mp/join %1 %2) ss)))\n      ([m dim indices]\n        (mp/order (mp/convert-to-nested-vectors m) dim indices))))\n\n(defn- output-rank\n  \"Outputs a vector containing the rank of array elements, given a sorted sequence of [index value] pairs and a length\"\n  ([pairs n]\n    (let [^objects dest (object-array n)]\n      (loop [i (long 0)\n             pairs (seq pairs)]\n        (when (< i n)\n          (aset dest (first (first pairs)) (Long/valueOf i))\n          (recur (inc i)\n                 (next pairs))))\n      (vec dest))))\n\n(extend-protocol mp/PIndexRank\n  #?(:clj Object :cljs object)\n    (index-rank\n      ([m]\n        (let [dims (long (mp/dimensionality m))]\n          (case dims\n            0 (error \"Can't get indexed rank of a scalar value\")\n            1 (let [n (long (mp/element-count m))]\n                (output-rank (sort-by second (map vector (range (mp/element-count m)) (mp/element-seq m))) n))\n            (mapv mp/index-rank (mp/get-major-slice-seq m)))))\n      ([m comp]\n        (let [dims (long (mp/dimensionality m))]\n          (case dims\n            0 (error \"Can't get indexed rank of a scalar value\")\n            1 (let [n (long (mp/element-count m))]\n                (output-rank (sort-by second comp (map vector (range (mp/element-count m)) (mp/element-seq m))) n))\n            (mapv #(mp/index-rank % comp) (mp/get-major-slice-seq m)))))))\n\n;; not possible to remove boxing warning, may be any numeric type\n(extend-protocol mp/PMatrixProducts\n  #?(:clj Number :cljs number)\n    (inner-product [m a]\n      (if (number? a)\n        (clojure.core/* m a)\n        (mp/pre-scale a m)))\n    (outer-product [m a]\n      (if (number? a)\n        (clojure.core/* m a)\n        (mp/pre-scale a m)))\n  #?(:clj Object :cljs object)\n    (inner-product [m a]\n      (cond\n        (mp/is-scalar? m)\n          (mp/pre-scale a m)\n        (mp/is-scalar? a)\n          (mp/scale m a)\n        (== 1 (long (mp/dimensionality m)))\n          (if (== 1 (long (mp/dimensionality a)))\n            (mp/element-sum (mp/element-multiply m a))\n            (reduce mp/matrix-add (map (fn [sl x] (mp/scale sl x))\n                                       (mp/get-major-slice-seq a)\n                                       (mp/get-major-slice-seq m)))) ;; TODO: implement with mutable accumulation\n        :else\n        (mp/construct-matrix (imp/get-canonical-object) (map #(mp/inner-product % a) (mp/get-major-slice-seq m)))))\n    (outer-product [m a]\n      (cond\n        (mp/is-scalar? m)\n          (mp/pre-scale a m)\n        :else\n        (mp/element-map (mp/convert-to-nested-vectors m) (fn [x] (mp/pre-scale a x)))\n        ;; convert to nested vectors first, this enables trick of extending dimensionality for each element with element-map\n        ;(mp/element-map (mp/convert-to-nested-vectors m) (fn [v] (mp/pre-scale a v)))\n        )))\n\n;; matrix multiply\n;; TODO: document returning NDArray\n(extend-protocol mp/PMatrixMultiply\n  #?(:clj Number :cljs number)\n    (element-multiply [m a]\n      (if (number? a)\n        (clojure.core/* m a)\n        (mp/pre-scale a m)))\n    (matrix-multiply [m a]\n      (cond\n        (number? a) (* m a)\n        (array? a) (mp/pre-scale a m)\n        :else (error \"Don't know how to multiply number with: \" (#?(:clj class :cljs type) a))))\n  #?(:clj Object :cljs object)\n    (matrix-multiply [m a]\n      (let [mdims (long (mp/dimensionality m))\n            adims (long (mp/dimensionality a))]\n        (cond\n         (== adims 0) (mp/scale m a)\n         (and (== mdims 1) (== adims 1)) (mp/vector-dot m a)\n         (and (== mdims 1) (== adims 2))\n           (let [[arows acols] (mp/get-shape a)]\n             (mp/reshape (mp/matrix-multiply (mp/reshape m [1 arows]) a)\n                         [acols]))\n         (and (== mdims 2) (== adims 1))\n           (let [mshape (mp/get-shape m)\n                 [mrows mcols] mshape\n                 acount (mp/element-count a)]\n             (when (not= mcols acount) (error \"Can't multiply matrix of shape: \" mshape \" with a vector of length \" acount))\n             (mp/reshape (mp/matrix-multiply m (mp/reshape a [mcols 1]))\n                         [mrows]))\n         (and (== mdims 2) (== adims 2))\n           (let [mutable (mp/is-mutable? m)\n                 [^long mrows ^long mcols] (mp/get-shape m)\n                 [^long arows ^long acols] (mp/get-shape a)\n                 new-m-type (if mutable m (imp/get-canonical-object :ndarray))\n                 new-m (mp/new-matrix new-m-type mrows acols)]\n             ;; TODO: optimize cache-locality (http://bit.ly/12FgFbl)\n             (c-for [i (long 0) (< i mrows) (inc i)\n                     j (long 0) (< j acols) (inc j)]\n               (mp/set-2d! new-m i j 0))\n             (c-for [i (long 0) (< i mrows) (inc i)\n                    j (long 0) (< j acols) (inc j)\n                    k (long 0) (< k mcols) (inc k)]\n               (mp/set-2d! new-m i j (+ (mp/get-2d new-m i j)\n                                        (* (mp/get-2d m i k)\n                                           (mp/get-2d a k j)))))\n             new-m))))\n    (element-multiply [m a]\n      (if (number? a)\n        (mp/scale m a)\n        (let [[m a] (mp/broadcast-compatible m a)]\n          (mp/element-map m clojure.core/* a)))))\n\n;; matrix multiply\n(extend-protocol mp/PMatrixMultiplyMutable\n  #?(:clj Number :cljs number)\n    (element-multiply! [m a]\n      (error \"Can't do mutable multiply on a scalar number\"))\n    (matrix-multiply! [m a]\n      (error \"Can't do mutable multiply on a scalar number\"))\n  #?(:clj Object :cljs object)\n    (element-multiply! [m a]\n      (mp/assign! m (mp/element-multiply m a)))\n    (matrix-multiply! [m a]\n      (mp/assign! m (mp/matrix-multiply m a))))\n\n(extend-protocol mp/PMatrixDivide\n  #?(:clj Number :cljs number)\n    (element-divide\n      ([m] (/ m))\n      ([m a] (mp/pre-scale (mp/element-divide a) m)))\n  #?(:clj Object :cljs object)\n    (element-divide\n      ([m]\n        (if (mp/get-shape m)\n          (mp/element-map m mp/element-divide)\n          (error \"Don't know how to take reciprocal of \" (type m))))\n      ([m a]\n        (mp/element-multiply m (mp/element-divide a)))))\n\n(extend-protocol mp/PMatrixDivideMutable\n  #?(:clj Number :cljs number)\n\t  (element-divide!\n\t    ([m] (error \"Can't do mutable divide on a scalar number\"))\n\t    ([m a] (error \"Can't do mutable divide on a scalar numer\")))\n  #?(:clj Object :cljs object)\n\t  (element-divide!\n\t    ([m] (mp/element-map! m /))\n\t    ([m a]\n\t       (let [[m a] (mp/broadcast-compatible m a)]\n\t         (mp/element-map! m / a)))))\n\n;; matrix element summation\n(extend-protocol mp/PSummable\n  #?(:clj Number :cljs number)\n    (element-sum [a] a)\n  #?(:clj Object :cljs object)\n    (element-sum [a]\n      (mp/element-reduce a (if (mp/numerical? a) + mp/matrix-add))))\n\n;; not possible to eliminate boxing warnings - needs to handle any numeric type\n(extend-protocol mp/PElementMinMax\n  #?(:clj Number :cljs number)\n    (element-min [m] m)\n    (element-max [m] m)\n    (element-clamp [m a b]\n      (if-not (<= a b)\n        (error \"min argument: \" a \" should be <= max argument: \" b)\n        (if (< m a) a (if (> m b) b m))))\n  #?(:clj Object :cljs object)\n    (element-min [m]\n      (mp/element-reduce m\n                       (fn [best v] (if (or (not best) (< v best)) v best))\n                       nil))\n    (element-max [m]\n      (mp/element-reduce m\n                       (fn [best v] (if (or (not best) (> v best)) v best))\n                       nil))\n    (element-clamp [m a b]\n      (if-not (<= a b)\n        (error \"min argument: \" a \" should be <= max argument: \" b)\n        (mp/element-map m #(if (< %1 a) a (if (> %1 b) b %1))))))\n\n(extend-protocol mp/PCompare\n  #?(:clj Number :cljs number)\n    (element-compare [a b]\n      (if (number? b)\n        (long (mops/signum (- a b)))\n        (mp/signum (mp/matrix-sub a b))))\n    (element-if [m a b]\n      (let [[a b] (mp/broadcast-same-shape a b)]\n        (if (> m 0) a b)))\n    (element-lt [m a]\n      (if (number? a)\n        (if (< m a) 1 0)\n        (mp/element-gt a m)))\n    (element-le [m a]\n      (if (number? a)\n        (if (<= m a) 1 0)\n        (mp/element-ge a m)))\n    (element-gt [m a]\n      (if (number? a)\n        (if (> m a) 1 0)\n        (mp/element-lt a m)))\n    (element-ge [m a]\n      (if (number? a)\n        (if (>= m a) 1 0)\n        (mp/element-le a m)))\n    (element-ne [m a]\n      (if (number? a)\n        (if (not= m a) 1 0)\n        (mp/element-ne a m)))\n    (element-eq [m a]\n      (if (number? a)\n        (if (= m a) 1 0)\n        (mp/element-eq a m)))\n  #?(:clj Object :cljs object)\n    (element-compare [a b]\n      (mp/element-map (mp/matrix-sub a b) #(long (mops/signum %))))\n    (element-if [m a b]\n      (cond\n        (and (number? a) (number? b))\n          (mp/element-map m #(if (> %1 0) a b))\n        (number? a)\n          (mp/element-map m #(if (> %1 0) a %2) b)\n        (number? b)\n          (mp/element-map m #(if (> %1 0) %2 b) a)\n        :else (mp/element-map m #(if (> %1 0) %2 %3) a [b])) ;; note we need [b] because this is a `more` argument\n      )\n    (element-lt [m a]\n      (if (number? a)\n        (mp/element-map m #(if (< %1 a) 1 0))\n        (mp/element-map m #(if (< %1 %2) 1 0) a)))\n    (element-le [m a]\n      (if (number? a)\n        (mp/element-map m #(if (<= %1 a) 1 0))\n        (mp/element-map m #(if (<= %1 %2) 1 0) a)))\n    (element-gt [m a]\n      (if (number? a)\n        (mp/element-map m #(if (> %1 a) 1 0))\n        (mp/element-map m #(if (> %1 %2) 1 0) a)))\n    (element-ge [m a]\n      (if (number? a)\n        (mp/element-map m #(if (>= %1 a) 1 0))\n        (mp/element-map m #(if (>= %1 %2) 1 0) a)))\n    (element-ne [m a]\n      (if (number? a)\n        (mp/element-map m #(if-not (== %1 a) 1 0))\n        (mp/element-map m #(if-not (== %1 %2) 1 0) a)))\n    (element-eq [m a]\n      (if (number? a)\n        (mp/element-map m #(if (== %1 a) 1 0))\n        (mp/element-map m #(if (== %1 %2) 1 0) a))))\n\n;; add-product operations\n(extend-protocol mp/PAddProduct\n  #?(:clj Number :cljs number)\n    (add-product [m a b]\n      (mp/matrix-add (mp/element-multiply a b) m ))\n  #?(:clj Object :cljs object)\n    (add-product [m a b]\n      (mp/matrix-add m (mp/element-multiply a b))))\n\n(extend-protocol mp/PAddProductMutable\n  #?(:clj Number :cljs number)\n    (add-product! [m a b]\n      (error \"Numbers are not mutable\"))\n  #?(:clj Object :cljs object)\n    (add-product! [m a b]\n      (mp/matrix-add! m (mp/element-multiply a b))))\n\n(extend-protocol mp/PAddScaled\n  #?(:clj Number :cljs number)\n    (add-scaled [m a factor]\n      (mp/matrix-add (mp/scale a factor) m))\n  #?(:clj Object :cljs object)\n    (add-scaled [m a factor]\n      (mp/matrix-add m (mp/scale a factor))))\n\n(extend-protocol mp/PAddScaledMutable\n  #?(:clj Number :cljs number)\n    (add-scaled! [m a factor]\n      (error \"Numbers are not mutable\"))\n  #?(:clj Object :cljs object)\n    (add-scaled! [m a factor]\n      (mp/matrix-add! m (mp/scale a factor))))\n\n(extend-protocol mp/PAddScaledProduct\n  #?(:clj Number :cljs number)\n    (add-scaled-product [m a b factor]\n      (mp/matrix-add (mp/scale (mp/element-multiply a b) factor) m))\n  #?(:clj Object :cljs object)\n    (add-scaled-product [m a b factor]\n      (mp/matrix-add m (mp/scale (mp/element-multiply a b) factor))))\n\n(extend-protocol mp/PAddScaledProductMutable\n  #?(:clj Number :cljs number)\n    (add-scaled-product! [m a b factor]\n      (error \"Numbers are not mutable\"))\n  #?(:clj Object :cljs object)\n    (add-scaled-product! [m a b factor]\n      (mp/matrix-add! m (mp/scale (mp/element-multiply a b) factor))))\n\n;; not possible to eliminate boxing warnings - needs to handle any numeric type\n(extend-protocol mp/PScaleAdd\n  #?(:clj Object :cljs object)\n    (scale-add! [m1 a m2 b constant]\n      (mp/element-multiply! m1 a)\n      (when-not (and (number? b) (zero? b)) (mp/add-product! m1 m2 b))\n      (when-not (and (number? constant) (zero? constant)) (mp/matrix-add! m1 constant))\n      m1))\n\n(extend-protocol mp/PScaleAdd2\n  #?(:clj Object :cljs object)\n    (scale-add [m1 a m2 b constant]\n      (let [r (mp/matrix-add (mp/scale m1 a) (mp/scale m2 b))]\n        (if (== 0.0 constant)\n          r\n          (mp/matrix-add r constant)))))\n\n(extend-protocol mp/PLerp\n  #?(:clj Object :cljs object)\n    (lerp [a b factor]\n      (mp/scale-add a (- 1.0 (double factor)) b factor 0.0))\n    (lerp! [a b factor]\n      (mp/scale-add! a (- 1.0 (double factor)) b factor 0.0)))\n\n(extend-protocol mp/PAddInnerProductMutable\n  #?(:clj Object :cljs object)\n    (add-inner-product!\n      ([m a b]\n        (mp/matrix-add! m (mp/inner-product a b)))\n      ([m a b factor]\n        (mp/add-scaled! m (mp/inner-product a b) factor))))\n\n(extend-protocol mp/PAddOuterProductMutable\n  #?(:clj Object :cljs object)\n    (add-outer-product!\n      ([m a b]\n        (mp/matrix-add! m (mp/outer-product a b)))\n      ([m a b factor]\n        (mp/add-scaled! m (mp/outer-product a b) factor))))\n\n(extend-protocol mp/PSetInnerProductMutable\n  #?(:clj Object :cljs object)\n    (set-inner-product!\n      ([m a b]\n        (mp/assign! m (mp/inner-product a b)))\n      ([m a b factor]\n        (mp/assign! m (mp/inner-product a b))\n        (mp/scale! m factor))))\n\n;; type of matrix element\n;; the default is to assume any type is possible\n(extend-protocol mp/PTypeInfo\n  nil\n    (element-type [a]\n      #?(:clj Object :cljs js/Object))\n\n  #?(:clj Object :cljs object)\n    (element-type [a]\n      (if (native-array? a)\n        (.getComponentType (#?(:clj class :cljs type) a))\n        #?(:clj Object :cljs js/Object))))\n\n;; generic element values\n(extend-protocol mp/PGenericValues\n  #?(:clj Object :cljs object)\n    (generic-zero [m]\n      0)\n    (generic-one [m]\n      1)\n    (generic-value [m]\n      0))\n\n;; general transformation of a vector\n(extend-protocol mp/PVectorTransform\n  #?(:clj clojure.lang.IFn\n     :cljs cljs.core.IFn)\n    (vector-transform [m a]\n      (if\n        (vector? m) (mp/matrix-multiply m a)\n        (m a)))\n    (vector-transform! [m a]\n      (if\n        (vector? m) (mp/assign! a (mp/matrix-multiply m a))\n        (mp/assign! a (m a))))\n  #?(:clj Object :cljs object)\n    (vector-transform [m a]\n      (cond\n        (== 2 (long (mp/dimensionality m))) (mp/matrix-multiply m a)\n        :else (error \"Don't know how to transform using: \" (#?(:clj class :cljs type) m))))\n    (vector-transform! [m a]\n      (mp/assign! a (mp/vector-transform m a))))\n\n;; matrix scaling\n;; not possible to eliminate boxing warnings - needs to handle any numeric type\n(extend-protocol mp/PMatrixScaling\n  #?(:clj Number :cljs number)\n    (scale [m a]\n      (if (number? a)\n        (* m a)\n        (mp/pre-scale a m)))\n    (pre-scale [m a]\n      (if (number? a)\n        (* a m)\n        (mp/scale a m)))\n  #?(:clj Object :cljs object)\n    (scale [m a]\n      (mp/element-map m #(* % a)))\n    (pre-scale [m a]\n      (mp/element-map m (partial * a))))\n\n;; not possible to eliminate boxing warnings - needs to handle any numeric type\n(extend-protocol mp/PMatrixMutableScaling\n  #?(:clj Number :cljs number)\n    (scale! [m a]\n      (error \"Can't scale! a numeric value: \" m))\n    (pre-scale! [m a]\n      (error \"Can't pre-scale! a numeric value: \" m))\n  #?(:clj Object :cljs object)\n    (scale! [m a]\n      (mp/element-map! m #(* % a))\n      m)\n    (pre-scale! [m a]\n      (mp/element-map! m (partial * a))\n      m))\n\n;; not possible to eliminate boxing warnings - needs to handle any numeric type\n(extend-protocol mp/PMatrixAdd\n  ;; matrix add for scalars\n  #?(:clj Number :cljs number)\n    (matrix-add [m a]\n      (if (number? a)\n        (+ m a)\n        (mp/matrix-add a m)))\n    (matrix-sub [m a]\n      (if (number? a)\n        (- m a)\n        (mp/negate (mp/matrix-sub a m))))\n  ;; default impelementation - assume we can use emap?\n  #?(:clj Object :cljs object)\n    (matrix-add [m a]\n      (let [[m a] (mp/broadcast-compatible m a)]\n        (mp/element-map m clojure.core/+ a)))\n    (matrix-sub [m a]\n      (let [[m a] (mp/broadcast-compatible m a)]\n        (mp/element-map m clojure.core/- a))))\n\n\n\n(extend-protocol mp/PMatrixAddMutable\n  ;; matrix add for scalars\n  #?(:clj Number :cljs number)\n    (matrix-add! [m a]\n      (error \"Can't do mutable add! on a scalar number\"))\n    (matrix-sub! [m a]\n      (error \"Can't do mutable sub! on a scalar number\"))\n  ;; default impelementation - assume we can use emap?\n  #?(:clj Object :cljs object)\n    (matrix-add! [m a]\n      (mp/element-map! m clojure.core/+ a))\n    (matrix-sub! [m a]\n      (mp/element-map! m clojure.core/- a)))\n\n(extend-protocol mp/PNegation\n  nil\n    (negate [m]\n      (error \"Can't negate nil!\"))\n  #?(:clj Number :cljs number)\n    (negate [m]\n      (- m))\n  #?(:clj Object :cljs object)\n    (negate [m]\n      (mp/scale m -1.0)))\n\n;; equality checking\n;; not possible to eliminate boxing warnings - needs to handle any numeric type\n(extend-protocol mp/PMatrixEquality\n  nil\n    (matrix-equals [a b]\n      (error \"nil is not a valid numerical value in equality testing\"))\n  #?(:clj Number :cljs number)\n    (matrix-equals [a b]\n      (cond\n        (number? b) (== a b)\n        (== 0 (mp/dimensionality b)) (== a (scalar-coerce b))\n        :else false))\n  #?(:clj Object :cljs object)\n    (matrix-equals [a b]\n      (cond\n        (identical? a b) true\n        (mp/same-shape? a b)\n        (if (== 0 (long (mp/dimensionality a)))\n          (== (mp/get-0d a) (scalar-coerce b))\n          (not-any? false? (map == (mp/element-seq a) (mp/element-seq b))))\n        :else false)))\n\n(extend-protocol mp/PValueEquality\n  nil\n    (value-equals [a b]\n      (or\n        (nil? b)\n        (and\n          (== 0 (long (mp/dimensionality b)))\n          (nil? (mp/get-0d b)))))\n  #?(:clj Number :cljs number)\n  (value-equals [a b]\n    (and\n      (== 0 (long (mp/dimensionality b)))\n      (== a (mp/get-0d b))))\n  #?(:clj Object :cljs object)\n    (value-equals [a b]\n      (and\n        (mp/same-shape? a b)\n        (every? true? (map = (mp/element-seq a) (mp/element-seq b))))))\n\n;; equality checking\n(extend-protocol mp/PMatrixEqualityEpsilon\n  nil\n    (matrix-equals-epsilon [a b eps]\n      (error \"nil is not a valid numerical value in equality testing\"))\n  #?(:clj Number :cljs number)\n    (matrix-equals-epsilon [a b eps]\n      (cond\n        (number? b) (eps== a b eps)\n        (== 0 (long (mp/dimensionality b))) (eps== a (mp/get-0d b) eps)\n        :else false))\n  #?(:clj Object :cljs object)\n    (matrix-equals-epsilon [a b eps]\n      (cond\n        (identical? a b) true\n        (mp/same-shape? a b)\n          (let [eps (double eps)]\n            (every? #(<= (Math/abs (double %)) eps) (map - (mp/element-seq a) (mp/element-seq b))))\n        :else false)))\n\n(extend-protocol mp/PDoubleArrayOutput\n  #?(:clj Number :cljs number)\n    (to-double-array [m]\n      (let [arr (double-array 1)] (aset arr 0 (double m)) arr))\n    (as-double-array [m] nil)\n  #?(:clj Object :cljs object)\n    (to-double-array [m]\n      (double-array (mp/element-seq m)))\n    (as-double-array [m] nil))\n\n(extend-protocol mp/PObjectArrayOutput\n  nil\n    (to-object-array [m]\n      (let [arr (object-array 1)] arr))\n    (as-object-array [m] nil)\n  #?(:clj Number :cljs number)\n    (to-object-array [m]\n      (let [arr (object-array 1)] (aset arr 0 m) arr))\n    (as-object-array [m] nil)\n  #?(:clj Object :cljs object)\n    (to-object-array [m]\n      (object-array (mp/element-seq m)))\n    (as-object-array [m] nil))\n\n;; row operations\n(extend-protocol mp/PRowOperations\n  #?(:clj Object :cljs object)\n    (swap-rows [m i j]\n      (mp/swap-rows (mp/convert-to-nested-vectors m) i j))\n    (multiply-row [m i k]\n      (mp/multiply-row (mp/convert-to-nested-vectors m) i k))\n    (add-row [m i j k]\n      (mp/add-row (mp/convert-to-nested-vectors m) i j k)))\n\n(extend-protocol mp/PRowSetting\n  #?(:clj Object :cljs object)\n    (set-row [m i row]\n      (let [svec (vec (mp/get-major-slice-seq m))\n            row (mp/broadcast-like (svec 0) row)]\n        (mp/coerce-param m (assoc svec i row))))\n    (set-row! [m i row]\n      (let [sl (mp/get-major-slice-view m i)\n            row (mp/broadcast-like sl row)]\n        (mp/assign! sl row)\n        m)))\n\n(extend-protocol mp/PColumnSetting\n  #?(:clj Object :cljs object)\n  (set-column [m i column]\n    (let [scol (mp/get-column m 0)\n          column (mp/broadcast-like scol column)\n          indices (range (mp/dimension-count column 0))\n          new-m (reduce (fn [acc idx]\n                          (mp/set-2d acc idx i (mp/get-1d column idx)))\n                        m indices)]\n      (mp/coerce-param m new-m)))\n  (set-column! [m i column]\n    (let [scol (mp/get-column m 0)\n          column (mp/broadcast-like scol column)]\n      (dotimes [j (mp/dimension-count column 0)]\n        (mp/set-2d! m j i (mp/get-1d column j))))))\n\n;; slice-map\n(extend-protocol mp/PSliceMap\n  #?(:clj Object :cljs object)\n  (slice-map\n    ([m f]\n      (construct-matrix m (mapv f (mp/get-major-slice-seq m))))\n    ([m f a]\n      (construct-matrix m (mapv f\n                                (mp/get-major-slice-seq m)\n                                (mp/get-major-slice-seq a))))\n    ([m f a more]\n      (construct-matrix m (apply mapv f\n                                 (mp/get-major-slice-seq m)\n                                 (mp/get-major-slice-seq a)\n                                 (map mp/get-major-slice-seq more))))))\n\n;; slice-map\n(extend-protocol mp/PFilterSlices\n  #?(:clj Object :cljs object)\n  (filter-slices [m f]\n    (let [slcs (filterv f (mp/get-major-slice-seq m))]\n      ;; check for no slices, in which case we must return nil\n      (if (seq slcs) slcs nil))))\n\n(extend-protocol mp/PAddEmap\n  #?(:clj Object :cljs object)\n  (add-emap!\n    ([dest f a]\n      (mp/matrix-add! dest (mp/element-map a f)))\n    ([dest f a b]\n      (mp/matrix-add! dest (mp/element-map a f b)))\n    ([dest f a b more]\n      (mp/matrix-add! dest (mp/element-map a f b more)))))\n\n(extend-protocol mp/PSetEmap\n  #?(:clj Object :cljs object)\n  (set-emap!\n    ([dest f a]\n      (mp/assign! dest (mp/element-map a f)))\n    ([dest f a b]\n      (mp/assign! dest (mp/element-map a f b)))\n    ([dest f a b more]\n      (mp/assign! dest (mp/element-map a f b more)))))\n\n;; functional operations\n(extend-protocol mp/PFunctionalOperations\n  #?(:clj Number :cljs number)\n    (element-seq [m]\n      (vector m))\n    (element-map\n      ([m f]\n        (f m))\n      ([m f a]\n        (mp/element-map a #(f m %)))\n      ([m f a more]\n        (if-let [moremore (next more)]\n          (mp/element-map a #(apply f m %1 %2 %&) (first more) moremore)\n          (mp/element-map a #(f m %1 %2) (first more)))))\n    (element-map!\n      ([m f]\n        (error \"java.lang.Number instance is not mutable!\"))\n      ([m f a]\n        (error \"java.lang.Number instance is not mutable!\"))\n      ([m f a more]\n        (error \"java.lang.Number instance is not mutable!\")))\n    (element-reduce\n      ([m f]\n        m)\n      ([m f init]\n        (f init m)))\n  #?(:clj Object :cljs object)\n    (element-seq [m]\n      (let [c (#?(:clj #?(:clj class :cljs type) :cljs type) m)\n            dims (long (mp/dimensionality m))]\n        (cond\n          (> dims 1) (mapcat mp/element-seq (mp/get-major-slice-seq m))\n          (seq? m) m\n          (== 0 dims)\n            (vector (mp/get-0d m))\n #?@(:clj [(and (.isArray c) (.isPrimitive (.getComponentType c))) m]\n    :cljs [(= js/Array c) m])\n          (== 1 dims)\n            (mp/convert-to-nested-vectors m)\n          (array? m)\n            (mapcat mp/element-seq (mp/get-major-slice-seq m))\n          :else (error \"Don't know how to create element-seq from: \" m))))\n    (element-map\n      ([m f]\n        (construct-matrix m (mapmatrix f m)))\n      ([m f a]\n        (let [[m a] (mp/broadcast-same-shape m a)]\n          (construct-matrix m (mapmatrix f m a))))\n      ([m f a more]\n        (let [arrays (cons m (cons a more))\n              shapes (map mp/get-shape arrays)\n              sh (or (mp/common-shape shapes) (error \"Attempt to do element map with incompatible shapes: \" (mapv mp/get-shape arrays)))\n              arrays (map #(mp/broadcast % sh) arrays)]\n          (construct-matrix m (apply mapmatrix f arrays)))))\n\n    (element-map!\n      ([m f]\n        (mp/assign! m (mp/element-map m f)))\n      ([m f a]\n        (mp/assign! m (mp/element-map m f a)))\n      ([m f a more]\n        (mp/assign! m (mp/element-map m f a more))))\n    (element-reduce\n      ([m f]\n        (reduce f (mp/element-seq m)))\n      ([m f init]\n        (reduce f init (mp/element-seq m))))\n  nil\n    (element-seq [m] '(nil))\n    (element-map\n      ([m f] (f nil))\n      ([m f a] (f nil a))\n      ([m f a more] (apply f nil a more)))\n    (element-map!\n      ([m f] (error \"Can't do element-map! on nil\"))\n      ([m f a] (error \"Can't do element-map! on nil\"))\n      ([m f a more] (error \"Can't do element-map! on nil\")))\n    (element-reduce\n      ([m f] nil)\n      ([m f init] (f init nil)))\n\n#?@(:cljs\n  [cljs.core/List\n    (element-seq [m]\n     (cond\n        (== 0 (count m))\n          nil\n        (>= (long (mp/dimensionality (nth m 0))) 1)\n          ;; we are a 2D+ array, so be conservative and create a concatenated sequence\n          (mapcat mp/element-seq m)\n        :else\n          ;; we are a 1D vector, so already a valid seqable result for element-seq\n          m))])\n    )\n\n(defn- cart [colls]\n  (if (empty? colls)\n    [[]]\n    (for [x    (first colls)\n          more (cart (rest colls))]\n      (cons x more))))\n\n(defn- indices-seq [m]\n  (cart (map range (mp/get-shape m))))\n\n(extend-protocol mp/PMapIndexed\n  #?(:clj Number :cljs number)\n    (element-map-indexed\n      ([m f]\n        (f [] m))\n      ([m f a]\n        (mp/element-map a #(f [] m %)))\n      ([m f a more]\n        (if-let [moremore (next more)]\n          (mp/element-map a #(apply f [] m %1 %2 %&) (first more) moremore)\n          (mp/element-map a #(f [] m %1 %2) (first more)))))\n    (element-map-indexed!\n      ([m f]\n        (error \"java.lang.Number instance is not mutable!\"))\n      ([m f a]\n        (error \"java.lang.Number instance is not mutable!\"))\n      ([m f a more]\n        (error \"java.lang.Number instance is not mutable!\")))\n  #?(:clj Object :cljs object)\n    (element-map-indexed\n      ([m f]\n        (if (== 0 (long (mp/dimensionality m)))\n          (f [] (mp/get-0d m)) ;; handle case of single element\n          (let [s (map f (indices-seq m) (mp/element-seq m))]\n            (mp/reshape (mp/coerce-param m s)\n                        (mp/get-shape m)))))\n      ([m f a]\n        (if (== 0 (long (mp/dimensionality m)))\n          (let [v (mp/get-0d m)]\n            (mp/element-map-indexed a #(f %1 v %2)))\n          (let [[m a] (mp/broadcast-compatible m a)\n                s (map f (indices-seq m) (mp/element-seq m) (mp/element-seq a))]\n            (mp/reshape (mp/coerce-param m s) ;; TODO: faster construction method?\n                        (mp/get-shape m)))))\n      ([m f a more]\n        (let [s (map f (mp/element-seq m) (mp/element-seq a))\n              s (apply map f (list* (indices-seq m)\n                                    (mp/element-seq m)\n                                    (mp/element-seq a)\n                                    (map mp/element-seq more)))]\n          (mp/reshape (mp/coerce-param m s)\n                      (mp/get-shape m)))))\n    (element-map-indexed!\n      ([m f]\n        (mp/assign! m (mp/element-map-indexed m f)))\n      ([m f a]\n        (mp/assign! m (mp/element-map-indexed m f a)))\n      ([m f a more]\n        (mp/assign! m (mp/element-map-indexed m f a more))))\n  nil\n    (element-map-indexed\n      ([m f] (f [] nil))\n      ([m f a] (f [] nil a))\n      ([m f a more] (apply f [] nil a more)))\n    (element-map-indexed!\n      ([m f] (error \"Can't do element-map-indexed! on nil\"))\n      ([m f a] (error \"Can't do element-map-indexed! on nil\"))\n      ([m f a more] (error \"Can't do element-map-indexed! on nil\"))))\n\n(extend-protocol mp/PElementCount\n  nil (element-count [m] 1)\n  #?(:clj Number :cljs number) (element-count [m] 1)\n  #?(:clj Object :cljs object)\n    (element-count [m]\n      (calc-element-count m)))\n\n(extend-protocol mp/PValidateShape\n  nil\n    (validate-shape \n      ([m] nil)\n      ([m shape] (when-not (nil? shape) (error \"Shape validation failed, was scalar but expected: \" shape))))\n  #?(:clj Object :cljs object)\n    (validate-shape \n      ([m]\n        (mp/validate-shape m (mp/get-shape m)))\n      ([m expected-shape]\n        (cond\n          (== 0 (long (mp/dimensionality m)))\n            (let [sh (mp/get-shape m)]\n              (if (nil? sh)\n                (when-not (nil? expected-shape)\n                  (error \"Shape validation failed, was scalar but expected: \" expected-shape))\n                (if (= (vec sh) (vec expected-shape)) \n                  sh \n                  (error \"Shape validation failed, was \" sh \" but expected: \" expected-shape)))\n              )\n          :else\n            (let [sh (mp/get-shape m)\n                  ss (mp/get-major-slice-seq m)\n                  efirst (or (first expected-shape) (error \"Shape validation failed, was \" sh \" but expected: \" expected-shape))\n                  enext (next expected-shape) \n                  shapes (mapv #(mp/validate-shape % enext) ss)]\n              (if (apply = enext shapes)\n                (vec (cons (mp/dimension-count m 0) (first shapes)))\n                (error \"Inconsistent shapes for sub arrays in \" (#?(:clj class :cljs type) m))))))))\n\n(extend-protocol mp/PMatrixSlices\n  #?(:clj Object :cljs object)\n    (get-row [m i]\n      (if (native-array? m)\n        (nth m i)\n        (mp/get-major-slice m i)))\n    (get-column [m i]\n      (mp/get-slice m 1 i))\n    (get-major-slice [m i]\n      (cond\n        (native-array? m) (nth m i)\n        (== 1 (long (mp/dimensionality m))) (mp/get-1d m i)\n        :else (clojure.core.matrix.impl.wrappers/wrap-slice m i)))\n    (get-slice [m dimension i]\n      (let [ldimension (long dimension)]\n        (cond\n          (== 0 ldimension) (mp/get-major-slice m i)\n          :else (mp/get-slice (mp/convert-to-nested-vectors m) dimension i)))))\n\n(extend-protocol mp/PBLASBase\n  #?(:clj Object :cljs object)\n  (gemm! [c trans-a? trans-b? alpha a b beta]\n    (let [a (if trans-a? (mp/transpose a) a)\n          b (if trans-b? (mp/transpose b) b)]\n      (if-not (== 1.0 (double beta)) (mp/scale! c beta))\n      (mp/add-inner-product! c a b alpha)))\n  (gemv! [c trans-a? alpha a b beta]\n    (let [a (if trans-a? (mp/transpose a) a)]\n      (if-not (== 1.0 (double beta)) (mp/scale! c beta))\n      (mp/add-inner-product! c a b alpha))))\n\n(extend-protocol mp/PMatrixColumns\n  #?(:clj Object :cljs object)\n  (get-columns [m]\n    (case (long (mp/dimensionality m))\n      0 (error \"Can't get columns of a 0-dimensional object\")\n      1 (error \"Can't get columns of a 1-dimensional object\")\n      2 (vec (mp/get-slice-seq m 1))\n      (vec (mapcat mp/get-columns (mp/get-major-slice-seq m))))))\n\n(extend-protocol mp/PMatrixRows\n  #?(:clj Object :cljs object)\n  (get-rows [m]\n    (case (long (mp/dimensionality m))\n      0 (error \"Can't get rows of a 0-dimensional object\")\n      1 (error \"Can't get rows of a 1-dimensional object\")\n      2 (vec (mp/get-major-slice-seq m))\n      (vec (mapcat mp/get-rows (mp/get-major-slice-seq m))))))\n\n(extend-protocol mp/PSliceView\n  #?(:clj Object :cljs object)\n    ;; default implementation uses a lightweight wrapper object\n    (get-major-slice-view [m i]\n      (cond\n        (native-array? m)\n          (let [ss (nth m i)]\n            (if (array? ss)\n              ss\n              (clojure.core.matrix.impl.wrappers/wrap-slice m i)))\n        :else (clojure.core.matrix.impl.wrappers/wrap-slice m i))))\n\n(extend-protocol mp/PSliceView2\n  #?(:clj Object :cljs object)\n    (get-slice-view [m dim i]\n      (if (zero? dim)\n        (mp/get-major-slice-view m i)\n        (mp/get-slice-view (clojure.core.matrix.impl.wrappers/wrap-nd m) dim i))))\n\n(extend-protocol mp/PSliceSeq\n  #?(:clj Object :cljs object)\n    (get-major-slice-seq [m]\n      (let [dims (long (mp/dimensionality m))]\n        (cond\n          (<= dims 0) (error \"Can't get slices on [\" dims \"]-dimensional object\")\n          #?(:clj (.isArray (.getClass m)) :cljs (= js/Array (type m))) (seq m)\n          (== dims 1) (for [i (range (mp/dimension-count m 0))] (mp/get-1d m i))\n          :else (map #(mp/get-major-slice m %) (range (mp/dimension-count m 0)))))))\n\n(extend-protocol mp/PSliceSeq2\n  #?(:clj Object :cljs object)\n    (get-slice-seq [m dimension]\n      (let [ldimension (long dimension)]\n        (cond\n          (== ldimension 0) (mp/get-major-slice-seq m)\n          (< ldimension 0) (error \"Can't get slices of a negative dimension: \" dimension)\n          :else (map #(mp/get-slice m dimension %) (range (mp/dimension-count m dimension)))))))\n\n(extend-protocol mp/PSliceViewSeq\n  #?(:clj Object :cljs object)\n    (get-major-slice-view-seq [m]\n      (let [n (mp/dimension-count m 0)]\n        (for [i (range n)]\n          (mp/get-major-slice-view m i)))))\n\n(extend-protocol mp/PSliceJoin\n  nil\n    (join [m a]\n      (error \"Can't join an array to a nil value!\"))\n  #?(:clj Number :cljs number)\n    (join [m a]\n      (error \"Can't join an array to a scalar number!\"))\n  #?(:clj Object :cljs object)\n    (join [m a]\n      (let [dims (long (mp/dimensionality m))\n            adims (long (mp/dimensionality a))]\n        (cond\n          (== dims 0)\n            (error \"Can't join to a 0-dimensional array!\")\n          (== dims adims)\n            (mp/coerce-param m (concat (mp/get-major-slice-seq m) (mp/get-major-slice-seq a)))\n          (== dims (inc adims))\n            (mp/coerce-param m (concat (mp/get-major-slice-seq m) [a]))\n          :else\n            (error \"Joining with array of incompatible size\")))))\n\n(extend-protocol mp/PSliceJoinAlong\n  nil\n  (join-along [m a dim]\n    (error \"Can't join an array to a nil value!\"))\n  #?(:clj Number :cljs number)\n  (join-along [m a dim]\n    (error \"Can't join an array to a scalar number!\"))\n  #?(:clj Object :cljs object)\n  (join-along [m a dim]\n    (mp/coerce-param m\n      (let [dim (long dim)]\n        (cond\n          (== dim 0)\n            (mp/join m a)\n          :else\n            (let [ddim (dec dim)]\n              (mapv #(mp/join-along %1 %2 ddim)\n                   (mp/get-major-slice-seq m)\n                   (mp/get-major-slice-seq a))))))))\n\n(extend-protocol mp/PSubVector\n  nil\n    (subvector [m start length]\n      (error \"Can't take subvector of nil\"))\n  #?(:clj Number :cljs number)\n    (subvector [m start length]\n      (error \"Can't take subvector of a scalar number\"))\n  #?(:clj Object :cljs object)\n    (subvector [m start length]\n      (mp/subvector (wrap/wrap-nd m) start length)))\n\n(extend-protocol mp/PSubMatrix\n  nil\n    (submatrix [m index-ranges]\n      (if (seq index-ranges)\n        (error \"Can't take partial submatrix of nil\")\n        m))\n  #?(:clj Number :cljs number)\n    (submatrix [m index-ranges]\n      (if (seq index-ranges)\n        (error \"Can't take partial submatrix of a scalar number\")\n        m))\n  #?(:clj Object :cljs object)\n    (submatrix [m index-ranges]\n      (wrap/wrap-submatrix m index-ranges)))\n\n(extend-protocol mp/PBroadcast\n  nil\n    (broadcast [m new-shape]\n      (wrap/wrap-broadcast m new-shape))\n; TODO: efficient way to use current implementation?\n;  Number\n;    (broadcast [m new-shape]\n;      (if (seq new-shape)\n;        (mp/broadcast ())\n;        m))\n  #?(:cljs number)\n  #?(:cljs (broadcast [m new-shape]\n                      (wrap/wrap-broadcast m new-shape)))\n\n  #?(:clj Object :cljs object)\n    (broadcast [m new-shape]\n      (let [nshape new-shape\n            mshape (mp/get-shape m)\n            mdims (count mshape)\n            ndims (count nshape)]\n        (cond\n          (and (== mdims ndims) (u/same-shape-object? nshape mshape)) m\n          ;(and (> ndims mdims) (== mshape (drop (- ndims mdims) nshape)))\n          ;  (let [rep (nth nshape (- ndims mdims 1))]\n          ;    (mp/broadcast (vec (repeat rep m)) new-shape))\n          :else (wrap/wrap-broadcast m new-shape)))))\n\n(extend-protocol mp/PBroadcastLike\n  nil\n    (broadcast-like [m a]\n      (wrap/wrap-broadcast a (mp/get-shape m)))\n  #?(:clj Object :cljs object)\n    (broadcast-like [m a]\n      (let [sm (mp/get-shape m) sa (mp/get-shape a)]\n        (if (u/same-shape-object? sm sa)\n          a\n          (mp/broadcast a sm)))))\n\n(extend-protocol mp/PBroadcastCoerce\n  nil\n    (broadcast-coerce [m a]\n      (mp/coerce-param m (mp/broadcast-like m a)))\n  #?(:clj Object :cljs object)\n    (broadcast-coerce [m a]\n      (mp/coerce-param m (mp/broadcast-like m a))))\n\n(extend-protocol mp/PPack\n  nil\n    (pack [m]\n      nil)\n  #?(:clj Object :cljs object)\n    (pack [m]\n      m))\n\n;; attempt conversion to nested vectors\n(extend-protocol mp/PConversion\n  nil\n    (convert-to-nested-vectors [m]\n      nil)\n  #?(:clj Number :cljs number)\n    (convert-to-nested-vectors [m]\n      ;; we accept a scalar as a \"nested vector\" for these purposes\n      m)\n  #?(:clj Object :cljs object)\n    (convert-to-nested-vectors [m]\n      (let [dims (long (mp/dimensionality m))]\n        (cond\n          (== dims 0)\n              (mp/get-0d m)\n          (== 1 dims)\n            (if (or (seq? m) (sequential? m))\n              (mapv mp/get-0d m)\n              (let [n (long (mp/dimension-count m 0))]\n                (loop [i 0 res []]\n                  (if (< i n)\n                    (recur (inc i) (conj res (mp/get-1d m i)))\n                    res))))\n          (sequential? m)\n              (mapv mp/convert-to-nested-vectors m)\n          (array? m)\n              (mapv mp/convert-to-nested-vectors (mp/get-major-slice-seq m))\n          (seq? m)\n              (mapv mp/convert-to-nested-vectors m)\n          :default\n              (error \"Can't work out how to convert to nested vectors: \" (#?(:clj class :cljs type) m) \" = \" m)))))\n\n(extend-protocol mp/PRowColMatrix\n  nil\n    (column-matrix [m data] (error \"Can't create a column matrix from nil\"))\n    (row-matrix [m data] (error \"Can't create a column matrix from nil\"))\n  #?(:clj Object :cljs object)\n    (column-matrix [m data]\n      (if (== 1 (long (mp/dimensionality data)))\n        (mp/coerce-param m (mapv vector (mp/element-seq data)))\n        (error \"Can't create a column matrix: input must be 1D vector\")))\n    (row-matrix [m data]\n      (if (== 1 (long (mp/dimensionality data)))\n        (mp/coerce-param m (vector data)) ;; i.e. just wrap in a\n        (error \"Can't create a row matrix: input must be 1D vector\"))))\n\n(extend-protocol mp/PVectorView\n  nil\n    (as-vector [m]\n      [nil])\n  #?(:clj Number :cljs number)\n    (as-vector [m]\n      [m])\n  #?(:clj Object :cljs object)\n    (as-vector [m]\n      (let [dims (long (mp/dimensionality m))]\n        (cond\n          (== dims 0)\n            (mp/broadcast (wrap/wrap-nd m) [1])\n          (== dims 1)\n            m\n          (not (mp/is-mutable? m))\n            ;; if not mutable, coercion to a vector works as a view\n            (mp/to-vector m)\n          :else\n            ;; We return nil for this: can't provide a mutable vector view\n            nil))))\n\n(extend-protocol mp/PVectorisable\n  nil\n    (to-vector [m]\n      [nil])\n  #?(:clj Number :cljs number)\n    (to-vector [m]\n      [m])\n  #?(:clj Object :cljs object)\n    (to-vector [m]\n      (let [dims (long (mp/dimensionality m))]\n        (cond\n          (== 0 dims)\n            [(mp/get-0d m)]\n          (mp/is-vector? m)\n            (mp/clone m)\n          :else\n            (vec (mp/element-seq m))))))\n\n(extend-protocol mp/PReshaping\n  nil\n    (reshape [m shape]\n      (mp/reshape [nil] shape))\n  #?(:clj Number :cljs number)\n    (reshape [m shape]\n      (mp/reshape [m] shape))\n  #?(:clj Object :cljs object)\n    (reshape [m shape]\n      (if (= (mp/get-shape m) shape) ;; Short circuit if already the desired shape\n        m\n        (let [gv (mp/generic-value m) ;; generic value for array padding. Typically nil or zero\n              es (concat (mp/element-seq m) (repeat gv))\n              partition-shape (fn partition-shape [es shape]\n                                (if-let [s (seq shape)]\n                                  (let [ns (next s)\n                                        plen (reduce * 1 ns)]\n                                    (map #(partition-shape % ns) (partition plen es)))\n                                  (first es)))]\n          (if-let [shape (seq shape)]\n            (let [fs (long (first shape))\n                  parts (partition-shape es shape)]\n              (or\n                (mp/construct-matrix m (take fs parts))\n                (mp/construct-matrix [] (take fs parts))))\n            (first es))))))\n\n(extend-protocol mp/PCoercion\n  nil\n    (coerce-param [m param]\n      param)\n  #?(:clj Number :cljs number)\n    (coerce-param [m param]\n      param)\n  #?(:clj Object :cljs object)\n    (coerce-param [m param]\n      ;; NOTE: leave param unchanged if coercion not possible (probably an invalid shape for implementation)\n      (let [param (if (instance? ISeq param) (mp/convert-to-nested-vectors param) param)] ;; ISeqs can be slow, so convert to vector first\n        (or (mp/construct-matrix m param)\n           param))))\n\n(extend-protocol mp/PExponent\n  #?(:clj Number :cljs number)\n  (element-pow [m exponent]\n    #?(:clj\n        (if (array? exponent)\n          (mp/element-map exponent #(Math/pow (.doubleValue m) (.doubleValue ^Number %)))\n          (Math/pow (.doubleValue m) (double exponent)))\n       :cljs\n        (if (array? exponent)\n          (mp/element-map exponent #(Math/pow m %))\n          (Math/pow m exponent))))\n  #?(:clj Object :cljs object)\n  (element-pow [m exponent]\n    #?(:clj\n        (if (array? exponent)\n          (mp/element-map m #(Math/pow (.doubleValue ^Number %1) (.doubleValue ^Number %2)) exponent)\n          (mp/element-map m #(Math/pow (.doubleValue ^Number %) exponent)))\n       :cljs\n        (if (array? exponent)\n          (mp/element-map m #(Math/pow %1 %2) exponent)\n          (mp/element-map m #(Math/pow % exponent))))))\n\n(extend-protocol mp/PSquare\n  #?(:clj Number :cljs number)\n   (square [m] (* m m)) ;; can't eliminate boxing warning, may be any numerical type\n  #?(:clj Object :cljs object)\n   (square [m] (mp/element-multiply m m)))\n\n(extend-protocol mp/PLogistic\n  #?(:clj Number :cljs number)\n    (logistic [m]\n      (let [e-t (Math/exp (- (double m)))]\n        (/ 1.0 (+ 1.0 e-t))))\n  #?(:clj Object :cljs object)\n    (logistic [m]\n      (mp/element-map m logistic-fn)))\n\n(extend-protocol mp/PLogisticMutable\n  #?(:clj Object :cljs object)\n    (logistic! [m]\n      (mp/element-map! m logistic-fn)))\n\n(extend-protocol mp/PSoftplus\n  #?(:clj Number :cljs number)\n    (softplus [m]\n      (let [et (Math/exp (double m))]\n        (Math/log (+ 1.0 et))))\n  #?(:clj Object :cljs object)\n    (softplus [m]\n      (mp/element-map m softplus-fn)))\n\n(extend-protocol mp/PSoftmax\n  #?(:clj Object :cljs object)\n    (softmax [m]\n      (let [em (mp/exp m)]\n        (mp/element-divide em (mp/element-sum em)))))\n\n(extend-protocol mp/PSoftmaxMutable\n  #?(:clj Object :cljs object)\n    (softmax! [m]\n      (mp/exp! m)\n      (mp/element-divide! m (mp/element-sum m))\n      m))\n\n(extend-protocol mp/PSoftplusMutable\n  #?(:clj Object :cljs object)\n    (softplus! [m]\n      (mp/element-map! m softplus-fn)))\n\n(extend-protocol mp/PReLU\n  #?(:clj Number :cljs number)\n    (relu [m]\n      (Math/max 0.0 (double m)))\n  #?(:clj Object :cljs object)\n    (relu [m]\n      (mp/element-map m relu-fn)))\n\n(extend-protocol mp/PReLUMutable\n  #?(:clj Object :cljs object)\n    (relu! [m]\n      (mp/element-map! m relu-fn)))\n\n\n#?(:clj  (do\n\n(defmacro def-PMathsFunctions\n  [clj?]\n `(extend-protocol mp/PMathsFunctions\n    ~(if clj? 'Number 'number)\n    ~@(map (fn [[name func cljs-func]]\n             (let [func (if (and cljs-func (not clj?)) cljs-func func)]\n               `(~name [~'m] (~'double (~func (~'double ~'m))))))\n        `~mops/maths-ops)\n\n    ~(if clj? 'Object 'object)\n    ~@(map (fn [[name func cljs-func]]\n             (let [func (if (and cljs-func (not clj?)) cljs-func func)]\n               `(~name [~'m] (mp/element-map ~'m #(~'double (~func (~'double %)))))))\n        `~mops/maths-ops)\n\n    ~@(when (not clj?)\n      `[~'array\n        ~@(map (fn [[name func cljs-func]]\n                 (let [func (if (and cljs-func (not clj?)) cljs-func func)]\n                   `(~name [~'m] (mp/element-map ~'m #(~'double (~func (~'double %)))))))\n               `~mops/maths-ops)\n       ]))\n )\n\n(defmacro def-PMathsFunctionsMutable\n  [clj?]\n  `(extend-protocol mp/PMathsFunctionsMutable\n    ~(if clj? 'Number 'number)\n    ~@(map (fn [[name func cljs-func]]\n             (let [func (if (and cljs-func (not clj?)) cljs-func func)]\n               `(~(symbol (str name \"!\")) [~'m] (error \"Number is not mutable!\"))))\n        `~mops/maths-ops)\n\n    ~(if clj? 'Object 'object)\n    ~@(map (fn [[name func cljs-func]]\n             (let [func (if (and cljs-func (not clj?)) cljs-func func)]\n               `(~(symbol (str name \"!\")) [~'m] (mp/element-map! ~'m #(~'double (~func (~'double %)))))))\n        `~mops/maths-ops)\n\n    ~@(when (not clj?)\n      `[~'array\n        ~@(map (fn [[name func cljs-func]]\n                 (let [func (if (and cljs-func (not clj?)) cljs-func func)]\n                   `(~(symbol (str name \"!\")) [~'m] (mp/element-map! ~'m #(~'double (~func (~'double %)))))))\n               `~mops/maths-ops)\n      ])\n    ))\n))\n\n(def-PMathsFunctions #?(:clj true :cljs false))\n(def-PMathsFunctionsMutable #?(:clj true :cljs false))\n\n(extend-protocol mp/PMatrixSubComponents\n  #?(:clj Object :cljs object)\n    (main-diagonal [m]\n      (let [sh (mp/get-shape m)\n            rank (count sh)\n            dims (apply min sh)\n            diag-vals (for [i (range dims)] (mp/get-nd m (repeat rank i)))]\n        (imp/construct m diag-vals))))\n\n(extend-protocol mp/PSpecialisedConstructors\n  #?(:clj Object :cljs object)\n    (identity-matrix [m dims]\n      (mp/diagonal-matrix m (repeat dims 1.0)))\n    (diagonal-matrix [m diagonal-values]\n      (let [dims (count diagonal-values)\n            diagonal-values (mp/convert-to-nested-vectors diagonal-values)\n            zs (vec (repeat dims 0.0))\n            dm (vec (for [i (range dims)]\n                 (assoc zs i (nth diagonal-values i))))]\n        (mp/coerce-param m dm))))\n\n(extend-protocol mp/PPermutationMatrix\n  #?(:clj Object :cljs object)\n    (permutation-matrix [m permutation]\n      (let [v (mp/convert-to-nested-vectors permutation)\n            n (count v)\n            r (mp/new-matrix m n n)\n            r (if (mp/is-mutable? r) r (construct-mutable-matrix r))]\n        (dotimes [i n]\n          (mp/set-2d! r i (v i) 1.0))\n        r)))\n\n;; TODO: can this implementation be improved?\n(extend-protocol mp/PBlockDiagonalMatrix\n  #?(:clj Object :cljs object)\n    (block-diagonal-matrix [m blocks]\n      (let [aux (fn aux [acc blocks]\n                  (if (empty? blocks)\n                      acc\n                      (let [acc-dim (long (mp/dimension-count acc 0))\n                            new-block (blocks 0)\n                            new-block-dim (long (mp/dimension-count new-block 0))\n                            new-dim (+ acc-dim new-block-dim)\n                            dm (vec (for [i (range new-dim)]\n                                         (if (< i acc-dim)\n                                             (into [] (concat (acc i)\n                                                              (mp/new-vector [] new-block-dim)))\n                                             (into [] (concat (mp/new-vector [] acc-dim)\n                                                              (new-block (- i acc-dim)))))))]\n                            (aux dm (subvec blocks 1)))))]\n        (aux [] blocks))))\n\n(extend-protocol mp/PMatrixPredicates\n  #?(:clj Object :cljs object)\n  (identity-matrix? [m]\n    (let [rc (long (mp/dimension-count m 0))\n          cc (long (mp/dimension-count m 1))]\n      (if (and (== (long (mp/dimensionality m)) 2) (== rc cc))\n        (loop [i (long 0)]\n          (if (< i rc)\n            (if (loop [j (long 0)]\n                  (if (< j cc)\n                    (let [elem (mp/get-2d m i j)]\n                      (if (number? elem)\n                        (if (== i j)\n                          (if (== (double elem) 1.0) (recur (inc j)) false)\n                          (if (zero? elem) (recur (inc j)) false))\n                        false))\n                    true))\n              (recur (inc i))\n              false)\n            true))\n        false)))\n  (zero-matrix? [m]\n    (every? #(and (number? %) (zero? %)) (mp/element-seq m)))\n  (symmetric? [m]\n    (case (long (mp/dimensionality m))\n      0 true\n      1 true\n      2 (and (square? m) (symmetric-matrix-entries? m))\n      (= m (mp/transpose m))))\n  nil\n  (identity-matrix? [m] false)\n  (zero-matrix? [m] false)\n  (symmetric? [m] true))\n\n;; ======================================================\n;; default implementation for higher-level array indexing\n\n(extend-protocol mp/PIndicesAccess\n  #?(:clj Object :cljs object)\n  (get-indices [a indices]\n    (let [vals (map #(mp/get-nd a %1) (map mp/element-seq indices))] ;; TODO: use index coerce?\n      (or\n        (when (array? a) (mp/construct-matrix a vals))\n        (mp/construct-matrix [] vals)))))\n\n(extend-protocol mp/PIndicesSetting\n  #?(:clj Object :cljs object)\n  (set-indices [a indices values]\n    (let [indices (map mp/element-seq indices)\n          values (mp/element-seq (mp/broadcast values [(count indices)]))]\n      (loop [a a [id & idx] indices [v & vs] values]\n        (if id (recur (mp/set-nd a id v) idx vs) a))))\n  (set-indices! [a indices values]\n    (let [indices (map mp/element-seq indices)\n          values (mp/element-seq (mp/broadcast values [(count indices)]))]\n      (loop [[id & idx] indices [v & vs] values]\n        (when id\n          (mp/set-nd! a id v) (recur idx vs))))))\n\n(extend-protocol mp/PNonZeroIndices\n  #?(:clj Object :cljs object)\n  (non-zero-indices\n    [m]\n    (if (mp/is-vector? m)\n      (vec (for [i (range (mp/dimension-count m 0))\n                    :when (not (zero? (mp/get-1d m i)))]\n              i))\n      (vec (for [i (range (mp/dimension-count m 0))]\n              (mp/non-zero-indices (mp/get-major-slice m i)))))))\n\n;; TODO: proper generic implementations\n(extend-protocol mp/PMatrixTypes\n  #?(:clj Object :cljs object)\n  (diagonal? [m]\n    (if (= (long (mp/dimensionality m)) 2)\n      (let [[^long mrows ^long mcols] (mp/get-shape m)]\n        (->> (mp/element-seq m)\n             (map (fn [^long i elem] (vector (quot i mcols) (rem i mcols) elem))\n                  (range (* mrows mcols)))\n             (every? (fn [[^long i ^long j v]]\n                       (cond\n                         (= i j) true\n                         (and (not= i j) (== v 0)) true\n                         :else false)))))\n      false))\n  (upper-triangular? [m]\n    (if (square? m)\n      (->> (mp/get-slice-seq m 0)\n           (map vector (range))\n           (mapcat (fn [[idx xs]] (take idx xs)))\n           (every? zero?))\n      false))\n  (lower-triangular? [m]\n    (if (square? m)\n      (->> (mp/get-slice-seq m 0)\n           (map vector (range))\n           (mapcat (fn [[^long idx xs]] (drop (inc idx) xs)))\n           (every? zero?))\n      false))\n  (positive-definite? [m]\n    (error \"TODO: Not yet implemented\")\n    (mp/positive-definite? (mp/convert-to-nested-vectors m)))\n  (positive-semidefinite? [m]\n    (error \"TODO: Not yet implemented\"))\n  (orthogonal? [m eps]\n    (and (square? m)\n         (mp/matrix-equals-epsilon\n           (mp/matrix-multiply m (mp/transpose m))\n           (mp/identity-matrix m (mp/dimension-count m 0))\n           eps))))\n\n(extend-protocol mp/PSelect\n  nil\n    (select [a area]\n      (when (seq area) (error \"Trying to select on nil with selection: \" area))\n      nil)\n  #?(:clj Number :cljs number)\n    (select [a area]\n      (when (seq area) (error \"Trying to select on numerical scalar with selection: \" area))\n      a)\n  #?(:clj Object :cljs object)\n    (select [a area]\n      (or\n        (mp/select-view a area) ;; use a view if supported by the implementation\n        (wrap/wrap-selection a area))))\n\n(extend-protocol mp/PSelectView\n  nil\n    (select-view [a area]\n      (when (seq area) (error \"Trying to select on nil with selection: \" area))\n      nil)  #?(:clj Object :cljs object)\n  #?(:clj Number :cljs number)\n    (select-view [a area]\n      (when (seq area) (error \"Trying to select on numerical scalar with selection: \" area))\n      a)\n  #?(:clj Object :cljs object)\n    (select-view [a area]\n      (wrap/wrap-selection a area)))\n\n(extend-protocol mp/PSelect\n  #?(:clj Number :cljs number)\n  (select [a area]\n    (if (empty? area)\n      a\n      (error \"Non empty area argument in select, called on Number \" a))))\n\n(defn- area-indices [area]\n  (reduce (fn [io in]\n            (for [a in b io]\n              (cons a b))) (mapv vector (last area)) (rest (reverse area))))\n\n(defn- indices [vals]\n  (area-indices (mapv range (mp/get-shape vals))))\n\n\n(extend-protocol mp/PSetSelection\n  #?(:clj Object :cljs object)\n  (set-selection [m area vals]\n    (let [;; create a mutable clone\n          mm (or (mp/mutable-matrix m)\n                (construct-mutable-matrix m))\n          v (mp/select-view m area)]\n      (mp/assign! v vals)\n      mm)))\n\n(extend-protocol mp/PIndexImplementation\n  #?(:clj Object :cljs object)\n\t  (index? [m]\n      false) ;; we default to saying something isn't an index, unless it is explicitly supported\n\t  (index-to-longs [m]\n      (long-array (mp/element-seq m)))\n\t  (index-to-ints [m]\n      (int-array (mp/element-seq m)))\n\t  (index-from-longs [m xs]\n      (long-array xs))\n\t  (index-from-ints [m xs]\n      (int-array xs))\n\t  (index-coerce [m a]\n      (mp/index-to-longs m)))\n\n;; =======================================================\n;; default label implementation\n\n(extend-protocol mp/PDimensionLabels\n  #?(:clj Object :cljs object)\n    (label [m dim i]\n      (if (<= 0 (long i) (dec (long (mp/dimension-count m dim))))\n        nil\n        (error \"Dimension index out of range: \" i)))\n    (labels [m dim]\n      (if (<= 0 (long dim) (dec (long (mp/dimensionality m))))\n        nil\n        (error \"Dimension out of range: \" dim))))\n\n(extend-protocol mp/PColumnNames\n  #?(:clj Object :cljs object)\n    (column-name [m i]\n      (let [dim (dec (long (mp/dimensionality m)))]\n        (mp/label m dim i)))\n    (column-names [m]\n      (let [dim (dec (long (mp/dimensionality m)))]\n        (mp/labels m dim))))\n\n\n;; =======================================================\n;; default linear algebra implementations\n\n(extend-protocol mp/PNorm\n  #?(:clj Object :cljs object)\n  (norm [m p]\n    (cond\n      (= p #?(:clj Double/POSITIVE_INFINITY :cljs js/Number.POSITIVE_INFINITY)) (mp/element-max (mp/element-map m mops/abs))\n      (number? p) (let [sum-of-element-powers (mp/element-sum (mp/element-pow (mp/element-map m mops/abs) p))]\n                    (condp == p\n                      1 sum-of-element-powers\n                      2 (Math/sqrt sum-of-element-powers)\n                      3 (Math/cbrt sum-of-element-powers)\n                      (Math/pow sum-of-element-powers (/ 1.0 p))))\n      :else (error \"p must be a number\"))))\n\n;; QR decomposition utility functions\n\n(defn compute-q [m ^doubles qr-data mcols mrows min-len\n                 ^doubles us ^doubles vs ^doubles gammas]\n  (let [q ^doubles (mp/to-double-array (mp/identity-matrix [] mrows))\n        mcols (long mcols)\n        mrows (long mrows)\n        min-len (long min-len)]\n    (c-for [i (dec min-len) (> i -1) (dec i)]\n      (let [gamma (aget gammas i)]\n        (aset us i 1.0)\n        (c-for [j (inc i) (< j mrows) (inc j)]\n          (aset us j\n                (aget qr-data\n                      (+ (* j mcols)\n                         i))))\n        (c-for [j i (< j mrows) (inc j)]\n          (aset vs j\n                (* (aget us i)\n                   (aget q\n                         (+ (* i mrows)\n                            j)))))\n        (c-for [j (inc i) (< j mrows) (inc j)]\n          (let [u (aget us j)]\n            (c-for [k i (< k mrows) (inc k)]\n              (let [q-idx (+ (* j mrows)\n                             i (- k i))]\n                (aset vs k (+ (aget vs k)\n                              (* u\n                                 (aget q q-idx))))))))\n        (c-for [j i (< j mrows) (inc j)]\n          (aset vs j (* (aget vs j)\n                        gamma)))\n\n        (c-for [j i (< j mrows) (inc j)]\n          (let [u (aget us j)]\n            (c-for [k i (< k mrows) (inc k)]\n              (let [qr-idx (+ (* j mrows)\n                              i (- k i))]\n                (aset q qr-idx (- (aget q qr-idx)\n                                  (* u (aget vs k))))))))))\n    (mp/compute-matrix m [mrows mrows]\n                       (fn [^long i ^long j]\n                         (aget q (+ (* i mrows) j))))))\n\n(defn compute-r [m ^doubles data mcols mrows min-len compact?]\n  (let [mrows (long mrows)\n        mcols (long mcols)\n        min-len (long min-len)\n        cm (mp/compute-matrix\n              m [mrows mcols]\n              (fn [^long i ^long j]\n                (if (and (< i min-len)\n                         (>= j i)\n                         (< j mcols))\n                  (aget data (+ (* i mcols) j))\n                  0)))]\n    (if compact?\n      (let [slcs (mp/get-major-slice-seq cm)\n            non-zero-rows (long (reduce\n                            (fn [^long cnt slice] (if (every? zero? slice) (inc cnt) cnt))\n                            0\n                            slcs))]\n        ;; TODO: is this broken? Looks like mcols and mrows in wrong order?\n        (mp/reshape cm [mcols (- mrows non-zero-rows)]))\n      cm)))\n\n(defn householder-qr [^doubles qr-data idx mcols\n                      mrows ^doubles us ^doubles gammas]\n  (let [idx (long idx)\n        mcols (long mcols)\n        mrows (long mrows)]\n    (loop [qr-idx (long (+ idx (* idx mcols)))\n           i (long idx)]\n      (when (< i mrows)\n        (aset us i (aget qr-data qr-idx))\n        (recur (+ qr-idx mcols)\n               (inc i))))\n    (let [max_ (double (apply max (map #(Math/abs (double %))\n                         (mp/subvector us idx (- mrows idx)))))]\n      (if (= max_ 0.0)\n        {:error true}\n        (let [_ (c-for [i idx (< i mrows) (inc i)]\n                  (aset us i (/ (aget us i) max_)))\n              tau (->> (mp/subvector us idx (- mrows idx))\n                       (reduce (fn [^double acc ^double x] (+ acc (* x x))) 0.0)\n                       (Math/sqrt))\n              u-idx (aget us idx)\n              tau (if (neg? u-idx) (- tau) tau)\n              u-0 (+ u-idx tau)\n              gamma (/ u-0 tau)\n              tau (* tau max_)]\n          (aset gammas idx gamma)\n          (c-for [i (inc idx) (< i mrows) (inc i)]\n            (aset us i (/ (aget us i) u-0)))\n          (aset us idx 1.0)\n          {:gamma gamma\n           :gammas gammas\n           :us us\n           :tau tau\n           :error false})))))\n\n(defn update-qr [^doubles qr-data idx mcols mrows ^doubles vs\n                 ^doubles us gamma tau]\n  (let [idx (long idx)\n        mrows (long mrows)\n        mcols (long mcols)\n        u (aget us idx)\n        idx+1 (inc idx)\n        gamma (double gamma)\n        tau (double tau)]\n    (c-for [i idx+1 (< i mcols) (inc i)]\n      (aset vs i (aget qr-data\n                       (+ i\n                          (* idx mcols)))))\n    (c-for [i idx+1 (< i mrows) (inc i)]\n      (let [qr-idx (+ idx+1\n                      (* i mcols))]\n        (c-for [j idx+1 (< j mcols) (inc j)]\n          (aset vs j\n                (+ (aget vs j)\n                   (* (aget us i)\n                      (aget qr-data (+ qr-idx\n                                       (- j idx+1)))))))))\n    (c-for [i idx+1 (< i mcols) (inc i)]\n      (aset vs i (* (aget vs i)\n                    gamma)))\n\n    (c-for [i idx (< i mrows) (inc i)]\n      (let [u (aget us i)]\n        (c-for [j idx+1 (< j mcols) (inc j)]\n          (let [qr-idx (+ (* i mcols)\n                          idx+1\n                          (- j idx+1))]\n            (aset qr-data qr-idx\n                  (- (aget qr-data qr-idx) (* u (aget vs j))))))))\n\n    (when (< idx mcols)\n      (aset qr-data (+ idx (* idx mcols)) (double (- tau))))\n\n    (c-for [i idx+1 (< i mrows) (inc i)]\n      (aset qr-data\n            (+ idx (* i mcols))\n            (aget us i)))\n    {:qr-data qr-data\n     :vs vs}))\n\n\n(extend-protocol mp/PQRDecomposition\n  #?(:clj Object :cljs object)\n  (qr [m options]\n    (let [[mrows mcols] (mp/get-shape m)\n          mrows (long mrows)\n          mcols (long mcols)\n          min-len (min mcols mrows)\n          max-len (max mcols mrows)]\n      (loop [qr-data (mp/to-double-array m)\n             vs (double-array max-len)\n             us (double-array max-len)\n             gammas (double-array min-len)\n             gamma 0.0\n             tau 0.0\n             i 0]\n        (if (< i min-len)\n          (let [{:keys [us gamma gammas tau error]}\n                (householder-qr\n                 qr-data i mcols\n                 mrows us gammas)]\n            (when-not error\n              (let [{:keys [qr-data vs]}\n                    (update-qr qr-data i mcols mrows\n                               vs us gamma tau)]\n                (recur qr-data vs us gammas\n                       (double gamma) (double tau) (inc i)))))\n          (->>\n           (select-keys\n            {:Q #(compute-q m qr-data mcols mrows\n                            min-len us vs gammas)\n             :R #(compute-r m qr-data mcols mrows min-len (:compact options))}\n            (:return options))\n           (map (fn [[k v]] [k (v)]))\n           (into {})))))))\n\n;; temp var to prevent recursive coercion if implementation does not support liear algebra operation\n(extend-protocol mp/PCholeskyDecomposition\n  #?(:clj Object :cljs object)\n  (cholesky [m options]\n    (try-current-implementation m (mp/cholesky m options))))\n\n(extend-protocol mp/PLUDecomposition\n  #?(:clj Object :cljs object)\n  (lu [m options]\n    (try-current-implementation m (mp/lu m options))))\n\n(extend-protocol mp/PSVDDecomposition\n  #?(:clj Object :cljs object)\n  (svd [m options]\n    (try-current-implementation m (mp/svd m options))))\n\n(extend-protocol mp/PEigenDecomposition\n  #?(:clj Object :cljs object)\n  (eigen [m options]\n    (try-current-implementation m (mp/eigen m options))))\n\n(extend-protocol mp/PSolveLinear\n  #?(:clj Object :cljs object)\n  (solve [a b]\n    (try-current-implementation a (mp/solve a b))))\n\n(extend-protocol mp/PLeastSquares\n  #?(:clj Object :cljs object)\n  (least-squares [a b]\n    (try-current-implementation a (mp/least-squares a b))))\n\n"]}