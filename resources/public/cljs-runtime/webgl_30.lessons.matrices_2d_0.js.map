{"version":3,"sources":["webgl_30/lessons/matrices_2d_0.cljs"],"mappings":"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","names":["webgl-30.lessons.matrices-2d_0/initial-state","js/webgl-30","js/webgl-30.lessons","js/webgl-30.lessons.matrices-2d_0","js/webgl-30.lessons.matrices-2d_0.state-atom","webgl-30.lessons.matrices-2d_0/state-atom","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/deref","cljs.core/reset!","webgl-30.lessons.matrices-2d_0/fragment-shader","webgl-30.lessons.matrices-2d_0/vertex-shader","p__26066","map__26069","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","webgl-30.lessons.matrices-2d_0/multiply-matrices","rect","map__26080","translation","angle-rad","scale","translation-matrix","webgl-30.math/translation-2d-matrix","rotation-matrix","webgl-30.math/rotation-2d-matrix","scale-matrix","webgl-30.math/scaling-2d-matrix","webgl-30.math/matrix-multiply-2d","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","webgl-30.lessons.matrices-2d_0/format","seq26092","G__26094","cljs.core/first","cljs.core/next","self__4776__auto__","f","xs","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","cljs.pprint/cl-format","webgl-30.lessons.matrices-2d_0/draw!","timestamp","map__26103","state","cljs.core/assoc-in","webgl-30.webgl/draw-scene!","webgl-30.lessons.matrices-2d_0/setup!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","p__26118","map__26120","gl","program","webgl-30.webgl/link-shaders!","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","webgl-30.webgl/attribute","js/Float32Array","webgl-30.shapes/f-shape-2d","webgl-30.lessons.matrices-2d_0/lesson","webgl-30.core/get-filename","canvas-id","webgl-30.component/webgl-canvas","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","webgl-30.webgl/get-context","js/requestAnimationFrame","webgl-30.component/slider","val","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","webgl_30.lessons.matrices_2d_0.format.cljs$core$IFn$_invoke$arity$variadic","webgl-30.math/deg->rad","webgl-30.math/rad->deg"],"sourcesContent":["(ns webgl-30.lessons.matrices-2d_0\n  (:require [reagent.core :as r]\n            [webgl-30.math :as m]\n            [webgl-30.webgl :as webgl]\n            [webgl-30.shapes :as shapes]\n            [webgl-30.core :as c]\n            [webgl-30.component :refer [webgl-canvas slider]]))\n\n(def initial-state {:gl   nil\n                    :rect {:translation [0 0]\n                           :rotation    [0 1]\n                           :scale       [1 1]\n                           :angle-rad   0\n                           :width       100\n                           :height      30\n                           :color       [0.3 0.3 0.3 1]}})\n(defonce state-atom (r/atom nil))\n(when (nil? @state-atom)\n  (reset! state-atom initial-state))\n\n(def fragment-shader\n  \"precision mediump float;\n   uniform vec4 u_color;\n   void main() {\n       gl_FragColor = u_color;\n   }\")\n\n(def vertex-shader\n  \"attribute vec2 a_position;\n\n  uniform vec2 u_resolution;\n  uniform mat3 u_matrix;\n\n  void main() {\n       vec2 position = (u_matrix * vec3(a_position, 1)).xy;\n\n       // convert the position from pixels to 0.0 to 1.0\n       vec2 zeroToOne = position / u_resolution;\n\n       // convert from 0->1 to 0->2\n       vec2 zeroToTwo = zeroToOne * 2.0;\n\n       // convert from 0->2 to -1->+1 (clip space)\n       vec2 clipSpace = zeroToTwo - 1.0;\n\n       gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1); // * vec(1, -1) flips y so it's top-left corner.\n  }\")\n\n(defn multiply-matrices\n  [{:keys [rect]}]\n  (let [{:keys [translation angle-rad scale]} rect\n        translation-matrix (m/translation-2d-matrix translation)\n        rotation-matrix (m/rotation-2d-matrix angle-rad)\n        scale-matrix (m/scaling-2d-matrix scale)]\n    (-> (m/matrix-multiply-2d translation-matrix rotation-matrix)\n        (m/matrix-multiply-2d scale-matrix))))\n\n(defn format\n  [f & xs]\n  (apply cljs.pprint/cl-format nil f xs))\n\n(defn draw!\n  [timestamp]\n  (let [{:keys [rect] :as state} @state-atom]\n    (-> (assoc-in state [:objects-to-draw :my-f :uniforms :u_matrix :values] (multiply-matrices state))\n        webgl/draw-scene!)))\n\n(defn setup!\n  []\n  (-> (swap! state-atom (fn [{:keys [gl rect] :as state}]\n                          (let [program (webgl/link-shaders! gl {:fs fragment-shader :vs vertex-shader})]\n                            (assoc state :objects-to-draw\n                                         {:my-f {:program    program\n                                                 :attributes {:a_position (webgl/attribute gl program {:name \"a_position\"\n                                                                                                       :size 2\n                                                                                                       :type (.-FLOAT gl)\n                                                                                                       :data (js/Float32Array. shapes/f-shape-2d)})}\n                                                 :uniforms   {:u_resolution {:name   \"u_resolution\"\n                                                                             :type   \"uniform2f\"\n                                                                             :values [(aget gl \"canvas\" \"width\") (aget gl \"canvas\" \"height\")]}\n                                                              :u_color      {:name   \"u_color\"\n                                                                             :type   \"uniform4fv\"\n                                                                             :values (:color rect)}\n                                                              :u_matrix     {:name      \"u_matrix\"\n                                                                             :type      \"uniformMatrix3fv\"\n                                                                             :transpose false\n                                                                             :values    (multiply-matrices @state-atom)\n                                                                             }\n\n                                                              }\n                                                 :element    {:draw-type (.-TRIANGLES gl)\n                                                              :offset    0\n                                                              :count     18}}}))))))\n\n(def ^:export lesson\n  {:title           (fn []\n                      [:div\n                       [:h1 {:style {:font-family \"monospace\"}}\n                        \"Lesson - WebGL 2D Matrices\"]\n                       [:h4 {:style {:font-family \"monospace\"}}\n                        \"Matrix\"]])\n   :source          (c/get-filename #'state-atom)\n   :tutorial-source \"webgl-2d-matrices.html\"\n   :start           (fn []\n                      (let [canvas-id \"translation\"]\n                        [:div {:style {:display        \"flex\"\n                                       :flex-direction \"row\"}}\n                         [webgl-canvas {:height   400\n                                        :width    400\n                                        :id       canvas-id\n                                        :on-mount (fn []\n                                                    (do\n                                                      (swap! state-atom assoc :gl (webgl/get-context canvas-id))\n                                                      (setup!)\n                                                      (js/requestAnimationFrame draw!)))}]\n                         [:div {:style {:margin-left \"30px\"}}\n                          [:div {:style {:display        \"flex\"\n                                         :flex-direction \"row\"}}\n                           [:span {:style {:color        \"white\"\n                                           :margin-right \"10px\"}} \"x\"]\n                           [slider {:on-change (fn [val]\n                                                 (swap! state-atom assoc-in [:rect :translation] [val (get-in @state-atom [:rect :translation 1])])\n                                                 (js/requestAnimationFrame draw!))\n                                    :value     (get-in @state-atom [:rect :translation 0])\n                                    :min       0\n                                    :max       400\n                                    :id        \"x-slider\"}]\n                           [:span {:style {:color        \"white\"\n                                           :margin-right \"10px\"}} (get-in @state-atom [:rect :x])]]\n                          [:div {:style {:display        \"flex\"\n                                         :flex-direction \"row\"}}\n                           [:span {:style {:color        \"white\"\n                                           :margin-right \"10px\"}} \"y\"]\n                           [slider {:on-change (fn [val]\n                                                 (swap! state-atom assoc-in [:rect :translation] [(get-in @state-atom [:rect :translation 0]) val])\n                                                 (js/requestAnimationFrame draw!))\n                                    :value     (get-in @state-atom [:rect :translation 1])\n                                    :min       0\n                                    :max       400\n                                    :id        \"y-slider\"}]\n                           [:span {:style {:color        \"white\"\n                                           :margin-right \"10px\"}} (get-in @state-atom [:rect :y])]]\n                          [:div {:style {:display        \"flex\"\n                                         :flex-direction \"row\"}}\n                           [:span {:style {:color        \"white\"\n                                           :white-space  \"nowrap\"\n                                           :margin-right \"10px\"}} \"scale-x\"]\n                           [slider {:on-change (fn [val]\n                                                 (swap! state-atom assoc-in [:rect :scale] [val (get-in @state-atom [:rect :scale 1])])\n                                                 (js/requestAnimationFrame draw!))\n                                    :value     (get-in @state-atom [:rect :scale 0])\n                                    :min       -5\n                                    :max       5\n                                    :step      0.01\n                                    :id        \"x-scale\"}]\n                           [:span {:style {:color        \"white\"\n                                           :margin-right \"10px\"}} (get-in @state-atom [:rect :scale 0])]]\n                          [:div {:style {:display        \"flex\"\n                                         :flex-direction \"row\"}}\n                           [:span {:style {:color        \"white\"\n                                           :white-space  \"nowrap\"\n                                           :margin-right \"10px\"}} \"scale-y\"]\n                           [slider {:on-change (fn [val]\n                                                 (swap! state-atom assoc-in [:rect :scale] [(get-in @state-atom [:rect :scale 0]) val])\n                                                 (js/requestAnimationFrame draw!))\n                                    :value     (get-in @state-atom [:rect :scale 1])\n                                    :min       -5\n                                    :max       5\n                                    :step      0.01\n                                    :id        \"y-scale\"}]\n                           [:span {:style {:color        \"white\"\n                                           :margin-right \"10px\"}} (->> (get-in @state-atom [:rect :scale 1])\n                                                                       (format \"~4f\"))]]\n                          [:div {:style {:display        \"flex\"\n                                         :flex-direction \"row\"}}\n                           [:span {:style {:color        \"white\"\n                                           :white-space  \"nowrap\"\n                                           :margin-right \"10px\"}} \"angle\"]\n                           [slider {:on-change (fn [val]\n                                                 (swap! state-atom assoc-in [:rect :angle-rad] (m/deg->rad val))\n                                                 (js/requestAnimationFrame draw!))\n                                    :value     (m/rad->deg (get-in @state-atom [:rect :angle-rad]))\n                                    :min       0\n                                    :max       365\n                                    :step      1\n                                    :id        \"rot\"}]\n                           [:span {:style {:color        \"white\"\n                                           :margin-right \"10px\"}} (->> (get-in @state-atom [:rect :angle-rad])\n                                                                       m/rad->deg\n                                                                       (format \"~1f\"))]]\n                          ]\n\n                         ]))})\n"]}