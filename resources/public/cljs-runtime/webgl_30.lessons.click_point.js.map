{"version":3,"sources":["webgl_30/lessons/click_point.cljs"],"mappings":"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","names":["webgl-30.lessons.click-point/initial-state","js/webgl-30","js/webgl-30.lessons","js/webgl-30.lessons.click-point","js/webgl-30.lessons.click-point.state-atom","webgl-30.lessons.click-point/state-atom","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/deref","cljs.core/reset!","webgl-30.lessons.click-point/vertex-shader","webgl-30.lessons.click-point/fragment-shader","p__26672","map__26676","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","webgl-30.lessons.click-point/draw!","_","gl","clicks","objects-to-draw","program","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","webgl_30.webgl_id2.vertex_attrib_1f.cljs$core$IFn$_invoke$arity$variadic","webgl-30.webgl-id2/get-attribute-location","G__26684","webgl_30.webgl_id2.clear_color_BANG_.cljs$core$IFn$_invoke$arity$variadic","webgl_30.webgl_id2.clear_BANG_.cljs$core$IFn$_invoke$arity$variadic","seq__26688","cljs.core/seq","chunk__26689","count__26690","i__26691","vec__26729","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__26738","cljs.core/first","cljs.core/next","x","y","webgl_30.webgl_id2.vertex_attrib_3f.cljs$core$IFn$_invoke$arity$variadic","webgl_30.webgl_id2.draw_arrays_BANG_.cljs$core$IFn$_invoke$arity$variadic","webgl-30.lessons.click-point/setup!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","p__26749","map__26751","state","webgl-30.webgl-id2/init-shaders","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","webgl-30.lessons.click-point/raf-draw!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","js/requestAnimationFrame","t","webgl-30.lessons.click-point/lesson","webgl-30.core/get-filename","canvas-id","w","h","webgl-30.component/webgl-canvas","webgl-30.webgl-id2/get-context","webgl-30.input/mousedown","webgl-30.webgl-id2/get-canvas","e","rect","l","c-x","c-y","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update","cljs.core/conj"],"sourcesContent":["(ns webgl-30.lessons.click-point\n  (:require [webgl-30.webgl-id2 :as w]\n            [webgl-30.core :as c]\n            [webgl-30.input :as i]\n            [webgl-30.component :refer [webgl-canvas]]))\n\n(def initial-state {:gl     nil\n                    :clicks []})\n(defonce state-atom (atom nil))\n(when (nil? @state-atom)\n  (reset! state-atom initial-state))\n\n(def vertex-shader\n  \"\n  attribute float a_pointsize;\n  attribute vec4 a_position;\n\n  void main() {\n       gl_Position = a_position;\n       gl_PointSize = a_pointsize;\n  }\")\n\n(def fragment-shader\n  \"void main() {\n       gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n   }\")\n\n(defn draw!\n  [_ {:keys [gl clicks objects-to-draw]}]\n  (let [program (get-in objects-to-draw [:the-object :program])]\n    (w/vertex-attrib-1f gl (w/get-attribute-location gl program \"a_pointsize\") 5.0)\n\n    (doto gl\n      (w/clear-color! 0.0 0.0 0.0 1.0)\n      (w/clear! (.-COLOR_BUFFER_BIT gl)))\n\n    (doseq [[x y] clicks]\n      (w/vertex-attrib-3f gl (w/get-attribute-location gl program \"a_position\") x y 0.0)\n      (w/draw-arrays! gl (.-POINTS gl) 0 1))))\n\n(defn setup!\n  []\n  (swap! state-atom (fn [{:keys [gl] :as state}]\n                      (let [program (w/init-shaders gl vertex-shader fragment-shader)]\n                        (assoc state :objects-to-draw\n                                     {:the-object {:program program}})))))\n\n(defn raf-draw!\n  [state]\n  (swap! state-atom assoc :raf-id (js/requestAnimationFrame (fn [t] (draw! t state)))))\n\n(def ^:export lesson\n  {:title           (fn []\n                      [:div\n                       [:h1 {:style {:font-family \"monospace\"}}\n                        \"This is chapter 3 from WebGL Programming Guide Interactive 3D Graphics Programming with WebGL\"]\n                       [:h4 {:style {:font-family \"monospace\"}}\n                        \"ClickPoint by WebGL Programming Guide Interactive 3D Graphics Programming with WebGL by Kouichi Matsuda, Rodger Lea.\"]])\n   :source          (c/get-filename #'state-atom)\n   :tutorial-source \"WebGL Programming Guide Interactive 3D Graphics Programming with WebGL by Kouichi Matsuda, Rodger Lea.\"\n   :start           (fn []\n                      (let [canvas-id \"fundamentals\"\n                            w 400\n                            h 400]\n                        [webgl-canvas {:height   h\n                                       :width    w\n                                       :id       canvas-id\n                                       :on-mount (fn []\n                                                   (let [gl (w/get-context canvas-id)]\n                                                     (do\n                                                       (swap! state-atom assoc :gl gl)\n                                                       (i/mousedown (w/get-canvas gl) (fn [e]\n                                                                                        (let [x (aget e \"clientX\")\n                                                                                              y (aget e \"clientY\")\n                                                                                              rect (.getBoundingClientRect (aget e \"target\"))\n                                                                                              l (aget rect \"left\")\n                                                                                              t (aget rect \"top\")\n                                                                                              c-x (/ (- (- x l) (/ h 2)) (/ h 2))\n                                                                                              c-y (/ (- (/ w 2) (- y t)) (/ w 2))]\n                                                                                          (-> (swap! state-atom update :clicks conj [c-x c-y])\n                                                                                              raf-draw!))))\n\n                                                       (setup!)\n                                                       (raf-draw! @state-atom))))}]))})\n"]}