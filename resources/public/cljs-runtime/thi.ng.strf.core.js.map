{"version":3,"sources":["thi/ng/strf/core.cljc"],"mappings":"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","names":["var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","thi.ng.strf.core/parse-int","p__29891","vec__29892","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","seq29882","G__29883","cljs.core/first","cljs.core/next","G__29884","self__4776__auto__","x","radix","default","x'","js/parseInt","js/isNaN","thi.ng.strf.core/parse-long","p__29907","vec__29909","seq29901","G__29902","G__29903","thi.ng.strf.core.parse_int.cljs$core$IFn$_invoke$arity$variadic","thi.ng.strf.core/parse-float","p__29919","vec__29920","seq29914","G__29915","js/parseFloat","thi.ng.strf.core/parse-double","p__29933","vec__29934","seq29924","G__29925","thi.ng.strf.core.parse_float.cljs$core$IFn$_invoke$arity$variadic","thi.ng.strf.core/parse-boolean","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","clojure.string/lower-case","thi.ng.strf.core/int","cljs.core/int","thi.ng.strf.core/long","thi.ng.strf.core/float","cljs.core/memoize","prec","js/Number","thi.ng.strf.core/double","thi.ng.strf.core/pad-left","len","fill","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/str","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","l","cljs.core/count","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","thi.ng.strf.core/pad-right","thi.ng.strf.core/hex","pad","G__29958","thi.ng.strf.core/trunc-left","thi.ng.strf.core/trunc-right","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","thi.ng.strf.core/format","seq29970","G__29971","fmt","args","s","cljs.core/transient","temp__5733__auto__","f","cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2","G__29978","cljs.core/persistent!","thi.ng.strf.core/date-fields","d","thi.ng.strf.core/time-fields","thi.ng.strf.core/datetime-fields","thi.ng.strf.core/date-formatters","d2","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","vec__30004","y","m","thi.ng.strf.core.format.cljs$core$IFn$_invoke$arity$variadic","vec__30007","vec__30010","p1__30000#","cljs.core/mod","G__30026","thi.ng.strf.core/format-date","js/Error","fexpr__30034","G__30036","cljs.core/fn?","fexpr__30037","thi.ng.strf.core/now","js/Date","thi.ng.strf.core/timestamp","thi.ng.strf.core/format-16bit-hex","G__30046","G__30047","thi.ng.strf.core/rand-bits","bits","G__30053","cljs.core.rand.cljs$core$IFn$_invoke$arity$0","thi.ng.strf.core/rand-bits-hex","G__30062","fexpr__30061","G__30063","G__30064","G__30065","Math/ceil","thi.ng.strf.core/rand-16bits-hex","G__30066","cljs.core/rand-int","thi.ng.strf.core/new-uuid","G__30082","G__30086","thi.ng.strf.core/html-entities","thi.ng.strf.core/as-str","cljs.core/Keyword","cljs.core/Symbol","cljs.core/name","thi.ng.strf.core/escape-html","clojure.string/escape"],"sourcesContent":["(ns thi.ng.strf.core\n  (:refer-clojure :exclude [float int long double format])\n  (:require\n   [clojure.string :as str])\n  #?(:clj (:import [java.util Calendar Date Locale])))\n\n(defn parse-int\n  [^String x radix & [default]]\n  #?(:clj\n     (try (Integer/parseInt x radix) (catch Exception e default))\n     :cljs\n     (let [x' (js/parseInt x radix)] (if (js/isNaN x') default x'))))\n\n(defn parse-long\n  [^String x radix & [default]]\n  #?(:clj\n     (try (Long/parseLong x radix) (catch Exception e default))\n     :cljs\n     (parse-int x radix default)))\n\n(defn parse-float\n  [^String x & [default]]\n  #?(:clj\n     (try (Float/parseFloat x) (catch Exception e default))\n     :cljs\n     (let [x' (js/parseFloat x)] (if (js/isNaN x') default x'))))\n\n(defn parse-double\n  [^String x & [default]]\n  #?(:clj\n     (try (Double/parseDouble x) (catch Exception e default))\n     :cljs\n     (parse-float x default)))\n\n(defn parse-boolean\n  [^String x]\n  #?(:clj\n     (Boolean/parseBoolean x)\n     :cljs\n     (= \"true\" (str/lower-case x))))\n\n(def int clojure.core/int)\n\n(def long #?(:clj clojure.core/long :cljs int))\n\n(def float\n  (memoize\n   (fn [prec]\n     #?(:clj\n        (let [fmt (str \"%1.\" prec \"f\")]\n          (fn [x]\n            (String/format Locale/US fmt (to-array [(clojure.core/float x)]))))\n        :cljs\n        (fn [x] (.toFixed (js/Number. x) prec))))))\n\n(def double\n  (memoize\n   (fn [prec]\n     #?(:clj\n        (let [fmt (str \"%1.\" prec \"f\")]\n          (fn [x] (String/format Locale/US fmt (to-array [(clojure.core/double x)]))))\n        :cljs\n        (fn [x] (.toFixed (js/Number. x) prec))))))\n\n(def pad-left\n  (memoize\n   (fn [len fill]\n     (let [fill (apply str (repeat len fill))]\n       (fn [x]\n         (let [l (count x)]\n           (if (< l len) (str (subs fill 0 (- len l)) x) x)))))))\n\n(def pad-right\n  (memoize\n   (fn [len fill]\n     (let [fill (apply str (repeat len fill))]\n       (fn [x]\n         (let [l (count x)]\n           (if (< l len) (str x (subs fill 0 (- len l))) x)))))))\n\n(def hex\n  (memoize\n   (fn [len]\n     #?(:clj\n        (let [fmt (str \"%0\" len \"x\")]\n          (fn [x] (clojure.core/format fmt (long x))))\n        :cljs\n        (let [pad (pad-left len \"0\")]\n          (fn [x] (pad (.toString (js/Number. (int x)) 16))))))))\n\n(defn trunc-left\n  [len]\n  (fn [x]\n    (let [l (count x)]\n      (if (<= l len) x (subs x 0 len)))))\n\n(defn trunc-right\n  [len]\n  (fn [x]\n    (let [l (count x)]\n      (if (<= l len) x (subs x (- l len))))))\n\n(defn format\n  [fmt & args]\n  #?(:clj\n     (loop [s (StringBuilder.), fmt fmt, args args]\n       (if-let [f (first fmt)]\n         (if (string? f)\n           (recur (.append s f) (next fmt) args)\n           (recur (.append s (f (first args))) (next fmt) (next args)))\n         (.toString s)))\n     :cljs\n     (loop [s (transient []), fmt fmt, args args]\n       (if-let [f (first fmt)]\n         (if (string? f)\n           (recur (conj! s f) (next fmt) args)\n           (recur (conj! s (f (first args))) (next fmt) (next args)))\n         (apply str (persistent! s))))))\n\n#?(:clj\n   (defn calendar-instance\n     ^Calendar [d] (doto (Calendar/getInstance) (.setTime ^Date d))))\n\n(defn date-fields\n  [d]\n  #?(:clj\n     (let [c (calendar-instance d)]\n       [(.get c Calendar/YEAR)\n        (inc (.get c Calendar/MONTH))\n        (.get c Calendar/DAY_OF_MONTH)])\n     :cljs\n     [[(.getFullYear d)\n       (inc (.getMonth d))\n       (.getDate d)]]))\n\n(defn time-fields\n  [d]\n  #?(:clj\n     (let [c (calendar-instance d)]\n       [(.get c Calendar/HOUR_OF_DAY)\n        (inc (.get c Calendar/MINUTE))\n        (.get c Calendar/SECOND)])\n     :cljs\n     [[(.getHours d)\n       (.getMinutes d)\n       (.getSeconds d)]]))\n\n(defn datetime-fields\n  [d]\n  #?(:clj\n     (let [c (calendar-instance d)]\n       [(.get c Calendar/YEAR)\n        (inc (.get c Calendar/MONTH))\n        (.get c Calendar/DAY_OF_MONTH)\n        (.get c Calendar/HOUR_OF_DAY)\n        (inc (.get c Calendar/MINUTE))\n        (.get c Calendar/SECOND)])\n     :cljs\n     [[(.getFullYear d)\n       (inc (.getMonth d))\n       (.getDate d)\n       (.getHours d)\n       (.getMinutes d)\n       (.getSeconds d)]]))\n\n(def date-formatters\n  (let [d2 (comp (pad-left 2 \"0\") str)]\n    {:yyyy-mm-dd\n     (fn [d]\n       (apply format [str \"-\" d2 \"-\" d2] (date-fields d)))\n     :yyyy-mm-dd-hh-mm-ss\n     (fn [d]\n       (apply format [str \"-\" d2 \"-\" d2 \" \" d2 \":\" d2 \":\" d2] (datetime-fields d)))\n     :yyyymmdd-hhmmss\n     (fn [d]\n       (apply format [str d2 d2 \"-\" d2 d2 d2] (datetime-fields d)))\n     :dd-mm-yyyy\n     (fn [d]\n       (let [[y m d] (date-fields d)]\n         (format [d2 \"/\" d2 \"/\" str] d m y)))\n     :mm-dd-yyyy\n     (fn [d]\n       (let [[y m d] (date-fields d)]\n         (format [d2 \"/\" d2 \"/\" str] m d y)))\n     :dd-mm-yy\n     (fn [d]\n       (let [[y m d] (date-fields d)]\n         (format [d2 \"/\" d2 \"/\" (comp d2 #(mod % 100))] d m y)))\n     :hh-mm-ss\n     (fn [d]\n       (apply format [d2 \":\" d2 \":\" d2] (time-fields d)))}))\n\n(defn format-date\n  ([d] ((date-formatters :yyyy-mm-dd-hh-mm-ss) d))\n  ([fmt d] (if (fn? fmt) (fmt d) ((date-formatters fmt) d))))\n\n(defn now\n  [] #?(:clj (Date.) :cljs (js/Date.)))\n\n(defn timestamp\n  [] #?(:clj (System/currentTimeMillis) :cljs (.getTime (js/Date.))))\n\n(def ^:private format-16bit-hex (pad-left 4 \\0))\n\n(defn rand-bits\n  [bits] (int (* (rand) (bit-shift-left 1 bits))))\n\n(defn rand-bits-hex\n  [bits]\n  ((pad-left (Math/ceil (/ bits 4)) \\0)\n   (#?(:clj Integer/toString :cljs .toString) (rand-bits bits) 16)))\n\n(defn rand-16bits-hex\n  [] (format-16bit-hex (#?(:clj Integer/toString :cljs .toString) (rand-int 0x10000) 16)))\n\n(defn new-uuid\n  []\n  #?(:clj\n     (str (java.util.UUID/randomUUID))\n     :cljs (str\n            (rand-16bits-hex) (rand-16bits-hex)\n            \\- (rand-16bits-hex)\n            \\- (-> (rand-bits 16) (bit-and 0x0fff) (bit-or 0x4000) (.toString 16) (format-16bit-hex))\n            \\- (-> (rand-bits 16) (bit-and 0x3fff) (bit-or 0x8000) (.toString 16) (format-16bit-hex))\n            \\- (rand-16bits-hex) (rand-16bits-hex) (rand-16bits-hex))))\n\n(def html-entities\n  {\\& \"&amp;\"\n   \\< \"&lt;\"\n   \\> \"&gt;\"\n   \\\" \"&quot;\"})\n\n(defn as-str [x]\n  (if (or (keyword? x) (symbol? x))\n    (name x)\n    (str x)))\n\n(defn escape-html\n  [x] (str/escape (as-str x) html-entities))\n"]}