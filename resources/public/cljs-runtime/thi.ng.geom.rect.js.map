{"version":3,"sources":["thi/ng/geom/rect.cljc"],"mappings":"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","names":["var_args","G__30414","thi.ng.geom.rect/rect","js/Error","thi.ng.geom.types/Rect2","thi.ng.geom.vector.vec2.cljs$core$IFn$_invoke$arity$0","thi.ng.geom.vector.vec2.cljs$core$IFn$_invoke$arity$1","w","p","q","cljs.core/coll?","vec__30420","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","thi.ng.math.core.min.cljs$core$IFn$_invoke$arity$2","thi.ng.math.core.max.cljs$core$IFn$_invoke$arity$2","thi.ng.math.core._.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.vector.vec2.cljs$core$IFn$_invoke$arity$2","x","y","h","p__30432","p__30433","map__30434","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","vec__30435","map__30438","vec__30439","thi.ng.geom.rect/union","qw","qh","vec__30446","x1","y1","p'","x2","x__4273__auto__","y__4274__auto__","y2","thi.ng.geom.rect/left","r","thi.ng.geom.vector/x","thi.ng.geom.rect/right","thi.ng.geom.rect/bottom","thi.ng.geom.vector/y","thi.ng.geom.rect/bottom-left","thi.ng.geom.rect/top","thi.ng.geom.rect/top-right","thi.ng.math.core._PLUS_.cljs$core$IFn$_invoke$arity$2","_","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/*","p__30528","p__30529","map__30530","vec__30531","vec__30534","vec__30537","map__30541","vec__30542","vec__30545","px","py","and__4174__auto__","thi.ng.math.core.in_range_QMARK_.cljs$core$IFn$_invoke$arity$3","fexpr__30566","fexpr__30567","c","thi.ng.geom.core/centroid","thi.ng.geom.utils.bounding_circle.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.core/dist","p__30515","map__30516","map__30518","p__30523","map__30524","map__30526","s","thi.ng.math.core._STAR_.cljs$core$IFn$_invoke$arity$2","o","thi.ng.math.core/madd","cljs.core/+","cljs.core.transduce.cljs$core$IFn$_invoke$arity$3","p1__30450#","cljs.core.map.cljs$core$IFn$_invoke$arity$1","thi.ng.math.core.signum.cljs$core$IFn$_invoke$arity$2","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","thi.ng.geom.utils/closest-point-coeff","thi.ng.math.core/*eps*","cljs.core/min","thi.ng.geom.core.edges.cljs$core$IFn$_invoke$arity$1","p__30482","map__30483","cljs.core.get.cljs$core$IFn$_invoke$arity$3","depth","scale","offset","opts","thi.ng.geom.core.as_mesh.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.types/AABB","thi.ng.geom.vector.vec3.cljs$core$IFn$_invoke$arity$1","thi.ng.geom.vector.vec3.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.core/extrude","thi.ng.geom.core.as_polygon.cljs$core$IFn$_invoke$arity$1","thi.ng.geom.core/extrude-shell","a","b","d","v","thi.ng.dstruct.core/neighbors","thi.ng.geom.core.vertices.cljs$core$IFn$_invoke$arity$1","G__30513","fexpr__30512","cljs.core/set","p__30503","map__30504","vec__30505","thi.ng.geom.core/contains-point?","thi.ng.geom.utils.intersect/intersect-line2-edges?","ray","vec__30509","dir","cljs.core/map?","thi.ng.geom.utils.intersect/intersect-ray2-edges?","thi.ng.geom.types/Line2","thi.ng.geom.core.intersect_line.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.utils.intersect.intersect_rect_rect_QMARK_.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.types/Circle2","thi.ng.geom.utils.intersect.intersect_aabb_sphere_QMARK_.cljs$core$IFn$_invoke$arity$2","thi.ng.xerror.core.unsupported_BANG_.cljs$core$IFn$_invoke$arity$1","thi.ng.geom.core/add-face","or__4185__auto__","thi.ng.geom.basicmesh/basic-mesh","thi.ng.geom.attribs/generate-face-attribs","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.vector/vec3","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","thi.ng.geom.attribs/uv-default-rect","p__30485","map__30486","map__30488","size","thi.ng.geom.types/Polygon2","cljs.core/first","thi.ng.geom.utils/closest-point-on-segments","t","thi.ng.geom.utils.point_at.cljs$core$IFn$_invoke$arity$2","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.core.point_at.cljs$core$IFn$_invoke$arity$2","thi.ng.math.core.random.cljs$core$IFn$_invoke$arity$0","thi.ng.math.core._PLUS_.cljs$core$IFn$_invoke$arity$3","thi.ng.math.core.random.cljs$core$IFn$_invoke$arity$1","fexpr__30480","fexpr__30481","udist","include-last?","thi.ng.geom.utils/sample-uniform","p__30490","p__30491","map__30492","map__30493","map__30496","pa","sa","pb","sb","qa","qb","q'","p1__30456#","cljs.core/every?","p__30464","map__30465","thi.ng.geom.core.subdivide.cljs$core$IFn$_invoke$arity$2","num","cols","rows","dx","dy","rx","cljs.core/butlast","thi.ng.math.core/norm-range","ry","thi.ng.math.core.div.cljs$core$IFn$_invoke$arity$3","iter__4582__auto__","s__30468","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","xs__6292__auto__","iterys__4578__auto__","s__30470","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__30472","cljs.core/chunk-buffer","i__30471","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","vec__30473","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__30469","cljs.core/chunk-rest","vec__30476","cljs.core/cons","cljs.core/rest","fs__4579__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__30467","thi.ng.geom.core/unmap-point","thi.ng.math.core/roundto","p__30560","map__30561","vec__30555","thi.ng.geom.types/Triangle2","tess-fn","thi.ng.geom.utils/tessellate-3","cljs.core.sequence.cljs$core$IFn$_invoke$arity$2","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","p1__30457#","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1","G__30565","p1__30458#","m","thi.ng.geom.core/rotate","s'","thi.ng.geom.core/transform","cljs.core/chunk-first"],"sourcesContent":["(ns thi.ng.geom.rect\n  #?(:cljs (:require-macros [thi.ng.math.macros :as mm]))\n  (:require\n   [thi.ng.geom.core :as g]\n   [thi.ng.geom.utils :as gu]\n   [thi.ng.geom.utils.intersect :as isec]\n   [thi.ng.geom.vector :as v :refer [vec2 vec3]]\n   [thi.ng.geom.aabb :as a]\n   [thi.ng.geom.attribs :as attr]\n   [thi.ng.geom.basicmesh :as bm]\n   #?(:clj [thi.ng.geom.types] :cljs [thi.ng.geom.types :refer [AABB Circle2 Line2 Polygon2 Rect2 Triangle2]])\n   [thi.ng.dstruct.core :as d]\n   [thi.ng.xerror.core :as err]\n   [thi.ng.math.core :as m :refer [*eps*]]\n   #?(:clj [thi.ng.math.macros :as mm]))\n  #?(:clj\n     (:import\n      [thi.ng.geom.types AABB Circle2 Line2 Polygon2 Rect2 Triangle2])))\n\n(defn rect\n  ([] (Rect2. (vec2) (vec2 1.0)))\n  ([w] (Rect2. (vec2) (vec2 w)))\n  ([p q]\n   (if (coll? p)\n     (if (coll? q)\n       (let [p (vec2 p) q (vec2 q)\n             [p q] [(m/min p q) (m/max p q)]]\n         (Rect2. p (m/- q p)))\n       (Rect2. (vec2 p) (vec2 q)))\n     (Rect2. (vec2) (vec2 p q))))\n  ([x y w]\n   (if (number? x)\n     (Rect2. (vec2 x y) (vec2 w))\n     (Rect2. (vec2 x) (vec2 y w))))\n  ([x y w h] (Rect2. (vec2 x y) (vec2 w h))))\n\n(defn union\n  [{p :p [w h] :size} {q :p [qw qh] :size}]\n  (let [[x1 y1 :as p'] (m/min p q)\n        x2 (max (+ (p 0) w) (+ (q 0) qw))\n        y2 (max (+ (p 1) h) (+ (q 1) qh))\n        w (- x2 x1)\n        h (- y2 y1)]\n    (Rect2. p' (vec2 w h))))\n\n(defn left [r] (v/x (get r :p)))\n\n(defn right [r] (+ (v/x (get r :p)) (v/x (get r :size))))\n\n(defn bottom [r] (v/y (get r :p)))\n\n(defn bottom-left [r] (get r :p))\n\n(defn top [r] (+ (v/y (get r :p)) (v/y (get r :size))))\n\n(defn top-right [r] (m/+ (get r :p) (get r :size)))\n\n(extend-type Rect2\n\n  g/IArea\n  (area [_] (reduce * (get _ :size)))\n\n  g/IBoundary\n  (contains-point?\n    [{[px py] :p [w h] :size} [x y]]\n    (and (m/in-range? 0.0 w (- x px)) (m/in-range? 0.0 h (- y py))))\n\n  g/IBounds\n  (bounds[_] _)\n  (width  [_] ((get _ :size) 0))\n  (height [_] ((get _ :size) 1))\n  (depth  [_] 0)\n\n  g/IBoundingCircle\n  (bounding-circle\n    [_]\n    (let [c (g/centroid _)]\n      (gu/bounding-circle c (g/dist c (get _ :p)))))\n\n  g/ICenter\n  (center\n    ([{s :size}]\n     (Rect2. (m/* s -0.5) s))\n    ([{s :size} o]\n     (Rect2. (m/madd s -0.5 o) s)))\n  (centroid\n    [_] (m/madd (get _ :size) 0.5 (get _ :p)))\n\n  g/ICircumference\n  (circumference [_] (* 2.0 (reduce + (get _ :size))))\n\n  g/IClassify\n  (classify-point\n    [_ q]\n    (transduce\n     (map #(m/signum (apply gu/closest-point-coeff q %) *eps*))\n     min\n     (g/edges _)))\n\n  ;; Extruding a rectangle along the Z-axis results in a 3D mesh\n  ;; implementation. The `extrude` function supports the following\n  ;; options, given as parameter map:\n  ;;\n  ;; | Key       | Description                             | Default |\n  ;; |-----------+-----------------------------------------+---------|\n  ;; | `:depth`  | extrusion depth along positive Z        |     1.0 |\n  ;; | `:scale`  | scale factor of rect at extrusion depth |     1.0 |\n  ;; | `:offset` | extrusion vector (overrides :depth)     |     nil |\n  ;;\n  ;; The process results in bevelled forms for `:scale` values other\n  ;; than 1.0.\n  ;;\n  ;; *Note:* Due to Clojure's non-circular namespace dependency\n  ;; policy, users must manually `require` the following namespaces\n  ;; before using this method for rects:\n  ;;\n  ;; - `thi.ng.geom.aabb`\n  ;; - `thi.ng.geom.polygon`\n\n  g/IExtrude\n  (extrude\n    [_ {:keys [depth scale offset] :or {depth 1.0 scale 1.0} :as opts}]\n    (if (and (== scale 1.0) (nil? offset))\n      (g/as-mesh\n       (AABB. (vec3 (get _ :p)) (vec3 (get _ :size) depth)) opts)\n      (g/extrude (g/as-polygon _) opts)))\n  (extrude-shell\n    [_ opts] (g/extrude-shell (g/as-polygon _) opts))\n\n  g/IVertexAccess\n  (vertices\n    [_]\n    (let [a (get _ :p)\n          c (m/+ a (get _ :size))]\n      [a (vec2 (c 0) (a 1)) c (vec2 (a 0) (c 1))]))\n\n  g/IEdgeAccess\n  (edges\n    [_] (let [a (get _ :p)\n              c (m/+ a (get _ :size))\n              b (vec2 (c 0) (a 1))\n              d (vec2 (a 0) (c 1))]\n          [[a b] [b c] [c d] [d a]]))\n\n  g/IGraph\n  (vertex-neighbors\n    [_ v] (d/neighbors (vec2 v) (g/vertices _)))\n  (vertex-valence\n    [_ v] (if ((set (g/vertices _)) (vec2 v)) 2 0))\n\n  g/IIntersect\n  (intersect-line\n    [_ {[p q] :points}]\n    (if (and (g/contains-point? _ p) (g/contains-point? _ q))\n      {:type :coincident}\n      (isec/intersect-line2-edges? p q (g/edges _))))\n  (intersect-ray\n    ([_ ray]\n     (let [[p dir] (if (map? ray) [(get ray :p) (get ray :dir)] ray)]\n       (isec/intersect-ray2-edges? p dir (g/edges _))))\n    ([_ p dir]\n     (isec/intersect-ray2-edges? p dir (g/edges _))))\n  (intersect-shape\n    [_ s]\n    (cond\n      (instance? Line2 s) (g/intersect-line _ s)\n      (instance? Rect2 s) (isec/intersect-rect-rect? _ s)\n      (instance? Circle2 s) (isec/intersect-aabb-sphere? _ s)\n      :default (err/unsupported! (str \"can't intersect w/ \" s))))\n\n  g/IMeshConvert\n  (as-mesh\n    ([_] (g/as-mesh _ {}))\n    ([_ opts]\n     (g/add-face\n      (or (get opts :mesh) (bm/basic-mesh))\n      (attr/generate-face-attribs\n       (mapv vec3 (g/vertices _)) 0 (get opts :attribs)\n       (merge {:uv attr/uv-default-rect} opts)))))\n\n  ;; - `map-point` takes a rect and 2D point, returns the point in\n  ;;   normalized UV coords in local rect space, where [0,0] is\n  ;;   equivalent to the rect's min point and [1,1] the point\n  ;;   diagonally opposite. If any of the resulting coordinates is\n  ;;   outside the 0.0 .. 1.0 interval, the orginal point was outside\n  ;;   the rectangle.\n  ;;\n  ;; - `unmap-point` is the inverse operation of `map-point`. It maps\n  ;;   a point in local UV coordinates to its world position.\n\n  g/IPointMap\n  (map-point\n    [{:keys [p size]} q]\n    (vec2\n     (mm/subdiv (v/x q) (v/x p) (v/x size))\n     (mm/subdiv (v/y q) (v/y p) (v/y size))))\n  (unmap-point\n    [_ q] (m/madd q (get _ :size) (get _ :p)))\n\n  g/IPolygonConvert\n  (as-polygon\n    [_] (Polygon2. (g/vertices _)))\n\n  g/IProximity\n  (closest-point\n    [_ p]\n    (first (gu/closest-point-on-segments p (g/edges _))))\n\n  g/ISample\n  (point-at\n    [_ t] (gu/point-at t (conj (g/vertices _) (get _ :p))))\n  (random-point\n    [_] (g/point-at _ (m/random)))\n  (random-point-inside\n    [_] (m/+ (get _ :p) (m/random ((get _ :size) 0)) (m/random ((get _ :size) 1))))\n  (sample-uniform\n    [_ udist include-last?]\n    (gu/sample-uniform udist include-last? (conj (g/vertices _) (get _ :p))))\n\n  ;; TODO same as for `ISetOps` impl for AABB: consider only impls for\n  ;; ops retaining type\n  ;;\n  ;; The implementations for this protocol are only intended to work\n  ;; with other rects and no type checking is done.\n  ;;\n  ;; - `union` returns the union rect of both args\n  ;; - `intersection` (still missing) returns the rect of the intersection\n  ;;   area of both args or `nil` if there's no overlap. Intersection is\n  ;;   defined also for touching rects or if overlap is only a single point\n  ;;   (in which case the size of the resulting rect will be zero)\n  ;; - `difference` (still missing) will return a polygon of the remaining\n  ;;   area after the 2nd rect has been subtracted from the first (or\n  ;;   `nil` in case of no overlap)\n\n  m/ISetOps\n  (union\n    [{pa :p sa :size} {pb :p sb :size}]\n    (let [p (m/min pa pb)]\n      (Rect2. p (m/- (m/max (m/+ pa sa) (m/+ pb sb)) p))))\n  (intersection\n    [_ r]\n    (let [pa (get _ :p) qa (m/+ pa (get _ :size))\n          pb (get r :p) qb (m/+ pb (get r :size))\n          p' (m/max pa pb)\n          q' (m/min qa qb)\n          s  (m/- q' p')]\n      (if (every? #(>= % 0) s)\n        (Rect2. p' s))))\n\n  ;; A rectangle can be subdivided into smaller ones, i.e. to create a\n  ;; list of uniform grid cells. The following options can be given as\n  ;; a 2nd argument map:\n  ;;\n  ;; | Key     | Description                                                    | Default |\n  ;; |---------+----------------------------------------------------------------+---------|\n  ;; | `:num`  | number of cols/rows the rect will be uniformly subdivided into |       2 |\n  ;; | `:cols` | number of times the rect will be subdivided along the X-axis   |       2 |\n  ;; | `:rows` | number of times the rect will be subdivided along the Y-axis   |       2 |\n  ;;\n  ;; When `:num` is given, the resulting rects will retain the aspect\n  ;; ratio of the original rect. If specified, `:cols` and `:rows`\n  ;; will take precedence over `:num`, but the latter will be used as\n  ;; default for missing args. Rects are returned as a lazyseq with\n  ;; top-left to bottom-right ordering and inner sorting along X.\n\n  g/ISubdivide\n  (subdivide\n    ([_] (g/subdivide _ {}))\n    ([_ {:keys [num cols rows] :or {num 2}}]\n     (let [dx (or cols num)\n           dy (or rows num)\n           rx (butlast (m/norm-range dx))\n           ry (butlast (m/norm-range dy))\n           s (m/div (get _ :size) dx dy)]\n       (for [y ry x rx\n             :let [[px py] (g/unmap-point _ (vec2 x y))\n                   px (m/roundto px *eps*)\n                   py (m/roundto py *eps*)]]\n         (Rect2. (vec2 px py) s)))))\n\n  ;; A rectangle can be tessellated into a number of triangles. When\n  ;; called without options map as 2nd argument, the rect will be\n  ;; split into 2 triangles, each in anti-clockwise orientation: `[tl\n  ;; br tr]` & `[tl bl br]`. When called *with* options, then these\n  ;; are used for a call to `subdivide` first and the function returns\n  ;; a lazyseq of triangles of the subdivided rects.\n\n  g/ITessellate\n  (tessellate\n    ([_]\n     (let [[a b c d] (g/vertices _)]\n       [(Triangle2. [a b c])\n        (Triangle2. [a c d])]))\n    ([_ {tess-fn :fn :or {tess-fn gu/tessellate-3} :as opts}]\n     (->> (g/subdivide _ opts)\n          (sequence\n           (comp\n            (mapcat #(tess-fn (g/vertices %)))\n            (map #(Triangle2. %)))))))\n\n  g/IRotate\n  (rotate\n    [_ m] (g/rotate (g/as-polygon _) m))\n\n  g/IScale\n  (scale\n    [_ s] (Rect2. (m/* (get _ :p) s) (m/* (get _ :size) s)))\n  (scale-size\n    [_ s]\n    (let [s' (m/* (get _ :size) s)]\n      (Rect2.\n       (m/madd s' -0.5 (g/centroid _)) s')))\n\n  g/ITranslate\n  (translate\n    [_ t] (Rect2. (m/+ (get _ :p) t) (get _ :size)))\n\n  g/ITransform\n  (transform\n    [_ m] (g/transform (g/as-polygon _) m))\n\n  g/IVolume\n  (volume [_] 0.0))\n"]}