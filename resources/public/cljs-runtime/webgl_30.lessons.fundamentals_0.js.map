{"version":3,"sources":["webgl_30/lessons/fundamentals_0.cljs"],"mappings":";;;;;AAKA,AAAA,AAAA,AAAA,AAAKA;AACL,AAAA,AAAAC,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAW,AAAA,AAACC;;AACrB,AAAM,AAAA,AAAAC,AAAA,AAAOF;AAAb,AACE,AAACG,AAAOH,AAAWL;;AADrB;AAGA,AAAA,AAAKS;AAML,AAAA,AAAKC;AAOL,AAAA,AAAMC,AACHC;AADH,AAEE,AAAA,AAAAL,AAACM,AAAmBR;;AAEtB,AAAA,AAAMS;AAAN,AAEE,AAACC,AAAMV,AAAW,AAAAW;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAAqBM;AAArB,AAAAF,AAAAJ,AAAA,AAAaK;AAAb,AACE,AAAME,AAAQ,AAAA,AAAA,AAAA,AAACC,AAAoBH,AAAQb,AAAoBC;AAA/D,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACgB,AAAMH,AAA0C,AAAA,AAAA,AAAA,AAACE,AAAoBH,AAAQb,AAAoBC,AACpC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACiB,AAAgBL,AAAGE,AAGI,AAASF,AACT,AAAAM,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGzB,AAAaN;;;AAIlG,AAAA,AAAA,AAAcO,AACM;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AADpB,AAAA,AAAA,AAAA,AAOoB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAxB,AAAA,AAAA,AAAAA,AAAA,AAACyB,AAED;AAAA,AACE,AAAA,AAAMC;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACGC,AAEwBD,AACA;AAAA,AACE,AACE,AAAA,AAACE,AAAM5B,AAAW6B,AAAU,AAACC,AAAkBJ;;AAC/C,AAACjB;;AACD,AAACsB,AAAyBzB","names":["webgl-30.lessons.fundamentals-0/initial-state","js/webgl-30","js/webgl-30.lessons","js/webgl-30.lessons.fundamentals-0","js/webgl-30.lessons.fundamentals-0.state-atom","webgl-30.lessons.fundamentals-0/state-atom","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/deref","cljs.core/reset!","webgl-30.lessons.fundamentals-0/fragment-shader","webgl-30.lessons.fundamentals-0/vertex-shader","webgl-30.lessons.fundamentals-0/draw!","timestamp","webgl-30.webgl/draw-scene!","webgl-30.lessons.fundamentals-0/setup!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","p__26072","map__26076","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","gl","state","program","webgl-30.webgl/link-shaders!","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","webgl-30.webgl/attribute","js/Float32Array","webgl-30.lessons.fundamentals-0/lesson","webgl-30.core/get-filename","canvas-id","webgl-30.component/webgl-canvas","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","webgl-30.webgl/get-context","js/requestAnimationFrame"],"sourcesContent":["(ns webgl-30.lessons.fundamentals-0\n  (:require [webgl-30.webgl :as webgl]\n            [webgl-30.core :as c]\n            [webgl-30.component :refer [webgl-canvas]]))\n\n(def initial-state {:gl nil})\n(defonce state-atom (atom nil))\n(when (nil? @state-atom)\n  (reset! state-atom initial-state))\n\n(def fragment-shader\n  \"precision mediump float;\n   void main() {\n       gl_FragColor = vec4(1, 0, 0.5, 1);\n   }\")\n\n(def vertex-shader\n  \"// an attribute will receive data from a buffer\n  attribute vec4 a_position;\n  void main() {\n       gl_Position = a_position;\n  }\")\n\n(defn draw!\n  [timestamp]\n  (webgl/draw-scene! @state-atom))\n\n(defn setup!\n  []\n  (swap! state-atom (fn [{:keys [gl] :as state}]\n                      (let [program (webgl/link-shaders! gl {:fs fragment-shader :vs vertex-shader})]\n                        (assoc state :objects-to-draw {:too {:program    (webgl/link-shaders! gl {:fs fragment-shader :vs vertex-shader})\n                                                             :attributes {:a_position (webgl/attribute gl program\n                                                                                                       {:name \"a_position\"\n                                                                                                        :size 2\n                                                                                                        :type (.-FLOAT gl)\n                                                                                                        :data (js/Float32Array. [0 0\n                                                                                                                                 0 0.5\n                                                                                                                                 0.7 0])})}\n                                                             :element    {:draw-type (.-TRIANGLES gl)\n                                                                          :offset    0\n                                                                          :count     3}}})))))\n\n(def ^:export lesson\n  {:title           (fn []\n                      [:div\n                       [:h1 {:style {:font-family \"monospace\"}}\n                        \"Lesson - WebGL Fundamentals\"]\n                       [:h4 {:style {:font-family \"monospace\"}}\n                        \"A simple triangle\"]])\n   :source          (c/get-filename #'state-atom)\n   :tutorial-source \"webgl-fundamentals.html\"\n   :start           (fn []\n                      (let [canvas-id \"fundamentals\"]\n                        [webgl-canvas {:height   400\n                                       :width    400\n                                       :id       canvas-id\n                                       :on-mount (fn []\n                                                   (do\n                                                     (swap! state-atom assoc :gl (webgl/get-context canvas-id))\n                                                     (setup!)\n                                                     (js/requestAnimationFrame draw!)))}]))})\n"]}