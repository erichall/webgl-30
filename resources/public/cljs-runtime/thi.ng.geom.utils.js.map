{"version":3,"sources":["thi/ng/geom/utils.cljc"],"mappings":"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","names":["thi.ng.geom.utils/closest-point-coeff","p","a","b","d","thi.ng.math.core._.cljs$core$IFn$_invoke$arity$2","thi.ng.math.core.dot.cljs$core$IFn$_invoke$arity$2","thi.ng.math.core/mag-squared","thi.ng.geom.utils/closest-point-on-line","thi.ng.math.core.mix.cljs$core$IFn$_invoke$arity$3","thi.ng.geom.utils/closest-point-on-segment","t","thi.ng.geom.utils/closest-point-on-segments","segments","cljs.core.transduce.cljs$core$IFn$_invoke$arity$4","p1__28727#","cljs.core.map.cljs$core$IFn$_invoke$arity$1","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core.completing.cljs$core$IFn$_invoke$arity$1","q","d'","thi.ng.geom.core/dist-squared","thi.ng.math.core/INF+","thi.ng.geom.utils/closest-line-between","a1","b1","a2","b2","p43","cljs.core/not","thi.ng.geom.vector/V3","thi.ng.math.core/*eps*","p21","p13","d1343","d4321","d1321","d4343","d2121","thi.ng.math.core.delta_EQ_.cljs$core$IFn$_invoke$arity$3","n","ua","ub","thi.ng.math.core/madd","thi.ng.geom.utils/dist*","rf","c","points","p1__28729#","G__28730","Math/sqrt","thi.ng.geom.utils/min-dist","cljs.core/min","thi.ng.geom.utils/max-dist","cljs.core/max","thi.ng.geom.utils/arc-length-index","cljs.core.partition.cljs$core$IFn$_invoke$arity$3","p1__28731#","thi.ng.geom.core/dist","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core/peek","thi.ng.geom.utils/arc-length","thi.ng.dstruct.core.reduce_pairs.cljs$core$IFn$_invoke$arity$3","cljs.core/+","thi.ng.geom.utils/centroid","coll","G__28733","cljs.core/count","cljs.core/first","thi.ng.math.core.mix.cljs$core$IFn$_invoke$arity$2","s","f","x","_","thi.ng.geom.core.reduce_vector.cljs$core$IFn$_invoke$arity$4","cljs.core/rest","var_args","G__28736","thi.ng.geom.utils/center","js/Error","c'","thi.ng.geom.utils.center.cljs$core$IFn$_invoke$arity$3","p1__28734#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","thi.ng.math.core._PLUS_.cljs$core$IFn$_invoke$arity$2","G__28739","thi.ng.geom.utils/scale-size","thi.ng.geom.utils.scale_size.cljs$core$IFn$_invoke$arity$3","p1__28737#","thi.ng.geom.utils/bounds*","zero","vec__28740","seq__28741","cljs.core/seq","first__28742","cljs.core/next","xs","thi.ng.geom.core.reduce_vector.cljs$core$IFn$_invoke$arity$3","thi.ng.geom.utils/bounding-rect-raw","thi.ng.geom.vector/V2","thi.ng.geom.utils/bounding-box-raw","thi.ng.geom.utils/radial-bounds","ctor","r-or-points","cljs.core/coll?","thi.ng.geom.utils/axis-bounds","axis","p1__28744#","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.utils/axis-range","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/-","thi.ng.geom.utils/delta-contains","eps","p1__28745#","cljs.core/some","thi.ng.geom.utils/from-barycentric","weights","thi.ng.math.core/+","cljs.core.map.cljs$core$IFn$_invoke$arity$3","thi.ng.math.core/*","thi.ng.geom.utils/point-at-index","t'","ti","thi.ng.geom.utils/point-at*","idx","total","i","ct","i1","pi","G__28747","thi.ng.geom.utils/point-at","thi.ng.geom.utils.point_at.cljs$core$IFn$_invoke$arity$3","thi.ng.math.core.in_range_QMARK_.cljs$core$IFn$_invoke$arity$3","cljs.core/last","or__4185__auto__","thi.ng.geom.utils/sample-uniform*","udist","include-last?","delta","samples","acc","vec__28752","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","thi.ng.geom.utils/sample-uniform","thi.ng.geom.utils/sample-segment-with-res","res","include-b?","ls","iter__4582__auto__","s__28756","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","b__28759","cljs.core/chunk-buffer","i__28758","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__28755","cljs.core/chunk-rest","cljs.core/cons","thi.ng.math.core/norm-range","cljs.core/butlast","p__28760","p__28761","vec__28762","vec__28765","thi.ng.geom.utils/map-bilinear","u","v","thi.ng.math.core.mix.cljs$core$IFn$_invoke$arity$6","p__28768","p__28769","vec__28770","vec__28773","thi.ng.geom.utils/map-trilinear","e","g","h","w","G__28779","thi.ng.geom.utils/tessellate-with-point","thi.ng.geom.utils.tessellate_with_point.cljs$core$IFn$_invoke$arity$2","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","p1__28777#","cljs.core/PersistentVector","thi.ng.geom.utils/tessellate-with-first","v0","p__28780","vec__28781","p__28784","vec__28785","thi.ng.geom.utils/tessellate-tri-with-midpoints","ab","bc","ca","thi.ng.geom.utils/tessellate-3","pred__28788","expr__28789","cljs.core/==","vec__28791","thi.ng.geom.utils.tessellate_with_point.cljs$core$IFn$_invoke$arity$1","thi.ng.geom.utils/tessellate-max4","thi.ng.geom.utils/tessellate-face","tess-fn","p__28794","vec__28795","verts","attribs","cljs.core/reduce-kv","k","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","G__28799","thi.ng.geom.utils/ortho-normal","p__28800","vec__28801","thi.ng.math.core.normalize.cljs$core$IFn$_invoke$arity$1","thi.ng.math.core/cross","p__28804","p__28805","p__28806","vec__28807","vec__28810","vec__28813","thi.ng.geom.utils/norm-sign2","ax","ay","bx","by","cx","cy","thi.ng.geom.utils/norm-sign3","thi.ng.math.core/mag","thi.ng.geom.utils/tri-area2","thi.ng.geom.utils/tri-area3","thi.ng.geom.utils/clockwise2?","thi.ng.geom.utils/clockwise3?","G__28818","thi.ng.geom.utils/triangle-barycentric-coords","p__28819","vec__28820","thi.ng.geom.utils.triangle_barycentric_coords.cljs$core$IFn$_invoke$arity$6","uu","vv","uv","wu","wv","denom","thi.ng.geom.utils/point-in-triangle2?","thi.ng.geom.utils/point-in-triangle3?","thi.ng.geom.utils.ortho_normal.cljs$core$IFn$_invoke$arity$2","cl","thi.ng.math.core.delta_EQ_.cljs$core$IFn$_invoke$arity$2","vec__28824","thi.ng.geom.utils/tessellating-transducer","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1","thi.ng.geom.utils/area-xf","p1__28827#","G__28828","thi.ng.math.core/abs*","thi.ng.geom.utils/volume-xf","p1__28829#","G__28831","thi.ng.geom.utils/total-area-3d","faces","cljs.core.transduce.cljs$core$IFn$_invoke$arity$3","xf","G__28833","thi.ng.geom.utils/total-volume","thi.ng.geom.utils/bounding-rect","vec__28835","size","thi.ng.geom.types/Rect2","thi.ng.geom.utils/bounding-box","vec__28838","thi.ng.geom.types/AABB","G__28842","thi.ng.geom.utils/bounding-circle","thi.ng.geom.utils.bounding_circle.cljs$core$IFn$_invoke$arity$2","vec__28843","r","thi.ng.geom.vector/vec2","thi.ng.geom.types/Circle2","G__28847","thi.ng.geom.utils/bounding-sphere","thi.ng.geom.utils.bounding_sphere.cljs$core$IFn$_invoke$arity$2","vec__28848","thi.ng.geom.vector/vec3","thi.ng.geom.types/Sphere","thi.ng.geom.utils/coll-bounds","thi.ng.math.core/union","thi.ng.geom.core/bounds","thi.ng.geom.utils/fit-all-into-bounds","bounds","thi.ng.math.core.div.cljs$core$IFn$_invoke$arity$2","cljs.core.get.cljs$core$IFn$_invoke$arity$2","b'","thi.ng.geom.core.center.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.core/scale","thi.ng.geom.core/centroid","p1__28851#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.core/unmap-point","thi.ng.geom.core/map-point","thi.ng.geom.core/scale-size","thi.ng.geom.utils/into-mesh","mesh","add-face","mesh-or-faces","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","thi.ng.geom.core/IFaceAccess","thi.ng.geom.core.faces.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.utils/map-mesh","thi.ng.geom.core/into","thi.ng.geom.core/clear*","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","thi.ng.geom.utils/transform-mesh","tx","thi.ng.geom.core/IVectorTransform","thi.ng.geom.core/transform-vector","verts'","thi.ng.geom.core.vertices.cljs$core$IFn$_invoke$arity$1","cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/transient","cljs.core/PersistentHashMap","cljs.core/persistent!","p__28855","vec__28856","fv","fa","G__28859","G__28860","cljs.core/chunk-first"],"sourcesContent":["(ns thi.ng.geom.utils\n  #?(:cljs\n     (:require-macros\n      [thi.ng.math.macros :as mm]))\n  (:require\n   [thi.ng.geom.core :as g]\n   [thi.ng.geom.vector :as v :refer [vec2 vec3 V2 V3]]\n   #?(:clj [thi.ng.geom.types] :cljs [thi.ng.geom.types :refer [AABB Circle2 Rect2 Sphere]])\n   [thi.ng.dstruct.core :as d]\n   [thi.ng.math.core :as m :refer [*eps*]]\n   #?(:clj [thi.ng.math.macros :as mm]))\n   #?(:clj (:import [thi.ng.geom.types AABB Circle2 Rect2 Sphere])))\n\n(declare tri-area3)\n\n;; Point collection functions\n;; Distance & length\n\n(defn closest-point-coeff\n  [p a b]\n  (let [d (m/- b a)]\n    (/ (m/dot (m/- p a) d) (m/mag-squared d))))\n\n(defn closest-point-on-line\n  [p a b]\n  (m/mix a b (closest-point-coeff p a b)))\n\n(defn closest-point-on-segment\n  [p a b]\n  (let [t (closest-point-coeff p a b)]\n    (if (<= t 0.0) a (if (>= t 1.0) b (m/mix a b t)))))\n\n(defn closest-point-on-segments\n  [p segments]\n  (transduce\n   (map #(apply closest-point-on-segment p %))\n   (completing\n    (fn [a q]\n      (let [d' (g/dist-squared p q)]\n        (if (< d' (a 1)) [q d'] a))))\n   [nil m/INF+]\n   segments))\n\n(defn closest-line-between\n  [a1 b1 a2 b2]\n  (let [p43 (m/- b2 a2)]\n    (if-not (m/delta= V3 p43 *eps*)\n      (let [p21 (m/- b1 a1)]\n        (if-not (m/delta= V3 p21 *eps*)\n          (let [p13   (m/- a1 a2)\n                d1343 (m/dot p13 p43)\n                d4321 (m/dot p43 p21)\n                d1321 (m/dot p13 p21)\n                d4343 (m/dot p43 p43)\n                d2121 (m/dot p21 p21)\n                d     (mm/msub d2121 d4343 d4321 d4321)]\n            (if (m/delta= 0.0 d *eps*)\n              {:type :parallel}\n              (let [n  (mm/msub d1343 d4321 d1321 d4343)\n                    ua (/ n d)\n                    ub (/ (mm/madd d4321 ua d1343) d4343)]\n                {:type :intersect\n                 :a    (m/madd p21 ua a1)\n                 :b    (m/madd p43 ub a2)\n                 :ua   ua\n                 :ub   ub}))))))))\n\n(defn dist*\n  [rf]\n  (fn [c points]\n    (->> points\n         (transduce (map #(g/dist-squared c %)) rf 0)\n         (Math/sqrt))))\n\n(def min-dist (dist* min))\n(def max-dist (dist* max))\n\n(defn arc-length-index\n  [points]\n  (->> points\n       (partition 2 1)\n       (transduce\n        (map #(g/dist (nth % 0) (nth % 1)))\n        (completing (fn [a d] (conj a (+ (peek a) d))))\n        [0])))\n\n(defn arc-length\n  [points]\n  (d/reduce-pairs + g/dist points))\n\n;; Centroid & centering\n\n(defn centroid\n  [coll]\n  (case (count coll)\n    0 nil\n    1 (first coll)\n    2 (m/mix (first coll) (nth coll 1))\n    (let [s (/ 1.0 (count coll))\n          f (fn [x _] (* x s))]\n      (g/reduce-vector (first coll) + f (rest coll)))))\n\n(defn center\n  ([c' coll]\n   (center (centroid coll) c' coll))\n  ([c c' coll]\n   (let [d (m/- c' c)] (mapv #(m/+ % d) coll))))\n\n(defn scale-size\n  ([s coll] (scale-size (centroid coll) s coll))\n  ([c s coll] (mapv #(m/madd (m/- % c) s c) coll)))\n\n;; Bounds\n\n(defn bounds*\n  [zero coll]\n  (let [c (count coll)]\n    (cond\n      (> c 1) (let [[x & xs] coll\n                    p (g/reduce-vector x min xs)\n                    q (g/reduce-vector x max xs)]\n                [p (m/- q p)])\n      (== c 1) [(first coll) zero]\n      :default nil)))\n\n(defn bounding-rect-raw\n  [points]\n  (bounds* V2 points))\n\n(defn bounding-box-raw\n  [points]\n  (bounds* V3 points))\n\n(defn radial-bounds\n  [ctor c r-or-points]\n  [(ctor c)\n   (if (coll? r-or-points)\n     (max-dist c r-or-points)\n     r-or-points)])\n\n(defn axis-bounds\n  [axis coll]\n  (let [xs (mapv #(nth % axis) coll)]\n    [(reduce min xs) (reduce max xs)]))\n\n(defn axis-range\n  [axis coll]\n  (- (apply - (axis-bounds axis coll))))\n\n(defn delta-contains\n  [points p eps]\n  (some #(m/delta= p % eps) points))\n\n;; Sampling\n\n(defn from-barycentric\n  [points weights]\n  (reduce m/+ (map m/* points weights)))\n\n(defn point-at-index\n  \"Takes a seq of points and normalized index (0.0 .. 1.0), returns\n  interpolated point at position t.\"\n  [points t]\n  (let [n  (dec (count points))\n        t' (* t n)\n        ti (int t')]\n    (if (< ti n)\n      (m/mix (nth points ti) (nth points (inc ti)) (- t' ti))\n      (nth points (if (neg? ti) 0 n)))))\n\n(defn point-at*\n  [points idx total t i]\n  (let [ct (* t total)\n        i (int (loop [i i] (if (>= ct (idx i)) (recur (inc i)) i)))\n        i1 (dec i)\n        pi (idx i1)]\n    [(m/mix (nth points i1) (nth points i)\n            (mm/subdiv ct pi (idx i) pi))\n     i]))\n\n(defn point-at\n  ([t points] (point-at t points nil))\n  ([t points idx]\n   (when (m/in-range? 0.0 1.0 t)\n     (let [n (count points)\n           t (double t)]\n       (cond\n         (== 0 n) nil\n         (== 1 n) (first points)\n         (== 1.0 t) (last points)\n         :default\n         (let [idx (or idx (arc-length-index points))]\n           (first (point-at* points idx (peek idx) t 1))))))))\n\n(defn sample-uniform*\n  [udist include-last? points]\n  (let [idx (arc-length-index points)\n        total (peek idx)\n        delta (/ udist total)\n        samples (loop [t 0.0, i 1, acc []]\n                  (if (< t 1.0)\n                    (let [[p i] (point-at* points idx total t i)]\n                      (recur (+ t delta) (int i) (conj acc p)))\n                    acc))]\n    (if include-last?\n      (conj samples (last points))\n      samples)))\n\n(defn sample-uniform\n  [udist include-last? points]\n  (let [n (count points)]\n    (cond\n      (== 0 n) nil\n      (== 1 n) [(first points)]\n      :default (sample-uniform* udist include-last? points))))\n\n(defn sample-segment-with-res\n  [a b res include-b?]\n  (let [ls (for [t (m/norm-range res)] (m/mix a b t))]\n    (if include-b? ls (butlast ls))))\n\n;; Interpolation\n;;\n;; d +----+ c\n;;   |    |\n;;   |    |\n;; a +----+ b\n\n(defn map-bilinear\n  \"Takes a seq of 4 points in ccw order and 2D vector of normalized UV\n  coordinates. Applies bilinear interpolation to compute point within\n  the rect: U is coord along AB/DC edge, V along BC/AD\"\n  [[a b c d] [u v]]\n  (m/mix a b d c u v))\n\n;; e +----+ h\n;;   |\\   :\\\n;;   |f+----+ g\n;;   | |  : |\n;; a +-|--+d|\n;;    \\|   \\|\n;;   b +----+ c\n\n(defn map-trilinear\n  \"Takes a seq of 8 points defining a cuboid and vector of normalized\n  UVW coordinates. Applies trilinear interpolation to compute point\n  within the cuboid: U is coord along AD/BC edge, V along AE/BF, W\n  along AB/DC (see above diagram)\"\n  [[a b c d e f g h] [u v w]]\n  (m/mix (m/mix a d e h u v) (m/mix b c f g u v) w))\n\n;; Tessellation\n\n(defn tessellate-with-point\n  ([points] (tessellate-with-point (centroid points) points))\n  ([c points]\n   (->> [(first points)]\n        (concat points)\n        (partition 2 1)\n        (mapv #(vector c (first %) (nth % 1))))))\n\n(defn tessellate-with-first\n  [points]\n  (if (> (count points) 3)\n    (let [v0 (first points)]\n      (mapv (fn [[a b]] [v0 a b]) (partition 2 1 (rest points))))\n    [points]))\n\n(defn tessellate-tri-with-midpoints\n  [[a b c]]\n  (let [ab (m/mix a b)\n        bc (m/mix b c)\n        ca (m/mix c a)]\n    [[a ab ca] [ab b bc] [bc c ca] [ab bc ca]]))\n\n(defn tessellate-3\n  [points]\n  (condp == (count points)\n    3 [points]\n    4 (let [[a b c d] points] [[a b c] [a c d]])\n    (tessellate-with-point points)))\n\n(defn tessellate-max4\n  [points]\n  (if (<= (count points) 4)\n    [points]\n    (tessellate-with-point points)))\n\n(defn tessellate-face\n  [tess-fn]\n  (fn [[verts attribs]]\n    (let [verts (tess-fn verts)\n          attribs (reduce-kv\n                   (fn [acc k v] (assoc acc k (tess-fn v)))\n                   {} attribs)]\n      (map-indexed\n       (fn [i verts]\n         [verts (reduce-kv (fn [acc k v] (assoc acc k (nth v i))) {} attribs)])\n       verts))))\n\n;; Normals\n\n(defn ortho-normal\n  ([[a b c]] (m/normalize (m/cross (m/- b a) (m/- c a))))\n  ([a b] (m/normalize (m/cross a b)))\n  ([a b c] (m/normalize (m/cross (m/- b a) (m/- c a)))))\n\n;; Triangles\n\n(defn norm-sign2\n  [[ax ay] [bx by] [cx cy]]\n  (- (mm/subm bx ax cy ay) (mm/subm cx ax by ay)))\n\n(defn norm-sign3\n  [a b c] (m/mag (m/cross (m/- b a) (m/- c a))))\n\n(defn tri-area2\n  [a b c] (* 0.5 (norm-sign2 a b c)))\n\n(defn tri-area3\n  [a b c] (* 0.5 (norm-sign3 a b c)))\n\n(defn clockwise2?\n  [a b c] (neg? (norm-sign2 a b c)))\n\n(defn clockwise3?\n  [a b c n] (pos? (m/dot (m/cross (m/- b a) (m/- c a)) n)))\n\n(defn triangle-barycentric-coords\n  ([[a b c] p]\n   (triangle-barycentric-coords a b c p (m/- b a) (m/- c a)))\n  ([a b c p]\n   (triangle-barycentric-coords a b c p (m/- b a) (m/- c a)))\n  ([a b c p u v]\n   (let [w (m/- p a)\n         uu (m/mag-squared u)\n         vv (m/mag-squared v)\n         uv (m/dot u v)\n         wu (m/dot w u)\n         wv (m/dot w v)\n         denom (/ 1.0 (mm/msub uv uv uu vv))\n         s (* denom (mm/msub uv wv vv wu))\n         t (* denom (mm/msub uv wu uu wv))]\n     [(- 1.0 (+ s t)) s t])))\n\n(defn point-in-triangle2?\n  [p a b c]\n  (if (clockwise2? a b c)\n    (and (>= (norm-sign2 a c p) 0.0)\n         (>= (norm-sign2 b a p) 0.0)\n         (>= (norm-sign2 c b p) 0.0))\n    (and (>= (norm-sign2 b c p) 0.0)\n         (>= (norm-sign2 a b p) 0.0)\n         (>= (norm-sign2 c a p) 0.0))))\n\n(defn point-in-triangle3?\n  [p a b c]\n  (let [u (m/- b a)\n        v (m/- c a)\n        n (ortho-normal u v)\n        cl (- (m/dot n p) (m/dot n a))]\n    (if (m/delta= 0.0 cl)\n      (let [[u v w] (triangle-barycentric-coords a b c p u v)]\n        (and (>= u 0.0) (>= w 0.0) (m/in-range? 0.0 1.0 v))))))\n\n;; Area & volume\n;; Volume calculation is using signed volume implementation of Triangle3\n\n(defn- tessellating-transducer\n  [f]\n  (comp\n   (mapcat tessellate-with-first)\n   (map f)))\n\n(def ^:private area-xf\n  (tessellating-transducer #(->> % (apply tri-area3) m/abs*)))\n\n(def ^:private volume-xf\n  (tessellating-transducer #(m/dot (% 0) (m/cross (% 1) (% 2)))))\n\n(defn total-area-3d\n  ([faces] (transduce area-xf + faces))\n  ([xf faces] (transduce (comp xf area-xf) + faces)))\n\n(defn total-volume\n  ([faces] (/ (transduce volume-xf + faces) 6.0))\n  ([xf faces] (/ (transduce (comp xf volume-xf) + faces) 6.0)))\n\n;; Bounds (w/ types)\n\n(defn bounding-rect\n  [points]\n  (let [[p size] (bounding-rect-raw points)]\n    (if p (Rect2. p size))))\n\n(defn bounding-box\n  [points]\n  (let [[p size] (bounding-box-raw points)]\n    (if p (AABB. p size))))\n\n(defn bounding-circle\n  ([points]\n   (bounding-circle (centroid points) points))\n  ([c r-or-points]\n   (let [[c r] (radial-bounds vec2 c r-or-points)]\n     (Circle2. c r))))\n\n(defn bounding-sphere\n  ([points]\n   (bounding-sphere (centroid points) points))\n  ([c r-or-points]\n   (let [[c r] (radial-bounds vec3 c r-or-points)]\n     (Sphere. c r))))\n\n(defn coll-bounds\n  \"Takes a seq of shape entities, calls g/bounds on each and returns\n  union bounds. Does not support collections of mixed 2d/3d entities.\"\n  [coll]\n  (reduce m/union (mapv g/bounds coll)))\n\n(defn fit-all-into-bounds\n  \"Takes an AABB or rect and seq of shapes, proportionally scales and\n  repositions all items to fit into given bounds. Returns lazyseq of\n  transformed entities. Does not support collections of mixed 2D/3D\n  entities. Use rects as target bounds for 2D colls.\"\n  [bounds coll]\n  (let [b (coll-bounds coll)\n        s (reduce min (m/div (get bounds :size) (get b :size)))\n        b' (g/center (g/scale b s) (g/centroid bounds))]\n    (map\n     #(-> %\n          (g/center (g/unmap-point b' (g/map-point b (g/centroid %))))\n          (g/scale-size s))\n     coll)))\n\n;; Meshes\n\n(defn into-mesh\n  \"Takes a target mesh, its add-face fn and a source mesh or face\n  sequence. Adds faces to target mesh and returns it.\"\n  [mesh add-face mesh-or-faces]\n  (reduce\n   add-face\n   mesh\n   (if (satisfies? g/IFaceAccess mesh-or-faces)\n     (g/faces mesh-or-faces true)\n     mesh-or-faces)))\n\n(defn map-mesh\n  \"Applies f to all faces of given mesh and adds resulting faces to\n  new mesh. Thus f should return a seq of raw faces (i.e. each face as\n  2-elem vector of [verts attribs]. Returns new mesh.\"\n  [f mesh] (g/into (g/clear* mesh) (mapcat f (g/faces mesh true))))\n\n;; TODO how to use this w/ IndexedMesh? Faces only store vertex IDs\n(defn transform-mesh\n  \"Takes a mesh, its add-face fn and a vertex transformation fn.\n  Transforms all mesh vertices and returns new mesh.\"\n  [mesh add-face tx]\n  (let [tx     (if (satisfies? g/IVectorTransform tx)\n                 (fn [v] (g/transform-vector tx v))\n                 tx)\n        verts' (->> (g/vertices mesh)\n                    (reduce\n                     (fn [acc v] (assoc! acc v (tx v)))\n                     (transient (hash-map)))\n                    (persistent!))]\n    (reduce\n     (fn [mesh [fv fa]] (add-face mesh [(mapv verts' fv) fa]))\n     (g/clear* mesh) (g/faces mesh true))))\n"]}