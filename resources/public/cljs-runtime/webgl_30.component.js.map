{"version":3,"sources":["webgl_30/component.cljs"],"mappings":"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","names":["webgl-30.component/deg->rad","a","Math/PI","webgl-30.component/rad->deg","p__25982","map__25983","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core.get.cljs$core$IFn$_invoke$arity$3","webgl-30.component/slider","on-change","value","min","max","step","id","evt","val","js/parseFloat","webgl-30.component/slider-row","label","p__25996","map__25997","webgl-30.component/slider-component","state","trigger-event","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","G__25999","G__26000","G__26001","G__26002","G__26003","G__26004","G__26005","G__26006","G__26007","Math/round","G__26008","G__26009","G__26010","G__26011","G__26012","G__26013","G__26014","G__26015","G__26016","G__26017","G__26018","G__26019","G__26020","G__26021","G__26022","G__26023","p__26024","map__26025","webgl-30.component/webgl-canvas","height","width","style","on-mount","on-unmount","reagent.core.create_class.cljs$core$IFn$_invoke$arity$1","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","gl","js/document.querySelector","p__26033","map__26034","webgl-30.component/app","G__26036","webgl-30.component/map-coordinate","s","src-min","src-max","res-min","res-max","p__26048","map__26049","webgl-30.component/unit-circle","radius","local-state-atom","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","p__26051","map__26052","map__26054","cljs.core/deref","x-pos","y-pos","mouse-down","min-x","max-x","min-y","max-y","half-width","half-height","txt-style","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","svg","pt","_","svg-p","x","y","unit-x","unit-y","angle-rad","Math/atan2","cos-x","Math/cos","sin-y","Math/sin","svg-x","svg-y","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","G__26056","webgl_30.core.format.cljs$core$IFn$_invoke$arity$variadic","cljs.pprint.cl_format.cljs$core$IFn$_invoke$arity$variadic"],"sourcesContent":["(ns webgl-30.component\n  (:require [reagent.core :as r]\n            [webgl-30.core :refer [format]]))\n\n(defn deg->rad\n  [a]\n  (* a (/ Math/PI 180)))\n\n(defn rad->deg\n  [a]\n  (* a (/ 180 Math/PI)))\n\n(defn slider\n  [{:keys [on-change value min max step id] :or {step 1}}]\n  [:input {:type      \"range\"\n           :id        id\n           :value     value\n           :step      step\n           :min       min\n           :max       max\n           :style     {:width  \"100%\"\n                       :cursor \"pointer\"}\n           :on-change (fn [evt]\n                        (let [val (js/parseFloat (.. evt -target -value))]\n                          (on-change val)))}])\n\n(defn slider-row\n  [label value min max on-change]\n  [:tr\n   [:td label]\n   [:td\n    [slider {:value     value\n             :id        :rect-x\n             :min       min\n             :max       max\n             :on-change on-change}]]\n   [:td [:span value]]])\n\n(defn slider-component\n  [{:keys [state trigger-event]}]\n  [:table {:style {:width        \"200px\"\n                   :table-layout \"fixed\"}}\n   [:tbody\n    [slider-row \"x\" (get-in state [:translation-rect :x]) (- 200) 200 (fn [val] (trigger-event :data-change {:path  [:translation-rect :x]\n                                                                                                             :value val}))]\n    [:tr\n     [:td [:span \"y\"]]\n     [:td [slider {:value     (get-in state [:translation-rect :y])\n                   :id        :rect-y\n                   :min       (- 200)\n                   :max       200\n                   :on-change (fn [val] (trigger-event :data-change {:path  [:translation-rect :y]\n                                                                     :value val}))}]]\n     [:td [:span (get-in state [:translation-rect :y])]]]\n    [:tr\n     [:td [:span \"z\"]]\n     [:td [slider {:value     (get-in state [:translation-rect :z])\n                   :min       -1000\n                   :max       1\n                   :id        :rect-z\n                   :on-change (fn [val] (trigger-event :data-change {:path  [:translation-rect :z]\n                                                                     :value val})\n                                )}]]\n\n     [:td [:span (get-in state [:translation-rect :z])]]]\n    [:tr\n     [:td [:span \"rot-x\"]]\n     [:td [slider {:value     (rad->deg (get-in state [:translation-rect :rotation-x]))\n                   :id        :rect-deg\n                   :min       0\n                   :max       360\n                   :on-change (fn [val]\n                                (trigger-event :data-change {:path  [:translation-rect :rotation-x]\n                                                             :value (deg->rad val)})\n                                )}]]\n     [:td [:span (-> (get-in state [:translation-rect :rotation-x])\n                     rad->deg\n                     Math/round)]]]\n    [:tr\n     [:td [:span \"rot-y\"]]\n     [:td [slider {:value     (rad->deg (get-in state [:translation-rect :rotation-y]))\n                   :id        :rect-deg\n                   :min       0\n                   :max       360\n                   :on-change (fn [val]\n                                (trigger-event :data-change {:path  [:translation-rect :rotation-y]\n                                                             :value (deg->rad val)})\n                                )}]]\n     [:td [:span (-> (get-in state [:translation-rect :rotation-y])\n                     rad->deg\n                     Math/round)]]]\n    [:tr\n     [:td [:span \"rot-z\"]]\n     [:td [slider {:value     (rad->deg (get-in state [:translation-rect :rotation-z]))\n                   :id        :rect-deg\n                   :min       0\n                   :max       360\n                   :on-change (fn [val]\n                                (trigger-event :data-change {:path  [:translation-rect :rotation-z]\n                                                             :value (deg->rad val)})\n                                )}]]\n     [:td [:span (-> (get-in state [:translation-rect :rotation-z])\n                     rad->deg\n                     Math/round)]]]\n    [:tr\n     [:td [:span {:style {:white-space \"nowrap\"}} \"scale-x\"]]\n     [:td [slider {:value     (get-in state [:translation-rect :scale-x])\n                   :id        :rect-scale-x\n                   :step      0.01\n                   :min       -5\n                   :max       5\n                   :on-change (fn [val]\n                                (trigger-event :data-change {:path  [:translation-rect :scale-x]\n                                                             :value val})\n                                )}]]\n     [:td [:span (get-in state [:translation-rect :scale-x])]]]\n    [:tr\n     [:td [:span {:style {:white-space \"nowrap\"}} \"scale-y\"]]\n     [:td [slider {:value     (get-in state [:translation-rect :scale-y])\n                   :id        :rect-scale-y\n                   :step      0.01\n                   :min       -5\n                   :max       5\n                   :on-change (fn [val]\n                                (trigger-event :data-change {:path  [:translation-rect :scale-y]\n                                                             :value val}))}]]\n     [:td [:span (get-in state [:translation-rect :scale-y])]]]\n    [:tr\n     [:td [:span {:style {:white-space \"nowrap\"}} \"scale-z\"]]\n     [:td [slider {:value     (get-in state [:translation-rect :scale-z])\n                   :id        :rect-scale-z\n                   :step      0.01\n                   :min       -5\n                   :max       5\n                   :on-change (fn [val]\n                                (trigger-event :data-change {:path  [:translation-rect :scale-z]\n                                                             :value val}))}]]\n     [:td [:span (get-in state [:translation-rect :scale-z])]]]\n    [:tr\n     [:td [:span {:style {:white-space \"nowrap\"}} \"field-of-view\"]]\n     [:td [slider {:value     (rad->deg (get-in state [:translation-rect :field-of-view]))\n                   :id        :field-of-view\n                   :step      0.01\n                   :min       0\n                   :max       360\n                   :on-change (fn [val]\n                                (trigger-event :data-change {:path  [:translation-rect :field-of-view]\n                                                             :value (deg->rad val)}))}]]\n     [:td [:span (rad->deg (get-in state [:translation-rect :field-of-view]))]]]\n\n    [slider-row \"camera\" (int (rad->deg (get-in state [:camera :angle-rad]))) 0 360\n     (fn [val]\n       (trigger-event :data-change {:path  [:camera :angle-rad]\n                                    :value (deg->rad val)}))]]])\n\n(defn webgl-canvas\n  [{:keys [height width style id on-mount on-unmount] :or {on-unmount (fn [])}}]\n  (r/create-class\n    {:display-name           \"webgl-canvas\"\n     :reagent-render         (fn [] [:canvas {:width  (str width \"px\")\n                                              :height (str height \"px\")\n                                              :style  (merge {:border \"1px dashed green\"} style)\n                                              :id     id}])\n     :component-did-mount    on-mount\n     :component-will-unmount (fn []\n                               (let [gl (-> (str \"#\" id)\n                                            js/document.querySelector\n                                            (.getContext \"webgl\"))]\n                                 (.loseContext (.getExtension gl \"WEBGL_lose_context\"))\n\n                                 (on-unmount)\n\n                                 ))}))\n\n(defn app\n  [{:keys [state trigger-event]}]\n  [:div\n   [slider-component {:trigger-event trigger-event\n                      :state         state}]\n   [:div {:style    {:border \"1px dashed orange\"}\n          :on-click (fn [] (trigger-event :toggle-animation))} (if (get-in state [:animate :running?]) \"Stop\" \"Play\")]\n   [webgl-canvas {:trigger-event trigger-event :state state}]])\n\n\n(defn map-coordinate\n  [s src-min src-max res-min res-max]\n  (+\n    (*\n      (/ (- s src-min)\n         (- src-max src-min))\n      (- res-max res-min))\n    res-min))\n\n(defn unit-circle\n  [{:keys [height width radius] :or {height 100 width 100 radius 40}}]\n  (let [local-state-atom (r/atom {:x-pos       (- (/ width 2) radius)\n                                  :y-pos       (/ height 2)\n                                  :width       width\n                                  :half-width  (/ width 2)\n                                  :height      height\n                                  :half-height (/ height 2)\n                                  :min-x       (- (/ width 2) radius)\n                                  :max-x       (+ (/ width 2) radius)\n                                  :min-y       (- (/ height 2) radius)\n                                  :max-y       (+ (/ height 2) radius)\n                                  :radius      radius\n                                  :mouse-down  false})]\n    (fn [{:keys [height width radius on-change] :or {height 100 width 100 radius 40}}]\n      (let [{:keys [x-pos y-pos mouse-down min-x max-x min-y max-y half-width half-height]} @local-state-atom\n            txt-style {:font-size \"5px\" :opacity 0.7 :user-select \"none\"}]\n        [:svg {:viewBox       (str \"0 0 \" width \" \" height)\n               :height        height\n               :width         width\n               :id            \"unit-circle\"\n               :style         {:border \"1px dashed orange\"}\n               :on-mouse-up   (fn [] (swap! local-state-atom assoc :mouse-down false))\n               :on-mouse-move (fn [evt]\n                                (when mouse-down\n                                  (let [svg (js/document.querySelector \"#unit-circle\")\n                                        pt (-> svg .createSVGPoint)\n                                        _ (aset pt \"x\" (aget evt \"clientX\"))\n                                        _ (aset pt \"y\" (aget evt \"clientY\"))\n                                        svg-p (.matrixTransform pt (.inverse (.getScreenCTM svg)))\n\n                                        x (aget svg-p \"x\")\n                                        y (aget svg-p \"y\")\n                                        unit-x (map-coordinate x min-x max-x -1 1)\n                                        unit-y (map-coordinate y min-y max-y -1 1)\n                                        angle-rad (Math/atan2 unit-y unit-x)\n                                        cos-x (Math/cos angle-rad)\n                                        sin-y (Math/sin angle-rad)\n                                        svg-x (map-coordinate cos-x -1 1 min-x max-x)\n                                        svg-y (map-coordinate sin-y -1 1 min-y max-y)]\n                                    (swap! local-state-atom (fn [state]\n                                                              (-> (assoc state :x-pos svg-x)\n                                                                  (assoc :y-pos svg-y))))\n                                    (on-change {:x cos-x :y sin-y :angle-rad angle-rad}))))\n               :xmlns         \"http://www.w3.org/2000/svg\"}\n         ;; vertical\n         [:path {:d (str \"M\" min-x \" 0 L\" min-x \" \" width) :stroke \"gray\"}]\n         [:path {:d (format \"M~d 0 L~d ~d\" half-width half-width width) :stroke \"gray\"}]\n         [:path {:d (format \"M~d 0 L~d ~d\" half-width half-width width) :stroke \"gray\"}]\n         [:path {:d (format \"M~d 0 L~d ~d\" max-x max-x height) :stroke \"gray\"}]\n         ;; horizontal\n         [:path {:d (format \"M0 ~d L~d ~d\" min-y width min-y) :stroke \"gray\"}]\n         [:path {:d (format \"M0 ~d L~d ~d\" half-height width half-height) :stroke \"gray\"}]\n         [:path {:d (format \"M0 ~d L~d ~d\" max-y width max-y) :stroke \"gray\"}]\n\n         [:text {:x (+ half-width 2) :y (+ half-height 5) :fill \"white\" :style txt-style} \"0\"]\n         [:text {:x (+ min-x 2) :y (+ half-height 5) :fill \"white\" :style txt-style} \"-1\"]\n         [:text {:x (- max-y 5) :y (+ half-height 5) :fill \"white\" :style txt-style} \"1\"]\n\n         [:text {:x (+ half-width 2) :y (+ min-y 5) :fill \"white\" :style txt-style} \"1\"]\n         [:text {:x (+ half-width 2) :y (- max-y 2) :fill \"white\" :style txt-style} \"-1\"]\n\n         [:polygon {:points (str half-width \",\" half-height \" \" (int x-pos) \",\" (int y-pos) \" \" (int x-pos) \",\" half-height)\n                    :fill   \"rgba(34, 167, 240, 0.6)\"}]\n\n         [:text {:x x-pos :y (+ half-height 5) :fill \"white\" :style {:font-size \"4px\" :user-select \"none\"}} (str \"x=\" (cljs.pprint/cl-format nil \"~,2f\" (map-coordinate x-pos 10 90 -1 1)))]\n         [:text {:x x-pos :y y-pos :fill \"white\" :style {:font-size \"4px\" :user-select \"none\"}} (str \"y=\" (cljs.pprint/cl-format nil \"~,2f\" (map-coordinate y-pos 10 90 -1 1)))]\n\n         [:circle {:cx            x-pos :cy y-pos :r \"7px\" :stroke \"white\" :fill \"rgba(170,188,255, 0.7)\" :stroke-width 1\n                   :on-mouse-down (fn [] (swap! local-state-atom assoc :mouse-down true))\n                   :style         {:cursor \"pointer\"}}]\n\n         [:defs\n          [:marker {:id \"arrow-head\" :markerWidth 10 :markerHeight 7 :refX 10 :refY 3.5 :orient \"auto\"}\n           [:polygon {:points \"0 0, 10 3.5, 0 7\" :stroke \"white\" :fill \"white\"}]]]\n         [:path {:d (format \"M~d ~d L ~d ~d\" half-width half-height x-pos y-pos) :stroke \"orange\" :marker-end \"url(#arrow-head\"}]\n\n         [:circle {:cx half-width :cy half-height :r radius :stroke \"white\" :fill \"none\" :stroke-width 1}]]))))\n\n\n"]}