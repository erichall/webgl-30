{"version":3,"sources":["webgl_30/lessons/conway.cljs"],"mappings":"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","names":["webgl-30.lessons.conway/initial-state","cljs.core/set","iter__4582__auto__","s__26710","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","xs__6292__auto__","cljs.core/first","iterys__4578__auto__","s__26715","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__26717","cljs.core/chunk-buffer","i__26716","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__26714","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4579__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__26709","x","cljs.core.range.cljs$core$IFn$_invoke$arity$2","y","js/webgl-30","js/webgl-30.lessons","js/webgl-30.lessons.conway","js/webgl-30.lessons.conway.cell->rect-lookup-atom","webgl-30.lessons.conway/cell->rect-lookup-atom","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","js/webgl-30.lessons.conway.state-atom","webgl-30.lessons.conway/state-atom","cljs.core/deref","cljs.core/reset!","webgl-30.lessons.conway/vertex-shader","webgl-30.lessons.conway/fragment-shader","webgl-30.lessons.conway/raf-draw!","state","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","js/requestAnimationFrame","t","webgl-30.lessons.conway/draw!","p__26767","map__26768","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","timestamp","gl","cell-size","objects-to-draw","cells","a-position-buffer","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","js/Float32Array","webgl-30.lessons.conway-core/lookup->data","n","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","webgl-30.webgl-id2/uniform4f","G__26773","webgl_30.webgl_id2.set_viewport_BANG_.cljs$core$IFn$_invoke$arity$3","webgl-30.webgl-id2/refresh-vertex-buffer!","webgl_30.webgl_id2.clear_color_BANG_.cljs$core$IFn$_invoke$arity$variadic","webgl_30.webgl_id2.clear_BANG_.cljs$core$IFn$_invoke$arity$variadic","webgl_30.webgl_id2.draw_arrays_BANG_.cljs$core$IFn$_invoke$arity$variadic","seconds-passed","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","webgl-30.lessons.conway-core/tick","G__26775","Math/round","webgl-30.lessons.conway/setup!","p__26783","map__26784","program","webgl-30.webgl-id2/init-shaders","a-position-attribute","webgl-30.webgl-id2/attribute","webgl-30.webgl-id2/uniform","webgl-30.webgl-id2/initialize-vertex-buffer!","map__26797","webgl_30.webgl_id2.uniform2f.cljs$core$IFn$_invoke$arity$variadic","webgl-30.lessons.conway/float32-conj","a","data","length","new-arr","webgl-30.lessons.conway/on-grid-click!","evt","svg","js/document.getElementById","pt","_","svg-p","cx","G__26816","Math/floor","cy","G__26817","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update","cljs.core/conj","p__26819","map__26824","webgl-30.lessons.conway/grid-2d","height","width","style","stroke-width","grid-color","webgl_30.core.format.cljs$core$IFn$_invoke$arity$variadic","s__26827","b__26829","i__26828","iter__26826","s","cljs.core.range.cljs$core$IFn$_invoke$arity$3","or__4185__auto__","webgl-30.lessons.conway/start","canvas-id","webgl-30.webgl-id2/get-context","webgl-30.lessons.conway/step","webgl-30.lessons.conway/lesson","webgl-30.core/get-filename","w","h","webgl-30.component/webgl-canvas","webgl-30.lessons.conway-core/cell-lookup-map","cljs.core/chunk-first"],"sourcesContent":["(ns webgl-30.lessons.conway\n  (:require\n    [reagent.core :as r]\n    [webgl-30.webgl-id2 :as w]\n    [webgl-30.core :as c]\n    [webgl-30.input :as i]\n    [webgl-30.lessons.conway-core :as cc]\n    [webgl-30.component :refer [webgl-canvas]]))\n\n(def initial-state {:gl             nil\n                    :raf-id         nil\n                    :running?       false\n                    :cell-size      4\n                    :toroidal?      true\n                    :grid-size      1024\n                    :fps            nil\n                    :last-timestamp 0\n                    ;:cells     #{[1 0] [1 1] [1 2]}\n                    ;:cells          #{[0 0] [2 0] [1 1] [1 2] [2 1]}\n                    :cells          (set (for [x (range 0 150)\n                                               y (range 0 150)]\n                                           [x y]))\n                    })\n(defonce cell->rect-lookup-atom (atom nil))\n(defonce state-atom (atom nil))\n(when (nil? @state-atom)\n  (reset! state-atom initial-state))\n\n(declare draw!)\n\n(def vertex-shader\n  \"attribute vec2 a_position;\n\n   uniform vec2 u_resolution;\n\n   void main() {\n       // convert the position from pixels to [0.0,1.0]\n       vec2 zeroToOne = a_position / u_resolution;\n\n       // convert from 0->1 to 0->2\n       vec2 zeroToTwo = zeroToOne * 2.0;\n\n       // convert from 0->2 to -1->+1 (clip space)\n       vec2 clipSpace = zeroToTwo - 1.0;\n\n       // * vec(1, -1) flips y so it's top-left corner.\n       gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\n   }\")\n\n(def fragment-shader\n  \"\n  precision mediump float;\n  uniform vec4 u_fragcolor;\n  void main() {\n       gl_FragColor = u_fragcolor;\n   }\")\n\n\n(defn raf-draw!\n  [state]\n  (swap! state-atom assoc :raf-id (js/requestAnimationFrame (fn [t] (draw! t state)))))\n\n(defn draw!\n  [timestamp {:keys [gl cell-size objects-to-draw cells] :as state}]\n  (let [a-position-buffer (-> (get-in objects-to-draw [:the-object :buffers :a-position-buffer])\n                              (assoc :data (js/Float32Array.\n                                             ;(cc/cells->rects cells cell-size)\n                                             (cc/lookup->data @cell->rect-lookup-atom cells)\n                                             )))\n        n (* (count cells) 12)]\n    (apply w/uniform4f gl (get-in objects-to-draw [:the-object :uniforms :u-fragcolor :location]) [0.0 1.0 0.0 1.0])\n\n    (doto gl\n      (w/set-viewport! (aget gl \"canvas\" \"width\") (aget gl \"canvas\" \"height\"))\n      (w/refresh-vertex-buffer! a-position-buffer)\n      (w/clear-color! 0.0 0.0 0.0 1.0)\n      (w/clear! (.-COLOR_BUFFER_BIT gl))\n      (w/draw-arrays! (.-TRIANGLES gl) 0 (/ n 2)))\n\n    (let [state @state-atom\n          seconds-passed (/ (- timestamp (:last-timestamp state)) 1000)]\n      (when (:running? state)\n        (-> (swap! state-atom (fn [state]\n                                (-> (assoc state :cells (cc/tick state))\n                                    (assoc :last-timestamp timestamp)\n                                    (assoc :fps (Math/round (/ 1 seconds-passed))))))\n            ;raf-draw!\n            )))))\n\n(defn setup!\n  []\n  (swap! state-atom (fn [{:keys [gl] :as state}]\n                      (let [program (w/init-shaders gl vertex-shader fragment-shader)\n                            a-position-attribute (w/attribute gl program {:name \"a_position\" :size 2})]\n\n                        ;; performance??\n                        (.bindAttribLocation gl program (:location a-position-attribute) \"a_position\")\n\n                        (-> (assoc state :objects-to-draw\n                                         {:the-object\n                                          {:program    program\n                                           :uniforms   {:u-fragcolor  (w/uniform gl program {:name \"u_fragcolor\"})\n                                                        :u-resolution (w/uniform gl program {:name \"u_resolution\"})}\n                                           :attributes {:a-position a-position-attribute}\n                                           :buffers    {:a-position-buffer (w/initialize-vertex-buffer! gl {:data      (js/Float32Array. [])\n                                                                                                            :usage     (.-DYNAMIC_DRAW gl)\n                                                                                                            :attribute a-position-attribute})}}})))))\n\n  (let [{:keys [gl objects-to-draw]} @state-atom]\n    (w/uniform2f gl (get-in objects-to-draw [:the-object :uniforms :u-resolution :location]) (aget gl \"canvas\" \"width\") (aget gl \"canvas\" \"height\")))\n  )\n\n\n\n(defn float32-conj\n  [a data]\n  (let [length (.-length a)\n        new-arr (js/Float32Array. (+ length (count data)))]\n    (.set new-arr a)\n    (.set new-arr data length)\n    new-arr))\n\n(defn on-grid-click!\n  [evt]\n  (let [svg (js/document.getElementById \"2d-grid\")\n        pt (-> svg .createSVGPoint)\n        _ (aset pt \"x\" (aget evt \"clientX\"))\n        _ (aset pt \"y\" (aget evt \"clientY\"))\n        svg-p (.matrixTransform pt (.inverse (.getScreenCTM svg)))\n\n        x (aget svg-p \"x\")\n        y (aget svg-p \"y\")\n        cell-size (:cell-size @state-atom)\n        cx (Math/floor (/ x cell-size))\n        cy (Math/floor (/ y cell-size))]\n    (swap! state-atom update :cells conj [cx cy])\n    ))\n\n(defn grid-2d\n  [{:keys [height width cell-size style stroke-width grid-color]}]\n  [:svg {:viewBox  (c/format \"0 0 ~a ~a\" width height)\n         :id       \"2d-grid\"\n         :width    width\n         :height   height\n         :style    style\n         :on-click on-grid-click!}\n   (for [s (range cell-size width cell-size)]\n     [:g {:key s}\n      [:line {:x1    0 :y1 s :x2 width :y2 s\n              :style {:stroke (or grid-color \"gray\") :stroke-width stroke-width}}]\n      [:line {:x1    s :y1 0 :x2 s :y2 height\n              :style {:stroke (or grid-color \"gray\") :stroke-width stroke-width}}]])])\n\n(defn start\n  [canvas-id]\n  (do\n    (swap! state-atom assoc :gl (w/get-context canvas-id))\n    (setup!)\n    (raf-draw! @state-atom)\n    (swap! state-atom assoc :running? true)\n    )\n  )\n\n(defn step\n  []\n  (raf-draw! @state-atom))\n\n(def ^:export lesson\n  {:title           (fn []\n                      [:div\n                       [:h1 {:style {:font-family \"monospace\"}}\n                        \"\"]\n                       [:h4 {:style {:font-family \"monospace\"}}\n                        \"Conway!\"]])\n   :source          (c/get-filename #'state-atom)\n   :tutorial-source \"\"\n   :start           (fn []\n                      (let [canvas-id \"fundamentals\"\n                            w (:grid-size @state-atom)\n                            h (:grid-size @state-atom)]\n                        [:div\n                         [:p (:fps @state-atom)]\n                         [:button {:on-click (fn [] (start canvas-id))} \"Run\"]\n                         [:button {:on-click step} \"Step\"]\n                         [:div {:style {:display               \"grid\"\n                                        :grid-template-columns \"1fr\"}}\n                          [webgl-canvas {:height   h\n                                         :width    w\n                                         :id       canvas-id\n                                         :style    {:grid-row-start    1\n                                                    :grid-column-start 1\n                                                    :border            \"none\"}\n                                         :on-mount (fn []\n                                                     (let [gl (w/get-context canvas-id)]\n                                                       (when (nil? @cell->rect-lookup-atom)\n                                                         (reset! cell->rect-lookup-atom (cc/cell-lookup-map (:grid-size @state-atom) (:cell-size @state-atom))))\n                                                       ;(do\n                                                       ;  (swap! state-atom assoc :gl gl)\n                                                       ;  (setup!)\n                                                       ;  (raf-draw! @state-atom)\n                                                       ;  (swap! state-atom assoc :running? true)\n                                                       ;  )\n                                                       ))}]\n\n                          [grid-2d {:height       h\n                                    :width        w\n                                    :cell-size    (:cell-size @state-atom)\n                                    :stroke-width 0.5\n                                    :grid-color   \"blue\"\n                                    :style        {:grid-row-start    1\n                                                   :grid-column-start 1\n                                                   :z-index           1}}]\n                          ]]))})\n"]}