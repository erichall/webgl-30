{"version":3,"sources":["webgl_30/lessons/perspective_3d_1.cljs"],"mappings":"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","names":["webgl-30.lessons.perspective_3d_1/initial-state","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","webgl-30.math/deg->rad","js/webgl-30","js/webgl-30.lessons","js/webgl-30.lessons.perspective_3d_1","js/webgl-30.lessons.perspective_3d_1.state-atom","webgl-30.lessons.perspective_3d_1/state-atom","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/deref","cljs.core/reset!","webgl-30.lessons.perspective_3d_1/fragment-shader","webgl-30.lessons.perspective_3d_1/vertex-shader","p__26166","map__26167","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","webgl-30.lessons.perspective_3d_1/multiply-matrices","rect","gl","map__26169","translation","scale","rotation","fudge-factor","field-of-view","aspect","webgl-30.webgl/get-aspect","z-near","z-far","perspective-matrix","webgl-30.math/perspective-3d-matrix","translation-matrix","webgl-30.math/translation-3d-matrix","rotation-matrix-x","webgl-30.math/rotation-3d-x-matrix","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","rotation-matrix-y","webgl-30.math/rotation-3d-y-matrix","rotation-matrix-z","webgl-30.math/rotation-3d-z-matrix","scale-matrix","webgl-30.math/scaling-3d-matrix","webgl-30.math/matrix-multiply-3d","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","webgl-30.lessons.perspective_3d_1/format","seq26181","G__26182","cljs.core/first","cljs.core/next","self__4776__auto__","f","xs","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","cljs.pprint/cl-format","webgl-30.lessons.perspective_3d_1/draw!","timestamp","map__26193","state","cljs.core/assoc-in","webgl-30.webgl/draw-scene!","p__26203","map__26204","cljs.core.get.cljs$core$IFn$_invoke$arity$3","webgl-30.lessons.perspective_3d_1/slider-component","on-change","label","value","id","min","max","step","display-value","webgl-30.component/slider","or__4185__auto__","webgl-30.lessons.perspective_3d_1/setup!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","p__26216","map__26217","program","webgl-30.webgl/link-shaders!","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","webgl-30.webgl/attribute","js/Float32Array","webgl-30.shapes/f-shape-3d","js/Uint8Array","webgl-30.shapes/f-shape-3d-color","webgl-30.lessons.perspective_3d_1/lesson","webgl-30.core/get-filename","map__26239","canvas-id","webgl-30.component/webgl-canvas","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","webgl-30.webgl/get-context","js/requestAnimationFrame","val","webgl-30.math/rad->deg","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","webgl_30.lessons.perspective_3d_1.format.cljs$core$IFn$_invoke$arity$variadic"],"sourcesContent":["(ns webgl-30.lessons.perspective_3d_1\n  (:require [reagent.core :as r]\n            [webgl-30.math :as m]\n            [webgl-30.webgl :as webgl]\n            [webgl-30.shapes :as shapes]\n            [webgl-30.core :as c]\n            [webgl-30.component :refer [webgl-canvas slider]]))\n\n(def initial-state {:gl   nil\n                    :rect {:translation   [-150 0 -360]\n                           :rotation      (mapv m/deg->rad [190 40 320])\n                           :scale         [1 1 1]\n                           :field-of-view (m/deg->rad 60)\n                           :width         100\n                           :height        30\n                           :color         [0.3 0.3 0.3 1]}})\n(defonce state-atom (r/atom nil))\n(when (nil? @state-atom)\n  (reset! state-atom initial-state))\n\n(def fragment-shader\n  \"precision mediump float;\n\n   // we got this from the vertex shader!\n   varying vec4 v_color;\n\n   void main() {\n       gl_FragColor = v_color;\n   }\")\n\n(def vertex-shader\n  \"attribute vec4 a_position;\n   attribute vec4 a_color;\n\n  uniform mat4 u_matrix;\n\n  varying vec4 v_color;\n\n  void main() {\n    gl_Position = u_matrix * a_position;\n\n    // this can be passed to the fragment shader\n    v_color = a_color;\n  }\")\n\n(defn multiply-matrices\n  [{:keys [rect gl]}]\n  (let [{:keys [translation scale rotation fudge-factor field-of-view]} rect\n        aspect (webgl/get-aspect gl)\n        z-near 1\n        z-far 2000\n        perspective-matrix (m/perspective-3d-matrix field-of-view aspect z-near z-far)\n        translation-matrix (m/translation-3d-matrix translation)\n        rotation-matrix-x (m/rotation-3d-x-matrix (nth rotation 0))\n        rotation-matrix-y (m/rotation-3d-y-matrix (nth rotation 1))\n        rotation-matrix-z (m/rotation-3d-z-matrix (nth rotation 2))\n        scale-matrix (m/scaling-3d-matrix scale)]\n    (-> (m/matrix-multiply-3d perspective-matrix translation-matrix)\n        (m/matrix-multiply-3d rotation-matrix-x)\n        (m/matrix-multiply-3d rotation-matrix-y)\n        (m/matrix-multiply-3d rotation-matrix-z)\n        (m/matrix-multiply-3d scale-matrix))))\n\n(defn format\n  [f & xs]\n  (apply cljs.pprint/cl-format nil f xs))\n\n(defn draw!\n  [timestamp]\n  (let [{:keys [rect] :as state} @state-atom]\n    (-> (assoc-in state [:objects-to-draw :my-f :uniforms :u_matrix :values] (multiply-matrices state))\n        (assoc-in [:objects-to-draw :my-f :uniforms :u_fudgeFactor :values] [(:fudge-factor rect)])\n        webgl/draw-scene!)))\n\n(defn slider-component\n  [{:keys [on-change label value id min max step display-value] :or {step 1}}]\n  [:div {:style {:display        \"flex\"\n                 :flex-direction \"row\"}}\n   [:span {:style {:color        \"white\"\n                   :white-space  \"nowrap\"\n                   :margin-right \"10px\"}} label]\n   [slider {:on-change on-change\n            :value     value\n            :min       min\n            :step      step\n            :max       max\n            :id        id}]\n   [:span {:style {:color        \"white\"\n                   :margin-right \"10px\"}} (or display-value value)]])\n\n(defn setup!\n  []\n  (-> (swap! state-atom (fn [{:keys [gl rect] :as state}]\n                          (let [program (webgl/link-shaders! gl {:fs fragment-shader :vs vertex-shader})]\n                            (->\n                              (assoc state :clear-depth? true)\n                              (assoc :objects-to-draw\n                                     {:my-f {:program    program\n                                             :features   [(.-CULL_FACE gl) (.-DEPTH_TEST gl)]\n                                             :attributes {:a_position (webgl/attribute gl program {:name \"a_position\"\n                                                                                                   :size 3\n                                                                                                   :data (js/Float32Array. shapes/f-shape-3d)})\n                                                          :a_color    (webgl/attribute gl program {:name      \"a_color\"\n                                                                                                   :size      3\n                                                                                                   :type      (.-UNSIGNED_BYTE gl)\n                                                                                                   :normalize true\n                                                                                                   :data      (js/Uint8Array. shapes/f-shape-3d-color)})}\n                                             :uniforms   {:u_resolution  {:name   \"u_resolution\"\n                                                                          :type   \"uniform2f\"\n                                                                          :values [(aget gl \"canvas\" \"width\") (aget gl \"canvas\" \"height\")]}\n                                                          :u_matrix      {:name      \"u_matrix\"\n                                                                          :type      \"uniformMatrix4fv\"\n                                                                          :transpose false\n                                                                          :values    (multiply-matrices state)}\n                                                          :u_fudgeFactor {:name   \"u_fudgeFactor\"\n                                                                          :type   \"uniform1f\"\n                                                                          :values [1]}\n                                                          }\n                                             :element    {:draw-type (.-TRIANGLES gl)\n                                                          :offset    0\n                                                          :count     (* 16 6)}}})))))))\n\n(def ^:export lesson\n  {:title           (fn []\n                      [:div\n                       [:h1 {:style {:font-family \"monospace\"}}\n                        \"Lesson - Orthographic 3D\"]\n                       [:h4 {:style {:font-family \"monospace\"}}\n                        \"Matrix\"]])\n   :source          (c/get-filename #'state-atom)\n   :tutorial-source \"webgl-3d-perspective.html\"\n   :start           (fn []\n                      (let [canvas-id \"translation\"\n                            state @state-atom\n                            {:keys [translation scale rotation field-of-view]} (:rect state)]\n                        [:div {:style {:display        \"flex\"\n                                       :flex-direction \"row\"}}\n                         [webgl-canvas {:height   400\n                                        :width    400\n                                        :id       canvas-id\n                                        :on-mount (fn []\n                                                    (do\n                                                      (swap! state-atom assoc :gl (webgl/get-context canvas-id))\n                                                      (setup!)\n                                                      (js/requestAnimationFrame draw!)))}]\n                         [:div {:style {:margin-left \"30px\"}}\n                          ;; trans\n                          [slider-component {:on-change (fn [val]\n                                                          (swap! state-atom assoc-in [:rect :translation] (assoc translation 0 val))\n                                                          (js/requestAnimationFrame draw!))\n                                             :value     (first translation) :id :translate-x :min -200 :max 400 :label \"x\"}]\n                          [slider-component {:on-change (fn [val]\n                                                          (swap! state-atom assoc-in [:rect :translation] (assoc translation 1 val))\n                                                          (js/requestAnimationFrame draw!))\n                                             :value     (nth translation 1) :id :translate-y :min -200 :max 400 :label \"y\"}]\n                          [slider-component {:on-change (fn [val]\n                                                          (swap! state-atom assoc-in [:rect :translation] (assoc translation 2 val))\n                                                          (js/requestAnimationFrame draw!))\n                                             :value     (nth translation 2) :id :translate-z :min -1000 :max 0 :label \"z\"}]\n\n                          ;; scale\n                          [slider-component {:on-change (fn [val]\n                                                          (swap! state-atom assoc-in [:rect :scale] (assoc scale 0 val))\n                                                          (js/requestAnimationFrame draw!))\n                                             :value     (nth scale 0) :id :scale-x :min -5 :max 5 :label \"x-scale\" :step 0.1}]\n                          [slider-component {:on-change (fn [val]\n                                                          (swap! state-atom assoc-in [:rect :scale] (assoc scale 1 val))\n                                                          (js/requestAnimationFrame draw!))\n                                             :value     (nth scale 1) :id :scale-y :min -5 :max 5 :label \"y-scale\" :step 0.1}]\n                          [slider-component {:on-change (fn [val]\n                                                          (swap! state-atom assoc-in [:rect :scale] (assoc scale 2 val))\n                                                          (js/requestAnimationFrame draw!))\n                                             :value     (nth scale 2) :id :scale-z :min -5 :max 5 :label \"z-scale\" :step 0.1}]\n                          ;; rotation\n                          [slider-component {:on-change     (fn [val]\n                                                              (swap! state-atom assoc-in [:rect :rotation 0] (m/deg->rad val))\n                                                              (js/requestAnimationFrame draw!))\n                                             :value         (m/rad->deg (nth rotation 0)) :id :rotate-x :min 0 :max 365 :label \"x-rotation\"\n                                             :display-value (->> (get-in @state-atom [:rect :rotation 0])\n                                                                 m/rad->deg\n                                                                 (format \"~1f\"))}]\n                          [slider-component {:on-change     (fn [val]\n                                                              (swap! state-atom assoc-in [:rect :rotation 1] (m/deg->rad val))\n                                                              (js/requestAnimationFrame draw!))\n                                             :value         (m/rad->deg (nth rotation 1)) :id :rotate-y :min 0 :max 365 :label \"y-rotation\"\n                                             :display-value (->> (get-in @state-atom [:rect :rotation 1])\n                                                                 m/rad->deg\n                                                                 (format \"~1f\"))}]\n                          [slider-component {:on-change     (fn [val]\n                                                              (swap! state-atom assoc-in [:rect :rotation 2] (m/deg->rad val))\n                                                              (js/requestAnimationFrame draw!))\n                                             :value         (m/rad->deg (nth rotation 2)) :id :rotate-z :min 0 :max 365 :label \"z-rotation\"\n                                             :display-value (->> (get-in @state-atom [:rect :rotation 2])\n                                                                 m/rad->deg\n                                                                 (format \"~1f\"))}]\n                          ;; FoW\n                          [slider-component {:on-change     (fn [val]\n                                                              (swap! state-atom assoc-in [:rect :field-of-view] (m/deg->rad val))\n                                                              (js/requestAnimationFrame draw!))\n                                             :value         (m/rad->deg field-of-view) :id :fow :min 0 :max 360 :step 1 :label \"field-of-view\"\n                                             :display-value (->> field-of-view\n                                                                 m/rad->deg\n                                                                 (format \"~1f\")\n                                                                 )}]\n                          ]]))})\n"]}