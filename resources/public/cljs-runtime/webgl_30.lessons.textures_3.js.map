{"version":3,"sources":["webgl_30/lessons/textures_3.cljs"],"mappings":"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","names":["webgl-30.lessons.textures-3/initial-state","webgl-30.math/deg->rad","js/webgl-30","js/webgl-30.lessons","js/webgl-30.lessons.textures-3","js/webgl-30.lessons.textures-3.state-atom","webgl-30.lessons.textures-3/state-atom","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/deref","cljs.core/reset!","webgl-30.lessons.textures-3/fragment-shader","webgl-30.lessons.textures-3/vertex-shader","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","webgl-30.lessons.textures-3/format","seq26342","G__26343","cljs.core/first","cljs.core/next","self__4776__auto__","f","xs","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","cljs.pprint/cl-format","p__26358","map__26363","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","webgl-30.lessons.textures-3/draw!","timestamp","gl","viewport-height","viewport-width","state","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","webgl-30.webgl/bind-framebuffer!","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","webgl-30.webgl/draw-scene!","map__26382","map__26383","settings","field-of-view-radians","x-spacing","y-spacing","sec","aspect","webgl-30.webgl/get-aspect","z-near","z-far","projection-matrix","webgl-30.math/perspective-3d-matrix","cljs.core/empty?","map__26411","setting","z","r","Math/abs","G__26412","Math/sin","x","G__26415","y","G__26417","Math/cos","r2","params","type","min-fil-params","translation-matrix","webgl-30.math/translation-3d-matrix","matrix","webgl-30.math/matrix-multiply-3d","webgl-30.webgl/set-texture-params!","cljs.core/vals","webgl-30.core/set-last","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc-in","webgl_30.webgl.set_uniforms_BANG_.cljs$core$IFn$_invoke$arity$2","webgl-30.webgl/draw-arrays!","cljs.core/rest","webgl_30.webgl.set_gl_viewport_BANG_.cljs$core$IFn$_invoke$arity$1","map__26421","texture","program","webgl-30.webgl/bind-texture!","webgl_30.webgl.set_uniforms_BANG_.cljs$core$IFn$_invoke$arity$3","js/requestAnimationFrame","t","G__26425","G__26426","webgl-30.lessons.textures-3/raf-draw!","webgl-30.lessons.textures-3/setup!","p__26455","map__26456","fb-texture-params","framebuffer-width","webgl-30.webgl/get-canvas-width","framebuffer-height","webgl-30.webgl/get-canvas-height","fb-texture","webgl-30.webgl/create-a-texture","framebuffer","webgl-30.webgl/create-framebuffer","_","webgl_30.webgl.attach_texture_to_framebuffer.cljs$core$IFn$_invoke$arity$variadic","webgl-30.webgl/link-shaders!","js/Uint8Array","webgl_30.webgl.create_texture_BANG_.cljs$core$IFn$_invoke$arity$2","webgl_30.webgl.create_texture_from_img.cljs$core$IFn$_invoke$arity$4","webgl-30.webgl/attribute","js/Float32Array","webgl-30.lessons.textures-3/lesson","webgl-30.core/get-filename","canvas-id","webgl-30.core/ns-str","webgl-30.component/webgl-canvas","cljs.core/assoc","webgl-30.webgl/get-context"],"sourcesContent":["(ns webgl-30.lessons.textures-3\n  (:require [reagent.core :as r]\n            [webgl-30.math :as m]\n            [webgl-30.webgl :as webgl]\n            [webgl-30.shapes :as shapes]\n            [webgl-30.core :as c]\n            [webgl-30.component :refer [webgl-canvas slider]]))\n\n(def initial-state {:gl                  nil\n                    :running?            false\n                    :allocate-FB-texture false\n                    :rect                {:field-of-view-radians (m/deg->rad 60)}})\n(defonce state-atom (r/atom nil))\n(when (nil? @state-atom)\n  (reset! state-atom initial-state))\n\n(def fragment-shader\n  \"precision mediump float;\n\n   varying vec2 v_texcoord;\n\n   // The texture\n   uniform sampler2D u_texture;\n\n   void main() {\n       gl_FragColor = texture2D(u_texture, v_texcoord);\n   }\")\n\n(def vertex-shader\n  \"attribute vec4 a_position;\n   attribute vec2 a_texcoord;\n\n  uniform mat4 u_matrix;\n\n  varying vec2 v_texcoord;\n\n  void main() {\n    gl_Position = u_matrix * a_position;\n\n    // this can be passed to the fragment shader\n    v_texcoord = a_texcoord;\n  }\")\n\n(defn format\n  [f & xs]\n  (apply cljs.pprint/cl-format nil f xs))\n\n\n(defn draw!\n  [timestamp {:keys [gl viewport-height viewport-width] :as state}]\n\n  (when (:allocate-FB-texture state)\n    (swap! state-atom (fn [state] (-> (assoc state :allocate-FB-texture false))))\n\n    ;(let [t (get-in state [:objects-to-draw :my-f :textures :fb-texture])]\n    ;  (webgl/allocate-texture gl (.-TEXTURE_2D gl) (:texture t) (.-TEXTURE_2D gl) 0 (.-RGBA gl) viewport-width viewport-height 0 (.-RGBA gl) (.-UNSIGNED_BYTE gl) nil)))\n    )\n\n  (webgl/bind-framebuffer! gl (get-in state [:objects-to-draw :my-f :framebuffers :fb :framebuffer]))\n\n  (webgl/draw-scene! state)\n\n  (let [{:keys [gl settings]} @state-atom\n        {:keys [field-of-view-radians]} (:rect state)\n        x-spacing 1.2\n        y-spacing 0.7\n        sec (* 0.001 timestamp)\n        aspect (webgl/get-aspect gl)\n        z-near 1\n        z-far 2000\n        projection-matrix (m/perspective-3d-matrix field-of-view-radians aspect z-near z-far)]\n    (loop [settings settings]\n      (when-not (empty? settings)\n        (let [setting (first settings)\n              state @state-atom\n              z (+ (- 5) (:z setting))\n              r (* (Math/abs z) (Math/sin (* field-of-view-radians 0.5)))\n              x (* r (Math/sin (* sec 0.2)))\n              y (* r 0.5 (Math/cos (* sec 0.2)))\n              r2 (+ (* r 0.2) 1)\n              {:keys [params type]} (get-in state [:objects-to-draw :my-f :textures :fb-texture])\n              min-fil-params (:min-fil params)\n              translation-matrix (m/translation-3d-matrix [(+ x (* (:x setting) x-spacing r2)) (+ y (* (:y setting) y-spacing r2)) z])\n              matrix (m/matrix-multiply-3d projection-matrix translation-matrix)]\n\n          (webgl/set-texture-params! gl (get-in state [:objects-to-draw :my-f :textures :f-texture :texture]) type (vals (assoc params :min-fil (c/set-last min-fil-params (:filter setting)))))\n\n          (swap! state-atom assoc-in [:objects-to-draw :my-f :uniforms :u_matrix :values] matrix)\n          (webgl/set-uniforms! (:gl @state-atom) @state-atom)\n          (webgl/draw-arrays! (:gl @state-atom) (get-in @state-atom [:objects-to-draw :my-f :element]))\n\n          (recur (rest settings)))))\n\n    (webgl/bind-framebuffer! gl nil)\n    (webgl/set-gl-viewport! gl)\n\n    (let [{:keys [texture type]} (get-in @state-atom [:objects-to-draw :my-f :textures :fb-texture])\n          program (get-in @state-atom [:objects-to-draw :my-f :program])]\n      (webgl/bind-texture! gl type texture)\n      (swap! state-atom assoc-in [:objects-to-draw :my-f :uniforms :u_matrix :values] [2, 0, 0, 0,\n                                                                                       0, 2, 0, 0,\n                                                                                       0, 0, 1, 0,\n                                                                                       0, 0, 0, 1])\n\n      (webgl/set-uniforms! gl program [(get-in @state-atom [:objects-to-draw :my-f :uniforms :u_matrix])])\n\n      (.clear gl (bit-or (.-COLOR_BUFFER_BIT gl) (.-DEPTH_BUFFER_BIT gl)))\n      (webgl/draw-arrays! (:gl @state-atom) (get-in @state-atom [:objects-to-draw :my-f :element]))\n      )\n\n    (js/requestAnimationFrame (fn [t] (draw! t @state-atom)))\n    ))\n\n\n(defn raf-draw!\n  [state]\n  (js/requestAnimationFrame (fn [t] (draw! t state))))\n\n(defn setup!\n  []\n  (-> (swap! state-atom (fn [{:keys [gl] :as state}]\n                          (let [fb-texture-params {:wrap-s  [\"texParameteri\" (.-TEXTURE_2D gl) (.-TEXTURE_WRAP_S gl) (.-CLAMP_TO_EDGE gl)]\n                                                   :wrap-t  [\"texParameteri\" (.-TEXTURE_2D gl) (.-TEXTURE_WRAP_T gl) (.-CLAMP_TO_EDGE gl)]\n                                                   :min-fil [\"texParameteri\" (.-TEXTURE_2D gl) (.-TEXTURE_MIN_FILTER gl) (.-NEAREST gl)]\n                                                   :mag-fil [\"texParameteri\" (.-TEXTURE_2D gl) (.-TEXTURE_MAG_FILTER gl) (.-NEAREST gl)]}\n                                framebuffer-width (/ (webgl/get-canvas-width gl) 4)\n                                framebuffer-height (/ (webgl/get-canvas-height gl) 4)\n                                fb-texture (webgl/create-a-texture gl)\n                                framebuffer (webgl/create-framebuffer gl)\n                                _ (-> (webgl/set-texture-params! gl fb-texture (.-TEXTURE_2D gl) (vals fb-texture-params))\n                                      (webgl/attach-texture-to-framebuffer framebuffer (.-FRAMEBUFFER gl) (.-COLOR_ATTACHMENT0 gl) (.-TEXTURE_2D gl) fb-texture 0))\n                                program (webgl/link-shaders! gl {:fs fragment-shader :vs vertex-shader})\n                                ]\n                            (-> (assoc state :clear-depth? true)\n                                (assoc :clear-color [0 0 0 1])\n                                (assoc :viewport-height framebuffer-height)\n                                (assoc :viewport-width framebuffer-width)\n                                (assoc :settings [\n                                                  {:x -1 :y -3 :z -30 :filter (.-NEAREST gl)}\n                                                  {:x 0 :y -3 :z -30 :filter (.-LINEAR gl)}\n                                                  {:x 1 :y -3 :z -30 :filter (.-NEAREST_MIPMAP_LINEAR gl)}\n                                                  {:x -1 :y -1 :z -10 :filter (.-NEAREST gl)}\n                                                  {:x 0 :y -1 :z -10 :filter (.-LINEAR gl)}\n                                                  {:x 1 :y -1 :z -10 :filter (.-NEAREST_MIPMAP_LINEAR gl)}\n                                                  {:x -1 :y 1 :z 0 :filter (.-NEAREST gl)}\n                                                  {:x 0 :y 1 :z 0 :filter (.-LINEAR gl)}\n                                                  {:x 1 :y 1 :z 0 :filter (.-LINEAR_MIPMAP_NEAREST gl)}\n                                                  ])\n                                (assoc :objects-to-draw\n                                       {:my-f {:program      program\n                                               :features     [(.-CULL_FACE gl) (.-DEPTH_TEST gl)]\n                                               ;; first create a blue placeholder texture, then load the img async\n                                               :textures     {:fb-texture {:texture fb-texture\n                                                                           :params  fb-texture-params\n                                                                           :type    (.-TEXTURE_2D gl)}\n                                                              :f-texture  {:texture (->>\n                                                                                      [(.-TEXTURE_2D gl) 0 (.-RGBA gl) 1 1 0 (.-RGBA gl) (.-UNSIGNED_BYTE gl) (js/Uint8Array. [0 0 255 255])]\n                                                                                      (webgl/create-texture! gl)\n                                                                                      (webgl/create-texture-from-img gl\n                                                                                                                     \"images/mip-low-res-example.png\"\n                                                                                                                     (fn [texture]\n                                                                                                                       (swap! state-atom (fn [state] (-> (assoc state :allocate-FB-texture true)\n                                                                                                                                                         (assoc-in [:objects-to-draw :my-f :textures :f-texture :texture] texture))))\n                                                                                                                       (raf-draw! @state-atom)\n                                                                                                                       )))\n                                                                           :type    (.-TEXTURE_2D gl)}}\n                                               :framebuffers {:fb {:framebuffer framebuffer}}\n                                               :attributes   {:a_position (webgl/attribute gl program {:name \"a_position\"\n                                                                                                       :size 3\n                                                                                                       :data (js/Float32Array. [-0.5, 0.5, 0.5,\n                                                                                                                                0.5, 0.5, 0.5,\n                                                                                                                                -0.5, -0.5, 0.5,\n                                                                                                                                -0.5, -0.5, 0.5,\n                                                                                                                                0.5, 0.5, 0.5,\n                                                                                                                                0.5, -0.5, 0.5])})\n                                                              :a_texcoord (webgl/attribute gl program {:name \"a_texcoord\"\n                                                                                                       :size 2\n                                                                                                       :data (js/Float32Array. [-3, -1,\n                                                                                                                                2, -1,\n                                                                                                                                -3, 4,\n                                                                                                                                -3, 4,\n                                                                                                                                2, -1,\n                                                                                                                                2, 4])})}\n                                               :uniforms     {:u_matrix  {:name      \"u_matrix\"\n                                                                          :type      \"uniformMatrix4fv\"\n                                                                          :transpose false\n                                                                          :values    [2 0 0 0\n                                                                                      0 2 0 0\n                                                                                      0 0 2 0\n                                                                                      0 0 0 2]}\n                                                              :u_texture {:name   \"u_texture\"\n                                                                          :type   \"uniform1i\"\n                                                                          :values [0]}}\n                                               :element      {:draw-type (.-TRIANGLES gl)\n                                                              :offset    0\n                                                              :count     (* 1 6)}}})))))))\n\n(def ^:export lesson\n  {:title           (fn []\n                      [:div\n                       [:h1 {:style {:font-family \"monospace\"}}\n                        \"Lesson - WebGL Textures\"]\n                       [:h4 {:style {:font-family \"monospace\"}}\n                        \"Textureeee!\"]])\n   :source          (c/get-filename #'state-atom)           ;; TODO broken\n   :tutorial-source \"webgl-3d-textures.html\"\n   :start           (fn []\n                      (let [canvas-id (c/ns-str ::x)]\n                        [:div {:style {:display        \"flex\"\n                                       :flex-direction \"row\"}}\n                         [webgl-canvas {:height   400\n                                        :width    400\n                                        :id       canvas-id\n                                        :on-mount (fn []\n                                                    (do\n                                                      (swap! state-atom assoc :gl (webgl/get-context canvas-id))\n                                                      (setup!)\n                                                      ;(js/requestAnimationFrame (fn [t] (draw! t @state-atom)))\n                                                      ))}]\n                         ]))})\n"]}