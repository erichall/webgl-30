{"version":3,"sources":["webgl_30/lessons/translation-2d.cljs"],"mappings":"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","names":["webgl-30.lessons.fundamentals_2/initial-state","js/webgl-30","js/webgl-30.lessons","js/webgl-30.lessons.fundamentals_2","js/webgl-30.lessons.fundamentals_2.state-atom","webgl-30.lessons.fundamentals_2/state-atom","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/deref","cljs.core/reset!","webgl-30.lessons.fundamentals_2/fragment-shader","webgl-30.lessons.fundamentals_2/vertex-shader","p__52013","map__52014","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","webgl-30.lessons.fundamentals_2/get-rectangle","x","y","width","height","x1","x2","y1","y2","webgl-30.lessons.fundamentals_2/draw!","timestamp","webgl-30.webgl/draw-scene!","map__52016","gl","program","attributes","state","rects","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","_","js/Float32Array","webgl-30.math/random-int","cljs.core.range.cljs$core$IFn$_invoke$arity$1","webgl-30.lessons.fundamentals_2/setup!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","p__52018","map__52019","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","webgl-30.webgl/link-shaders!","buffer-info","webgl-30.webgl/create-buffer","webgl-30.webgl/get-uniform-location","js/Math.random","webgl-30.lessons.fundamentals_2/lesson","canvas-id","webgl-30.component/webgl-canvas","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","webgl-30.webgl/get-context","js/requestAnimationFrame"],"sourcesContent":["(ns webgl-30.lessons.fundamentals_2\n  (:require [webgl-30.webgl :as webgl]\n            [webgl-30.math :as math]\n            [webgl-30.component :refer [webgl-canvas]]))\n\n(def initial-state {:gl nil})\n(defonce state-atom (atom nil))\n(when (nil? @state-atom)\n  (reset! state-atom initial-state))\n\n(def fragment-shader\n  \"precision mediump float;\n   uniform vec4 u_color;\n   void main() {\n       gl_FragColor = u_color;\n   }\")\n\n(def vertex-shader\n  \"attribute vec2 a_position;\n\n  uniform vec2 u_resolution;\n\n  void main() {\n       // convert the position from pixels to 0.0 to 1.0\n       vec2 zeroToOne = a_position / u_resolution;\n\n       // convert from 0->1 to 0->2\n       vec2 zeroToTwo = zeroToOne * 2.0;\n\n       // convert from 0->2 to -1->+1 (clip space)\n       vec2 clipSpace = zeroToTwo - 1.0;\n\n       gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1); // * vec(1, -1) flips y so it's top-left corner.\n  }\")\n\n(defn get-rectangle\n  [{:keys [x y width height]}]\n  (let [x1 x\n        x2 (+ x width)\n        y1 y\n        y2 (+ y height)]\n    [x1 y1\n     x2 y1\n     x1 y2\n     x1 y2\n     x2 y1\n     x2 y2]))\n\n(defn draw!\n  [timestamp]\n\n  (webgl/draw-scene! @state-atom)\n\n  (let [{:keys [gl program attributes] :as state} @state-atom\n        rects (doall (mapv (fn [_]\n                             {:src-data  (js/Float32Array. (get-rectangle {:x      (math/random-int 300)\n                                                                           :y      (math/random-int 300)\n                                                                           :width  (math/random-int 300)\n                                                                           :height (math/random-int 300)}))\n                              :target    (.-ARRAY_BUFFER gl)\n                              :usage     (.-STATIC_DRAW gl)\n                              :draw-type (.-TRIANGLES gl)\n                              :offset    0\n                              :count     6}\n                             ) (range 10)))\n        ]\n    ;(doseq [r rects]\n    ;  (webgl/buffer-data gl r)\n    ;(webgl/set-uniform gl program {:name   \"u_color\"\n    ;                               :type   \"uniform4f\"\n    ;                               :values [(js/Math.random)\n    ;                                        (js/Math.random)\n    ;                                        (js/Math.random)\n    ;                                        1]})\n    ;(webgl/draw-arrays gl {:draw-type (.-TRIANGLES gl)\n    ;                       :offset    0\n    ;                       :count     6})\n\n    ;)\n    )\n  )\n\n(defn setup!\n  []\n  (-> (swap! state-atom (fn [{:keys [gl] :as state}]\n                          ;; AT INIT TIME\n                          ;;  create shaders, program and locations\n                          ;;  create buffers and call bufferData to upload vertex data\n                          ;; AT RENDER TIME\n                          ;;  clear stuff\n                          ;;  use object program\n                          ;;  for each thing to draw, setup attributes ;; WHAT DOES SETUP attributes mean??\n                          ;;        and for each attribute, call bindBuffer, vertexAttribPointer, enableVertexAttribArray\n                          ;;  for each thing to draw, setup uniforms\n                          ;;        call gl.uniformXXX for each thing\n                          ;;  then call drawArrays for each thing, or with an arg to all of them\n                          (assoc state :objects-to-draw (mapv (fn [_]\n                                                                (let [program (webgl/link-shaders! gl {:fs fragment-shader :vs vertex-shader})\n                                                                      buffer-info (webgl/create-buffer gl\n                                                                                                       {:data   (js/Float32Array. (get-rectangle {:x      (math/random-int 300)\n                                                                                                                                                  :y      (math/random-int 300)\n                                                                                                                                                  :width  (math/random-int 300)\n                                                                                                                                                  :height (math/random-int 300)}))\n                                                                                                        :usage  (.-STATIC_DRAW gl)\n                                                                                                        :target (.-ARRAY-BUFFER gl)})]\n                                                                  {:program    program\n                                                                   :attributes [{:location    (.getAttribLocation gl program \"a_position\")\n                                                                                 :size        2\n                                                                                 :type        (.-FLOAT gl)\n                                                                                 :normalize   false\n                                                                                 :stride      0\n                                                                                 :offset      0\n                                                                                 :buffer-info buffer-info}]\n                                                                   :uniforms   [{:location (webgl/get-uniform-location gl program \"u_resolution\")\n                                                                                 :type     \"uniform2f\"\n                                                                                 :values   [(aget gl \"canvas\" \"width\") (aget gl \"canvas\" \"height\")]}\n                                                                                {:location (webgl/get-uniform-location gl program \"u_color\")\n                                                                                 :type     \"uniform4f\"\n                                                                                 :values   [(js/Math.random)\n                                                                                            (js/Math.random)\n                                                                                            (js/Math.random)\n                                                                                            1]}]\n                                                                   :element    {:draw-type (.-TRIANGLES gl)\n                                                                                :offset    0\n                                                                                :count     6}})) (range 10)))))))\n\n(def ^:export lesson\n  {:title           (fn []\n                      [:div\n                       [:h1 {:style {:font-family \"monospace\"}}\n                        \"Lesson - WebGL Fundamentals\"]\n                       [:h4 {:style {:font-family \"monospace\"}}\n                        \"Lots of random boxes\"]])\n   :source          \"https://github.com/erichall/webgl-30/blob/master/src/webgl_30/lessons/fundamentals_1.cljs\"\n   :tutorial-source \"https://webglfundamentals.org/webgl/lessons/webgl-fundamentals.html\"\n   :start           (fn []\n                      (let [canvas-id \"fundamentals\"]\n                        [webgl-canvas {:height   400\n                                       :width    400\n                                       :id       canvas-id\n                                       :on-mount (fn []\n                                                   (do\n                                                     (swap! state-atom assoc :gl (webgl/get-context canvas-id))\n                                                     (setup!)\n                                                     (js/requestAnimationFrame draw!)))}]))})\n"]}