{"version":3,"sources":["thi/ng/geom/triangle.cljc"],"mappings":"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","names":["var_args","G__29433","thi.ng.geom.triangle/triangle2","js/Error","t","cljs.core/map?","thi.ng.geom.types/Triangle2","thi.ng.geom.vector.vec2.cljs$core$IFn$_invoke$arity$1","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core/sequential?","cljs.core/first","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","thi.ng.xerror.core.illegal_arg_BANG_.cljs$core$IFn$_invoke$arity$1","a","b","c","G__29444","thi.ng.geom.triangle/triangle3","thi.ng.geom.types/Triangle3","thi.ng.geom.vector.vec3.cljs$core$IFn$_invoke$arity$1","G__29446","thi.ng.geom.triangle/equilateral2","l","thi.ng.geom.triangle.equilateral2.cljs$core$IFn$_invoke$arity$2","dir","thi.ng.math.core._.cljs$core$IFn$_invoke$arity$2","n","thi.ng.geom.core.normal.cljs$core$IFn$_invoke$arity$1","thi.ng.math.core.normalize.cljs$core$IFn$_invoke$arity$2","thi.ng.math.core/mag","thi.ng.math.core/SQRT3","thi.ng.math.core._PLUS_.cljs$core$IFn$_invoke$arity$2","thi.ng.math.core.mix.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.triangle.triangle2.cljs$core$IFn$_invoke$arity$3","x1","y1","x2","y2","thi.ng.geom.vector.vec2.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.triangle/equilateral3","thi.ng.math.core.normalize.cljs$core$IFn$_invoke$arity$1","thi.ng.math.core/cross","p__29467","vec__29468","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","thi.ng.geom.triangle/other-point-in-tri","ta","tb","tc","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","G__29476","thi.ng.geom.triangle/altitude","p__29478","vec__29479","id","G__29482","cljs.core/Keyword","thi.ng.geom.triangle.altitude.cljs$core$IFn$_invoke$arity$3","thi.ng.math.core.mix.cljs$core$IFn$_invoke$arity$3","thi.ng.geom.utils/closest-point-coeff","G__29488","thi.ng.geom.triangle/norm-altitude","points","vec__29492","thi.ng.geom.triangle.altitude.cljs$core$IFn$_invoke$arity$2","G__29498","thi.ng.geom.triangle/centroid","p__29504","vec__29508","thi.ng.math.core._STAR_.cljs$core$IFn$_invoke$arity$2","thi.ng.math.core._PLUS_.cljs$core$IFn$_invoke$arity$3","thi.ng.math.core/THIRD","thi.ng.geom.triangle/check-edge","splits","classifier","e","p","q","add-p?","add-q?","pc","qc","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","ip","thi.ng.geom.core.intersect_line.cljs$core$IFn$_invoke$arity$3","G__29520","thi.ng.geom.triangle/slice-with*","p__29525","vec__29526","thi.ng.geom.triangle.slice_with_STAR_.cljs$core$IFn$_invoke$arity$3","thi.ng.geom.core/classify-point","thi.ng.geom.triangle.slice_with_STAR_.cljs$core$IFn$_invoke$arity$5","verts","cmap","ids","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__29537","vec__29538","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__29533","vec__29534","m","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","cljs.core/conj","pred__29541","expr__29542","cljs.core/=","cljs.core/count","triverts","d","i","temp__5733__auto__","vc","G__29546","thi.ng.math.core/wrap-range","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","p__29551","p__29552","p__29553","vec__29554","vec__29557","vec__29560","thi.ng.geom.triangle/circumcircle-raw","ax","ay","bx","by","cx","cy","eq-ab?","thi.ng.math.core.delta_EQ_.cljs$core$IFn$_invoke$arity$3","thi.ng.math.core/*eps*","eq-bc?","and__4174__auto__","o","m1","m2","mx1","my1","G__29572","thi.ng.geom.triangle/circumcircle","thi.ng.geom.triangle.circumcircle.cljs$core$IFn$_invoke$arity$3","vec__29573","r","thi.ng.geom.types/Circle2","cljs.core/PROTOCOL_SENTINEL","_","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.utils/tri-area2","thi.ng.geom.core.edges.cljs$core$IFn$_invoke$arity$1","p1__29577#","thi.ng.math.core.signum.cljs$core$IFn$_invoke$arity$2","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/min","thi.ng.geom.utils/point-in-triangle2?","thi.ng.geom.utils/bounding-rect","thi.ng.geom.utils/axis-range","thi.ng.geom.utils.bounding_circle.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.core/centroid","thi.ng.geom.utils.center.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.vector.vec2.cljs$core$IFn$_invoke$arity$0","thi.ng.geom.utils.center.cljs$core$IFn$_invoke$arity$3","thi.ng.geom.triangle.centroid.cljs$core$IFn$_invoke$arity$1","p__29674","map__29675","cljs.core/hash-map","vec__29676","map__29683","vec__29684","thi.ng.geom.core/dist","opts","thi.ng.geom.core/extrude","thi.ng.geom.core.as_polygon.cljs$core$IFn$_invoke$arity$1","thi.ng.geom.core/extrude-shell","cljs.core/reverse","p__29659","map__29660","vec__29661","map__29665","vec__29666","p__29630","map__29631","vec__29632","map__29636","vec__29637","v","pred__29641","expr__29642","fexpr__29647","cljs.core/set","p__29612","map__29613","vec__29614","thi.ng.geom.core/contains-point?","thi.ng.geom.utils.intersect/intersect-line2-edges?","ray","vec__29626","thi.ng.geom.utils.intersect/intersect-ray2-edges?","thi.ng.geom.core.as_mesh.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.core/add-face","or__4185__auto__","thi.ng.geom.basicmesh/basic-mesh","thi.ng.geom.attribs/generate-face-attribs","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.vector/vec3","thi.ng.geom.types/Polygon2","thi.ng.geom.utils/closest-point-on-segments","p__29590","map__29591","map__29594","thi.ng.geom.utils.point_at.cljs$core$IFn$_invoke$arity$2","p__29596","map__29597","map__29599","thi.ng.math.core.random.cljs$core$IFn$_invoke$arity$0","thi.ng.geom.utils/from-barycentric","thi.ng.math.core.normdist_weights.cljs$core$IFn$_invoke$arity$1","p__29601","map__29602","map__29604","udist","include-last?","thi.ng.geom.utils/sample-uniform","thi.ng.geom.utils.tessellate_with_point.cljs$core$IFn$_invoke$arity$1","p1__29581#","theta","p1__29583#","thi.ng.geom.core/rotate","s","p1__29584#","thi.ng.geom.utils.scale_size.cljs$core$IFn$_invoke$arity$2","p1__29585#","p1__29586#","thi.ng.geom.core/transform-vector","thi.ng.geom.utils/tri-area3","thi.ng.geom.utils/point-in-triangle3?","thi.ng.geom.utils/bounding-box","thi.ng.geom.utils.bounding_sphere.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.vector.vec3.cljs$core$IFn$_invoke$arity$0","p__29808","map__29809","vec__29810","map__29814","vec__29815","thi.ng.geom.utils.ortho_normal.cljs$core$IFn$_invoke$arity$1","w","thi.ng.math.core.dot.cljs$core$IFn$_invoke$arity$2","thi.ng.xerror.core.unsupported_BANG_.cljs$core$IFn$_invoke$arity$0","p__29785","map__29786","vec__29787","map__29791","vec__29792","p__29766","map__29767","vec__29768","map__29774","vec__29775","pred__29779","expr__29780","fexpr__29783","p__29727","map__29728","vec__29729","map__29736","vec__29737","p__29746","map__29747","vec__29748","map__29753","vec__29754","vec__29743","thi.ng.geom.utils.intersect/intersect-ray-triangle3?","p__29703","map__29704","map__29708","p__29712","map__29713","map__29715","p__29718","map__29719","map__29721","p1__29691#","p1__29692#","p1__29693#","thi.ng.geom.core/rotate-x","p1__29694#","thi.ng.geom.core/rotate-y","p1__29695#","thi.ng.geom.core/rotate-z","axis","p1__29696#","thi.ng.geom.core/rotate-around-axis","p1__29697#","p1__29698#","p1__29699#","p__29797","map__29798","vec__29799","map__29803","vec__29804"],"sourcesContent":["(ns thi.ng.geom.triangle\n  #?(:cljs (:require-macros [thi.ng.math.macros :as mm]))\n  (:require\n   [thi.ng.geom.core :as g]\n   [thi.ng.geom.utils :as gu]\n   [thi.ng.geom.utils.intersect :as isec]\n   [thi.ng.geom.vector :as v :refer [vec2 vec3 V3Z]]\n   [thi.ng.geom.attribs :as attr]\n   [thi.ng.geom.basicmesh :as bm]\n   #?(:clj [thi.ng.geom.types] :cljs [thi.ng.geom.types :refer [Circle2 Polygon2 Triangle2 Triangle3]])\n   [thi.ng.dstruct.core :as d]\n   [thi.ng.math.core :as m :refer [PI HALF_PI THIRD SQRT3 *eps*]]\n   [thi.ng.xerror.core :as err]\n   #?(:clj [thi.ng.math.macros :as mm]))\n  #?(:clj (:import [thi.ng.geom.types Circle2 Polygon2 Triangle2 Triangle3])))\n\n(defn triangle2\n  ([t]\n   (cond\n     (map? t)        (Triangle2.\n                      [(vec2 (get t :a)) (vec2 (get t :b)) (vec2 (get t :c))])\n     (sequential? t) (Triangle2.\n                      [(vec2 (first t)) (vec2 (nth t 1)) (vec2 (nth t 2))])\n     :default (err/illegal-arg! t)))\n  ([a b c] (Triangle2. [(vec2 a) (vec2 b) (vec2 c)])))\n\n(defn triangle3\n  ([t]\n   (cond\n     (map? t)        (Triangle3.\n                      [(vec3 (get t :a)) (vec3 (get t :b)) (vec3 (get t :c))])\n     (sequential? t) (Triangle3.\n                      [(vec3 (first t)) (vec3 (nth t 1)) (vec3 (nth t 2))])\n     :default (err/illegal-arg! t)))\n  ([a b c] (Triangle3. [(vec3 a) (vec3 b) (vec3 c)])))\n\n(defn equilateral2\n  ([l]\n   (cond\n     (map? l) (equilateral2 (get l :p) (get l :q))\n     (sequential? l) (equilateral2 (first l) (nth l 1))\n     :default (err/illegal-arg! l)))\n  ([a b]\n   (let [a (vec2 a) b (vec2 b)\n         dir (m/- a b)\n         n (g/normal dir)\n         c (-> n (m/normalize (mm/mul (m/mag dir) SQRT3 0.5)) (m/+ (m/mix a b)))]\n     (triangle2 a b c)))\n  ([x1 y1 x2 y2]\n   (equilateral2 (vec2 x1 y1) (vec2 x2 y2))))\n\n(defn equilateral3\n  [a b n]\n  (let [a (vec3 a) b (vec3 b)\n        dir (m/- b a)\n        n (m/normalize (m/cross dir n))\n        c (-> n (m/normalize (mm/mul (m/mag dir) SQRT3 0.5)) (m/+ (m/mix a b)))]\n    (Triangle3. [a b c])))\n\n(defn other-point-in-tri\n  [[ta tb tc] a b]\n  (if (= a ta)\n    (if (= b tb) tc tb)\n    (if (= a tb)\n      (if (= b ta) tc ta)\n      (if (= b ta) tb ta))))\n\n(defn altitude\n  ([[a b c] id]\n   (case id\n     :a (altitude b c a)\n     :b (altitude a c b)\n     :c (altitude a b c)))\n  ([a b c]\n   [(m/mix a b (gu/closest-point-coeff c a b)) c]))\n\n(defn norm-altitude\n  ([points id]\n   (let [[a b] (altitude points id)]\n     (m/normalize (m/- b a))))\n  ([a b c]\n   (m/normalize (m/- c (m/mix a b (gu/closest-point-coeff c a b))))))\n\n(defn centroid\n  ([a b c] (m/* (m/+ a b c) THIRD))\n  ([[a b c]] (m/* (m/+ a b c) THIRD)))\n\n(defn check-edge\n  [splits classifier e p q add-p? add-q?]\n  (let [pc (classifier e p)\n        qc (classifier e q)\n        splits (if add-p? (conj splits [p pc]) splits)]\n    (if (neg? (* pc qc))\n      (let [ip (get (g/intersect-line e p q) :p)]\n        (if add-q?\n          (-> splits (conj [ip 0]) (conj [q qc]))\n          (conj splits [ip 0])))\n      (if add-q?\n        (conj splits [q qc])\n        splits))))\n\n(defn slice-with*\n  ([t e] (slice-with* t e g/classify-point))\n  ([[a b c] e classifier] (slice-with* a b c e classifier))\n  ([a b c e classifier]\n   (let [verts (-> []\n                   (check-edge classifier e a b true true)\n                   (check-edge classifier e b c false true)\n                   (check-edge classifier e c a false false))\n         cmap (fn [ids]\n                (->> ids\n                     (map (fn [[a b c]] [(verts a) (verts b) (verts c)])) ;; TODO transducer\n                     (reduce\n                      (fn [m [a b c]]\n                        (update-in m [(a 1)] conj [(a 0) (b 0) (c 0)]))\n                      {-1 [] 1 []})))]\n     (condp = (count verts)\n       4 (let [triverts #{a b c}\n               d (loop [i 3]\n                   (if-let [vc (verts i)]\n                     (if (and (zero? (vc 1)) (triverts (vc 0)))\n                       i (recur (dec i)))))]\n           (cmap [[(m/wrap-range (inc d) 4) (m/wrap-range (+ d 2) 4) d]\n                  [(m/wrap-range (dec d) 4) d (m/wrap-range (+ d 2) 4)]]))\n       5 (if (zero? (get-in verts [1 1]))\n           (if (zero? (get-in verts [3 1]))\n             (cmap [[0 1 3] [0 3 4] [2 3 1]])\n             (cmap [[0 1 4] [2 4 1] [2 3 4]]))\n           (cmap [[0 1 2] [0 2 4] [3 4 2]]))\n       nil))))\n\n;; http://astronomy.swin.edu.au/~pbourke/modelling/triangulate/\n(defn circumcircle-raw\n  [[ax ay :as a] [bx by :as b] [cx cy :as c]]\n  (let [eq-ab? (m/delta= ay by *eps*)\n        eq-bc? (m/delta= by cy *eps*)]\n    (when-not (and eq-ab? eq-bc?)\n      (let [o (cond\n                eq-ab? (let [cx (mm/addm ax bx 0.5)]\n                         (vec2 cx (mm/submadd\n                                   cx (mm/addm bx cx 0.5)\n                                   (- (mm/subdiv cx bx cy by))\n                                   (mm/addm by cy 0.5))))\n                eq-bc? (let [cx (mm/addm bx cx 0.5)]\n                         (vec2 cx (mm/submadd\n                                   cx (mm/addm ax bx 0.5)\n                                   (- (mm/subdiv bx ax by ay))\n                                   (mm/addm ay by 0.5))))\n                :default (let [m1 (- (mm/subdiv bx ax by ay))\n                               m2 (- (mm/subdiv cx bx cy by))\n                               mx1 (mm/addm ax bx 0.5)\n                               my1 (mm/addm ay by 0.5)\n                               cx (/ (mm/add\n                                      (mm/msub m1 mx1 m2 (mm/addm bx cx 0.5))\n                                      (mm/addm by cy 0.5)\n                                      (- my1))\n                                     (- m1 m2))]\n                           (vec2 cx (mm/submadd cx mx1 m1 my1))))]\n        [o (g/dist o b)]))))\n\n(defn circumcircle\n  ([t] (circumcircle (get t :a) (get t :b) (get t :c)))\n  ([a b c]\n   (let [[o r] (circumcircle-raw a b c)]\n     (Circle2. o r))))\n\n(extend-type Triangle2\n\n  g/IArea\n  (area [_] (apply gu/tri-area2 (get _ :points)))\n\n  g/IClassify\n  (classify-point\n    [_ p] (->> (g/edges _)\n               (map #(m/signum (apply gu/closest-point-coeff p %) *eps*))\n               (reduce min)))\n\n  g/IBoundary\n  (contains-point?\n    [_ p] (apply gu/point-in-triangle2? p (get _ :points)))\n\n  g/IBounds\n  (bounds [_] (gu/bounding-rect (get _ :points)))\n  (width [_] (gu/axis-range 0 (get _ :points)))\n  (height [_] (gu/axis-range 1 (get _ :points)))\n  (depth [_] 0)\n\n  g/IBoundingCircle\n  (bounding-circle\n    [_] (gu/bounding-circle (g/centroid _) (get _ :points)))\n\n  g/ICenter\n  (center\n    ([_] (Triangle2. (gu/center (vec2) (get _ :points))))\n    ([_ o] (Triangle2. (gu/center (g/centroid _) (vec2 o) (get _ :points)))))\n  (centroid [_] (centroid (get _ :points)))\n\n  g/ICircumference\n  (circumference\n    [{[a b c] :points}] (mm/add (g/dist a b) (g/dist b c) (g/dist c a)))\n\n  g/IExtrude\n  (extrude [_ opts] (g/extrude (g/as-polygon _) opts))\n  (extrude-shell [_ opts] (g/extrude-shell (g/as-polygon _) opts))\n\n  g/IFlip\n  (flip\n    [_] (Triangle2. (reverse (get _ :points))))\n\n  g/IVertexAccess\n  (vertices\n    [_] (get _ :points))\n\n  g/IEdgeAccess\n  (edges\n    [{[a b c] :points}] [[a b] [b c] [c a]])\n\n  g/IGraph\n  (vertex-neighbors\n    [{[a b c] :points} v] (condp = v, a [c b], b [a c], c [b a], nil))\n  (vertex-valence\n    [_ v] (if ((set (get _ :points)) v) 2 0))\n\n  g/IIntersect\n  (intersect-line\n    [_ {[p q] :points}]\n    (if (and (g/contains-point? _ p) (g/contains-point? _ q))\n      {:type :coincident}\n      (isec/intersect-line2-edges? p q (g/edges _))))\n  (intersect-ray\n    ([_ ray]\n     (let [[p dir] (if (map? ray) [(get ray :p) (get ray :dir)] ray)]\n       (isec/intersect-ray2-edges? p dir (g/edges _))))\n    ([_ p dir]\n     (isec/intersect-ray2-edges? p dir (g/edges _))))\n\n  g/IMeshConvert\n  (as-mesh\n    ([_] (g/as-mesh _ {}))\n    ([_ opts]\n     (g/add-face\n      (or (get opts :mesh) (bm/basic-mesh))\n      (attr/generate-face-attribs (mapv vec3 (get _ :points)) 0 (get opts :attribs) opts))))\n\n  g/IPolygonConvert\n  (as-polygon\n    [_] (Polygon2. (get _ :points)))\n\n  g/IProximity\n  (closest-point\n    [_ p]\n    (first (gu/closest-point-on-segments p (g/edges _))))\n\n  g/ISample\n  (point-at\n    [{p :points} t] (gu/point-at t (conj p (first p))))\n  (random-point\n    [{p :points}] (gu/point-at (m/random) (conj p (first p))))\n  (random-point-inside\n    [_] (gu/from-barycentric (get _ :points) (m/normdist-weights 3)))\n  (sample-uniform\n    [{p :points} udist include-last?]\n    (gu/sample-uniform udist include-last? (conj p (first p))))\n\n  g/ISlice\n  (slice-with\n    ([_ e]\n     (slice-with* (get _ :points) e g/classify-point))\n    ([_ e classifier]\n     (slice-with* (get _ :points) e classifier)))\n\n  g/ISubdivide\n  (subdivide\n    [_] (->> (get _ :points)\n             (gu/tessellate-with-point)\n             (map #(Triangle2. %))))\n\n  g/ITessellate\n  (tessellate [_] [_])\n\n  g/IRotate\n  (rotate\n    [_ theta] (Triangle2. (mapv #(g/rotate % theta) (get _ :points))))\n\n  g/IScale\n  (scale\n    [_ s] (Triangle2. (mapv #(m/* % s) (get _ :points))))\n  (scale-size\n    [_ s] (Triangle2. (gu/scale-size s (get _ :points))))\n\n  g/ITranslate\n  (translate\n    [_ t] (Triangle2. (mapv #(m/+ % t) (get _ :points))))\n\n  g/ITransform\n  (transform\n    [_ m] (Triangle2. (mapv #(g/transform-vector m %) (get _ :points))))\n\n  g/IVolume\n  (volume [_] 0.0))\n\n(extend-type Triangle3\n\n  g/IArea\n  (area [_] (apply gu/tri-area3 (get _ :points)))\n\n  g/IBoundary\n  (contains-point? [_ p] (apply gu/point-in-triangle3? p (get _ :points)))\n\n  g/IBounds\n  (bounds [_] (gu/bounding-box (get _ :points)))\n  (width [_] (gu/axis-range 0 (get _ :points)))\n  (height [_] (gu/axis-range 1 (get _ :points)))\n  (depth [_] (gu/axis-range 2 (get _ :points)))\n\n  g/IBoundingSphere\n  (bounding-sphere\n    [_] (gu/bounding-sphere (g/centroid _) (get _ :points)))\n\n  g/ICenter\n  (center\n    ([_] (Triangle3. (gu/center (vec3) (get _ :points))))\n    ([_ o] (Triangle3. (gu/center (g/centroid _) (vec3 o) (get _ :points)))))\n  (centroid [_] (centroid (get _ :points)))\n\n  g/ICircumference\n  (circumference\n    [{[a b c] :points}] (mm/add (g/dist a b) (g/dist b c) (g/dist c a)))\n\n  g/IClassify\n  (classify-point\n    [_ p]\n    (let [a (first (get _ :points))\n          n (gu/ortho-normal (get _ :points))\n          w (- (m/dot n a))]\n      (-> n (m/dot p) (+ w) (m/signum *eps*))))\n\n  g/IExtrude\n  (extrude [_ opts] (err/unsupported!)) ; TODO\n  (extrude-shell [_ opts] (err/unsupported!)) ; TODO\n\n  g/IFlip\n  (flip\n    [_] (Triangle3. (reverse (get _ :points))))\n\n  g/IVertexAccess\n  (vertices\n    [_] (get _ :points))\n\n  g/IEdgeAccess\n  (edges\n    [{[a b c] :points}] [[a b] [b c] [c a]])\n\n  g/IGraph\n  (vertex-neighbors\n    [{[a b c] :points} v] (condp = v, a [c b], b [a c], c [b a], nil))\n  (vertex-valence\n    [_ v] (if ((set (get _ :points)) v) 2 0))\n\n  g/IIntersect\n  (intersect-ray\n    ([{[a b c] :points} ray]\n     (let [[p dir] (if (map? ray) [(get ray :p) (get ray :dir)] ray)]\n       (isec/intersect-ray-triangle3? p dir a b c)))\n    ([{[a b c] :points} p dir]\n     (isec/intersect-ray-triangle3? p dir a b c)))\n\n  g/IMeshConvert\n  (as-mesh\n    ([_] (g/as-mesh _ {}))\n    ([_ opts]\n     (g/add-face\n      (or (get opts :mesh) (bm/basic-mesh))\n      (attr/generate-face-attribs (get _ :points) 0 (get opts :attribs) opts))))\n\n  g/IProximity\n  (closest-point\n    [_ p]\n    (first (gu/closest-point-on-segments p (g/edges _))))\n\n  g/ISample\n  (point-at\n    [{p :points} t] (gu/point-at t (conj p (first p))))\n  (random-point\n    [{p :points}] (gu/point-at (m/random) (conj p (first p))))\n  (random-point-inside\n    [_] (gu/from-barycentric (get _ :points) (m/normdist-weights 3)))\n  (sample-uniform\n    [{p :points} udist include-last?]\n    (gu/sample-uniform udist include-last? (conj p (first p))))\n\n  g/ISlice\n  (slice-with\n    ([_ e]\n     (slice-with* (get _ :points) e g/classify-point))\n    ([_ e classifier]\n     (slice-with* (get _ :points) e classifier)))\n  g/ISubdivide\n  (subdivide\n    [_] (->> (get _ :points)\n             (gu/tessellate-with-point)\n             (map #(Triangle3. %))))\n\n  g/ITessellate\n  (tessellate [_] [_])\n\n  g/IRotate\n  (rotate\n    [_ theta] (Triangle3. (mapv #(g/rotate % theta) (get _ :points))))\n\n  g/IRotate3D\n  (rotate-x\n    [_ theta] (Triangle3. (mapv #(g/rotate-x % theta) (get _ :points))))\n  (rotate-y\n    [_ theta] (Triangle3. (mapv #(g/rotate-y % theta) (get _ :points))))\n  (rotate-z\n    [_ theta] (Triangle3. (mapv #(g/rotate-z % theta) (get _ :points))))\n  (rotate-around-axis\n    [_ axis theta]\n    (Triangle3.\n     (mapv #(g/rotate-around-axis % axis theta) (get _ :points))))\n\n  g/IScale\n  (scale\n    [_ s] (Triangle3. (mapv #(m/* % s) (get _ :points))))\n  (scale-size\n    [_ s] (Triangle3. (gu/scale-size s (get _ :points))))\n\n  g/ITranslate\n  (translate\n    [_ t] (Triangle3. (mapv #(m/+ % t) (get _ :points))))\n\n  g/ITransform\n  (transform\n    [_ m] (Triangle3. (mapv #(g/transform-vector m %) (get _ :points))))\n\n  ;; Signed volume impl based on:\n  ;; https://web.archive.org/web/20090320013931/http://amp.ece.cmu.edu/Publication/Cha/icip01_Cha.pdf\n\n  g/IVolume\n  (volume [_] 0.0)\n  (signed-volume\n    [{[a b c] :points}] (/ (m/dot a (m/cross b c)) 6.0)))\n"]}