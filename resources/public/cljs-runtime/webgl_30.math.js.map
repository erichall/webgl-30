{"version":3,"sources":["webgl_30/math.cljc"],"mappings":"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","names":["webgl-30.math/deg->rad","a","Math/PI","webgl-30.math/rad->deg","webgl-30.math/xy-radians","angle","radians","Math/sin","Math/cos","webgl-30.math/cos-sin","webgl-30.math/random-int","range","G__25966","Math/floor","Math/random","webgl-30.math/matrix-multiply-3d","b","a00","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b00","b01","b02","b03","b10","b11","b12","b13","b20","b21","b22","b23","b30","b31","b32","b33","webgl-30.math/matrix-multiply-2d","webgl-30.math/perspective-3d-matrix","field-of-view-in-radians","aspect","near","far","f","G__25985","Math/tan","range-in-view","webgl-30.math/rotation-3d-y-matrix","angle-radians","vec__25986","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","c","s","webgl-30.math/rotation-3d-x-matrix","vec__25989","p__25992","vec__25993","webgl-30.math/translation-3d-matrix","tx","ty","tz","webgl-30.math/invert-4x4","m","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","tmp-0","tmp-1","tmp-2","tmp-3","tmp-4","tmp-5","tmp-6","tmp-7","tmp-8","tmp-9","tmp-10","tmp-11","tmp-12","tmp-13","tmp-14","tmp-15","tmp-16","tmp-17","tmp-18","tmp-19","tmp-20","tmp-21","tmp-22","tmp-23","t0","t1","t2","t3","det","webgl-30.math/cross-product","webgl-30.math/subtract-vec","webgl-30.math/normalize","v","l","G__26028","Math/sqrt","p1__26027#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","webgl-30.math/look-at-matrix","camera-position","target","up","z-axis","x-axis","y-axis","p__26029","vec__26030","webgl-30.math/translation-2d-matrix","webgl-30.math/rotation-2d-matrix","p__26037","vec__26038","webgl-30.math/scaling-2d-matrix","sx","sy","webgl-30.math/projection-2d-matrix","width","height","webgl-30.math/identity-2d-matrix","webgl-30.math/rotation-3d-z-matrix","vec__26041","p__26044","vec__26045","webgl-30.math/scaling-3d-matrix","sz","webgl-30.math/z->w-matrix","fudge-factor","webgl-30.math/projection-3d-matrix","depth","webgl-30.math/orthographic-matrix","left","right","bottom","top"],"sourcesContent":["(ns webgl-30.math)\n\n(defn deg->rad\n  [a]\n  (* a (/ Math/PI 180)))\n\n(defn rad->deg\n  [a]\n  (* a (/ 180 Math/PI)))\n\n(defn xy-radians\n  [angle]\n  (let [radians (/ (* angle Math/PI) 180)]\n    [(Math/sin radians) (Math/cos radians)]))\n\n(defn cos-sin\n  [angle]\n  [(Math/cos angle) (Math/sin angle)])\n\n(defn random-int\n  [range]\n  (Math/floor (* range (Math/random))))\n\n(defn matrix-multiply-3d\n  [a b]\n  (let [a00 (nth a (+ (* 0 4) 0))\n        a01 (nth a (+ (* 0 4) 1))\n        a02 (nth a (+ (* 0 4) 2))\n        a03 (nth a (+ (* 0 4) 3))\n\n        a10 (nth a (+ (* 1 4) 0))\n        a11 (nth a (+ (* 1 4) 1))\n        a12 (nth a (+ (* 1 4) 2))\n        a13 (nth a (+ (* 1 4) 3))\n\n        a20 (nth a (+ (* 2 4) 0))\n        a21 (nth a (+ (* 2 4) 1))\n        a22 (nth a (+ (* 2 4) 2))\n        a23 (nth a (+ (* 2 4) 3))\n\n        a30 (nth a (+ (* 3 4) 0))\n        a31 (nth a (+ (* 3 4) 1))\n        a32 (nth a (+ (* 3 4) 2))\n        a33 (nth a (+ (* 3 4) 3))\n\n        b00 (nth b (+ (* 0 4) 0))\n        b01 (nth b (+ (* 0 4) 1))\n        b02 (nth b (+ (* 0 4) 2))\n        b03 (nth b (+ (* 0 4) 3))\n\n        b10 (nth b (+ (* 1 4) 0))\n        b11 (nth b (+ (* 1 4) 1))\n        b12 (nth b (+ (* 1 4) 2))\n        b13 (nth b (+ (* 1 4) 3))\n\n        b20 (nth b (+ (* 2 4) 0))\n        b21 (nth b (+ (* 2 4) 1))\n        b22 (nth b (+ (* 2 4) 2))\n        b23 (nth b (+ (* 2 4) 3))\n\n        b30 (nth b (+ (* 3 4) 0))\n        b31 (nth b (+ (* 3 4) 1))\n        b32 (nth b (+ (* 3 4) 2))\n        b33 (nth b (+ (* 3 4) 3))\n        ]\n\n    [(+ (* b00 a00) (* b01 a10) (* b02 a20) (* b03 a30))\n     (+ (* b00 a01) (* b01 a11) (* b02 a21) (* b03 a31))\n     (+ (* b00 a02) (* b01 a12) (* b02 a22) (* b03 a32))\n     (+ (* b00 a03) (* b01 a13) (* b02 a23) (* b03 a33))\n\n     (+ (* b10 a00) (* b11 a10) (* b12 a20) (* b13 a30))\n     (+ (* b10 a01) (* b11 a11) (* b12 a21) (* b13 a31))\n     (+ (* b10 a02) (* b11 a12) (* b12 a22) (* b13 a32))\n     (+ (* b10 a03) (* b11 a13) (* b12 a23) (* b13 a33))\n\n     (+ (* b20 a00) (* b21 a10) (* b22 a20) (* b23 a30))\n     (+ (* b20 a01) (* b21 a11) (* b22 a21) (* b23 a31))\n     (+ (* b20 a02) (* b21 a12) (* b22 a22) (* b23 a32))\n     (+ (* b20 a03) (* b21 a13) (* b22 a23) (* b23 a33))\n\n     (+ (* b30 a00) (* b31 a10) (* b32 a20) (* b33 a30))\n     (+ (* b30 a01) (* b31 a11) (* b32 a21) (* b33 a31))\n     (+ (* b30 a02) (* b31 a12) (* b32 a22) (* b33 a32))\n     (+ (* b30 a03) (* b31 a13) (* b32 a23) (* b33 a33))\n     ]))\n\n(defn matrix-multiply-2d\n  [a b]\n  (let [a00 (nth a (+ (* 0 3) 0))\n        a01 (nth a (+ (* 0 3) 1))\n        a02 (nth a (+ (* 0 3) 2))\n\n        a10 (nth a (+ (* 1 3) 0))\n        a11 (nth a (+ (* 1 3) 1))\n        a12 (nth a (+ (* 1 3) 2))\n\n        a20 (nth a (+ (* 2 3) 0))\n        a21 (nth a (+ (* 2 3) 1))\n        a22 (nth a (+ (* 2 3) 2))\n\n        b00 (nth b (+ (* 0 3) 0))\n        b01 (nth b (+ (* 0 3) 1))\n        b02 (nth b (+ (* 0 3) 2))\n\n        b10 (nth b (+ (* 1 3) 0))\n        b11 (nth b (+ (* 1 3) 1))\n        b12 (nth b (+ (* 1 3) 2))\n\n        b20 (nth b (+ (* 2 3) 0))\n        b21 (nth b (+ (* 2 3) 1))\n        b22 (nth b (+ (* 2 3) 2))]\n    [(+ (* b00 a00) (* b01 a10) (* b02 a20))\n     (+ (* b00 a01) (* b01 a11) (* b02 a21))\n     (+ (* b00 a02) (* b01 a12) (* b02 a22))\n     (+ (* b10 a00) (* b11 a10) (* b12 a20))\n     (+ (* b10 a01) (* b11 a11) (* b12 a21))\n     (+ (* b10 a02) (* b11 a12) (* b12 a22))\n     (+ (* b20 a00) (* b21 a10) (* b22 a20))\n     (+ (* b20 a01) (* b21 a11) (* b22 a21))\n     (+ (* b20 a02) (* b21 a12) (* b22 a22))]))\n\n(defn perspective-3d-matrix\n  [field-of-view-in-radians aspect near far]\n  (let [f (Math/tan (- (* Math/PI 0.5)\n                       (* 0.5 field-of-view-in-radians)))\n        range-in-view (/ 1.0 (- near far))]\n    [(/ f aspect) 0 0 0\n     0 f 0 0\n     0 0 (* range-in-view (+ near far)) (- 1)\n     0 0 (* near far range-in-view 2) 0]))\n\n(defn rotation-3d-y-matrix\n  [angle-radians]\n  (let [[c s] (cos-sin angle-radians)]\n    [c 0 (- s) 0\n     0 1 0 0\n     s 0 c 0\n     0 0 0 1]))\n\n(defn rotation-3d-x-matrix\n  [angle-radians]\n  (let [[c s] (cos-sin angle-radians)]\n    [1 0 0 0\n     0 c s 0\n     0 (- s) c 0\n     0 0 0 1]))\n\n(defn translation-3d-matrix\n  [[tx ty tz]]\n  [1 0 0 0\n   0 1 0 0\n   0 0 1 0\n   tx ty tz 1])\n\n(defn invert-4x4\n  [m]\n  (let [m00 (nth m (+ (* 0 4) 0))\n        m01 (nth m (+ (* 0 4) 1))\n        m02 (nth m (+ (* 0 4) 2))\n        m03 (nth m (+ (* 0 4) 3))\n\n        m10 (nth m (+ (* 1 4) 0))\n        m11 (nth m (+ (* 1 4) 1))\n        m12 (nth m (+ (* 1 4) 2))\n        m13 (nth m (+ (* 1 4) 3))\n\n        m20 (nth m (+ (* 2 4) 0))\n        m21 (nth m (+ (* 2 4) 1))\n        m22 (nth m (+ (* 2 4) 2))\n        m23 (nth m (+ (* 2 4) 3))\n\n        m30 (nth m (+ (* 3 4) 0))\n        m31 (nth m (+ (* 3 4) 1))\n        m32 (nth m (+ (* 3 4) 2))\n        m33 (nth m (+ (* 3 4) 3))\n\n        tmp-0 (* m22 m33)\n        tmp-1 (* m32 m23)\n        tmp-2 (* m12 m33)\n        tmp-3 (* m32 m13)\n        tmp-4 (* m12 m23)\n        tmp-5 (* m22 m13)\n        tmp-6 (* m02 m33)\n        tmp-7 (* m32 m03)\n        tmp-8 (* m02 m23)\n        tmp-9 (* m22 m03)\n        tmp-10 (* m02 m13)\n        tmp-11 (* m12 m03)\n        tmp-12 (* m20 m31)\n        tmp-13 (* m30 m21)\n        tmp-14 (* m10 m31)\n        tmp-15 (* m30 m11)\n        tmp-16 (* m10 m21)\n        tmp-17 (* m20 m11)\n        tmp-18 (* m00 m31)\n        tmp-19 (* m30 m01)\n        tmp-20 (* m00 m21)\n        tmp-21 (* m20 m01)\n        tmp-22 (* m00 m11)\n        tmp-23 (* m10 m01)\n\n        t0 (- (+ (* tmp-0 m11) (* tmp-3 m21) (* tmp-4 m31))\n              (+ (* tmp-1 m11) (* tmp-2 m21) (* tmp-5 m31)))\n        t1 (- (+ (* tmp-1 m01) (* tmp-6 m21) (* tmp-9 m31))\n              (+ (* tmp-0 m01) (* tmp-7 m21) (* tmp-8 m31)))\n        t2 (- (+ (* tmp-2 m01) (* tmp-7 m11) (* tmp-10 m31))\n              (+ (* tmp-3 m01) (* tmp-6 m11) (* tmp-11 m31)))\n        t3 (- (+ (* tmp-5 m01) (* tmp-8 m11) (* tmp-11 m21))\n              (+ (* tmp-4 m01) (* tmp-9 m11) (* tmp-10 m21)))\n\n        det (/ 1.0 (+ (* m00 t0) (* m10 t1) (* m20 t2) (* m30 t3)))]\n    [(* det t0)\n     (* det t1)\n     (* det t2)\n     (* det t3)\n     (* det (- (+ (* tmp-1 m10) (* tmp-2 m20) (* tmp-5 m30))\n               (+ (* tmp-0 m10) (* tmp-3 m20) (* tmp-4 m30))))\n\n     (* det (- (+ (* tmp-0 m00) (* tmp-7 m20) (* tmp-8 m30))\n               (+ (* tmp-1 m00) (* tmp-6 m20) (* tmp-9 m30))))\n\n     (* det (- (+ (* tmp-3 m00) (* tmp-6 m10) (* tmp-11 m30))\n               (+ (* tmp-2 m00) (* tmp-7 m10) (* tmp-10 m30))))\n\n     (* det (- (+ (* tmp-4 m00) (* tmp-9 m10) (* tmp-10 m20))\n               (+ (* tmp-5 m00) (* tmp-8 m10) (* tmp-11 m20))))\n\n     (* det (- (+ (* tmp-12 m13) (* tmp-15 m23) (* tmp-16 m33))\n               (+ (* tmp-13 m13) (* tmp-14 m23) (* tmp-17 m33))))\n\n     (* det (- (+ (* tmp-13 m03) (* tmp-18 m23) (* tmp-21 m33))\n               (+ (* tmp-12 m03) (* tmp-19 m23) (* tmp-20 m33))))\n\n     (* det (- (+ (* tmp-14 m03) (* tmp-19 m13) (* tmp-22 m33))\n               (+ (* tmp-15 m03) (* tmp-18 m13) (* tmp-23 m33))))\n     (* det (- (+ (* tmp-17 m03) (* tmp-20 m13) (* tmp-23 m23))\n               (+ (* tmp-16 m03) (* tmp-21 m13) (* tmp-22 m23))))\n\n     (* det (- (+ (* tmp-14 m22) (* tmp-17 m32) (* tmp-13 m12))\n               (+ (* tmp-16 m32) (* tmp-12 m12) (* tmp-15 m22))))\n\n     (* det (- (+ (* tmp-20 m22) (* tmp-12 m02) (* tmp-19 m22))\n               (+ (* tmp-18 m22) (* tmp-21 m32) (* tmp-13 m02))))\n\n     (* det (- (+ (* tmp-18 m12) (* tmp-23 m32) (* tmp-15 m02))\n               (+ (* tmp-22 m32) (* tmp-14 m02) (* tmp-19 m12))))\n\n     (* det (- (+ (* tmp-22 m22) (* tmp-16 m02) (* tmp-21 m12))\n               (+ (* tmp-20 m12) (* tmp-23 m22) (* tmp-17 m02))))]))\n\n(defn cross-product\n  [a b]\n  [(- (* (nth a 1) (nth b 2)) (* (nth a 2) (nth b 1)))\n   (- (* (nth a 2) (nth b 0)) (* (nth a 0) (nth b 2)))\n   (- (* (nth a 0) (nth b 1)) (* (nth a 1) (nth b 0)))])\n\n(defn subtract-vec\n  [a b]\n  [(- (nth a 0) (nth b 0))\n   (- (nth a 1) (nth b 1))\n   (- (nth a 2) (nth b 2))])\n\n(defn normalize\n  [v]\n  (let [l (Math/sqrt (+ (* (nth v 0) (nth v 0))\n                        (* (nth v 1) (nth v 1))\n                        (* (nth v 2) (nth v 2))))]\n    (if (> l 0.00001)\n      (mapv #(/ % l) v)\n      [0 0 0])))\n\n(defn look-at-matrix\n  [camera-position target up]\n  (let [z-axis (-> (subtract-vec camera-position target)\n                   normalize)\n        x-axis (-> (cross-product up z-axis)\n                   normalize)\n        y-axis (-> (cross-product z-axis x-axis)\n                   normalize)]\n    [(nth x-axis 0) (nth x-axis 1) (nth x-axis 2) 0\n     (nth y-axis 0) (nth y-axis 1) (nth y-axis 2) 0\n     (nth z-axis 0) (nth z-axis 1) (nth z-axis 2) 0\n     (nth camera-position 0) (nth camera-position 1) (nth camera-position 2) 1]))\n\n(defn translation-2d-matrix\n  [[tx ty]]\n  [1 0 0\n   0 1 0\n   tx ty 1])\n\n(defn rotation-2d-matrix\n  [radians]\n  (let [c (Math/cos radians)\n        s (Math/sin radians)]\n    [c (- s) 0\n     s c 0\n     0 0 1]))\n\n(defn scaling-2d-matrix\n  [[sx sy]]\n  [sx 0 0\n   0 sy 0\n   0 0 1])\n\n(defn projection-2d-matrix\n  [width height]\n  ; flip y-axis so 0 is at top\n  [(/ 2 width) 0 0\n   0 (/ (- 2) height) 0\n   -1 1 1])\n\n(defn identity-2d-matrix\n  []\n  [1 0 0\n   0 1 0\n   0 0 1])\n\n(defn rotation-3d-z-matrix\n  [angle-radians]\n  (let [[c s] (cos-sin angle-radians)]\n    [c s 0 0\n     (- s) c 0 0\n     0 0 1 0\n     0 0 0 1]))\n\n(defn scaling-3d-matrix\n  [[sx sy sz]]\n  [sx 0 0 0\n   0 sy 0 0\n   0 0 sz 0\n   0 0 0 1])\n\n(defn z->w-matrix\n  [fudge-factor]\n  [1 0 0 0\n   0 1 0 0\n   0 0 1 fudge-factor\n   0 0 0 0 1])\n(defn projection-3d-matrix\n  [width height depth]\n  ; flip y-axis so 0 is at top\n  [(/ 2 width) 0 0 0\n   0 (/ (- 2) height) 0 0\n   0 0 (/ 2 depth) 0\n   -1 1 0 1])\n\n(defn orthographic-matrix\n  [left right bottom top near far]\n  [(/ 2 (- right left)) 0 0 0\n   0 (/ 2 (- top bottom)) 0 0\n   0 0 (/ 2 (- near far)) 0\n\n   (/ (+ left right) (- left right))\n   (/ (+ bottom top) (- bottom top))\n   (/ (+ near far) (- near far))\n   1])\n\n\n\n"]}