{"version":3,"sources":["thi/ng/typedarrays/core.cljs"],"mappings":"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","names":["thi.ng.typedarrays.core/typed-arrays-supported?","js/window","thi.ng.typedarrays.core/array-types","thi.ng.typedarrays.core/typed-array?","x","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","goog/typeOf","thi.ng.typedarrays.core/array-type","cljs.core/array?","cljs.core/re-find","cljs.core/first","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core/run!","type","js/self","from","to","this","goog/isNumber","G__29962","G__29963","Math/min","len","G__29968","G__29969","Math/max","ctor","dest","i","cljs.core/keys","thi.ng.typedarrays.core/int8","size-or-coll","js/Int8Array","cljs.core/count","buf","coll","cljs.core/next","var_args","G__29983","thi.ng.typedarrays.core/int8-view","js/Error","a","offset","thi.ng.typedarrays.core/uint8","js/Uint8Array","G__30003","thi.ng.typedarrays.core/uint8-view","thi.ng.typedarrays.core/uint8-clamped","js/Uint8ClampedArray","G__30027","thi.ng.typedarrays.core/uint8-clamped-view","thi.ng.typedarrays.core/int16","js/Int16Array","G__30054","thi.ng.typedarrays.core/int16-view","thi.ng.typedarrays.core/uint16","js/Uint16Array","G__30076","thi.ng.typedarrays.core/uint16-view","thi.ng.typedarrays.core/int32","js/Int32Array","G__30099","thi.ng.typedarrays.core/int32-view","thi.ng.typedarrays.core/uint32","js/Uint32Array","G__30107","thi.ng.typedarrays.core/uint32-view","thi.ng.typedarrays.core/float32","js/Float32Array","G__30124","thi.ng.typedarrays.core/float32-view","thi.ng.typedarrays.core/float64","js/Float64Array","G__30133","thi.ng.typedarrays.core/float64-view"],"sourcesContent":["(ns thi.ng.typedarrays.core)\n\n(defn typed-arrays-supported?\n  \"Returns true if JS runtime supports typed arrays\"\n  [] (not (nil? (aget js/window \"ArrayBuffer\"))))\n\n(def ^:private array-types\n  {\"Uint8Array\"        :uint8\n   \"Uint8ClampedArray\" :uint8-clamped\n   \"Uint16Array\"       :uint16\n   \"Uint32Array\"       :uint32\n   \"Int8Array\"         :int8\n   \"Int16Array\"        :int16\n   \"Int32Array\"        :int32\n   \"Float32Array\"      :float32\n   \"Float64Array\"      :float64})\n\n(defn typed-array?\n  \"Returns truthy value if the given arg is a typed array instance\"\n  [x]\n  (if (= \"object\" (goog/typeOf x))\n    (if (number? (.-BYTES_PER_ELEMENT x))\n      (.-buffer x))))\n\n(defn array-type\n  [x]\n  (if (array? x)\n    :array\n    (if (typed-array? x)\n      (->> (.-constructor x)\n           str\n           (re-find #\"((Uint|Int|Float)\\d+(Clamped)?Array)\")\n           first\n           (get array-types)))))\n\n(when typed-arrays-supported?\n  (run!\n   (fn [type]\n     (when-not (.. (aget js/self type) -prototype -slice)\n       (set! (.. (aget js/self type) -prototype -slice)\n             (fn [from to]\n               (this-as this\n                 (let [from (if (neg? from)\n                              (int (+ (.-length this) from))\n                              (int from))\n                       to   (if (goog/isNumber to)\n                              (if (neg? to)\n                                (int (+ (.-length this) to))\n                                (Math/min to (.-length this)))\n                              (.-length this))\n                       len  (Math/max (- to from) 0)\n                       ctor (.-constructor this)\n                       dest (js* \"new ~{}(~{})\" ctor len)]\n                   (loop [i 0]\n                     (when (< i len)\n                       (aset dest i (aget this (+ from i)))\n                       (recur (inc i))))\n                   dest))))))\n   (keys array-types)))\n\n(defn int8\n  \"Creates a native Int8Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created.\"\n  [size-or-coll]\n  (cond\n    (number? size-or-coll) (js/Int8Array. size-or-coll)\n    (typed-array? size-or-coll) (js/Int8Array. size-or-coll)\n    :else\n    (let [len (count size-or-coll)\n          buf (js/Int8Array. len)]\n      (loop [i 0, coll size-or-coll]\n        (when (< i len)\n          (aset buf i (first coll))\n          (recur (inc i) (next coll))))\n      buf)))\n\n(defn int8-view\n  \"Creates a Int8Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.\"\n  ([a] (js/Int8Array. (.-buffer a)))\n  ([a offset len] (js/Int8Array. (.-buffer a) offset len)))\n\n(defn uint8\n  \"Creates a native Uint8Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created.\"\n  [size-or-coll]\n  (cond\n    (number? size-or-coll) (js/Uint8Array. size-or-coll)\n    (typed-array? size-or-coll) (js/Uint8Array. size-or-coll)\n    :else\n    (let [len (count size-or-coll)\n          buf (js/Uint8Array. len)]\n      (loop [i 0, coll size-or-coll]\n        (when (< i len)\n          (aset buf i (first coll))\n          (recur (inc i) (next coll))))\n      buf)))\n\n(defn uint8-view\n  \"Creates a Uint8Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.\"\n  ([a] (js/Uint8Array. (.-buffer a)))\n  ([a offset len] (js/Uint8Array. (.-buffer a) offset len)))\n\n(defn uint8-clamped\n  \"Creates a native Uint8ClampedArray of the given size or from `coll`\n  If arg already is a typed array then a copy is created.\"\n  [size-or-coll]\n  (cond\n    (number? size-or-coll) (js/Uint8ClampedArray. size-or-coll)\n    (typed-array? size-or-coll) (js/Uint8ClampedArray. size-or-coll)\n    :else\n    (let [len (count size-or-coll)\n          buf (js/Uint8ClampedArray. len)]\n      (loop [i 0, coll size-or-coll]\n        (when (< i len)\n          (aset buf i (first coll))\n          (recur (inc i) (next coll))))\n      buf)))\n\n(defn uint8-clamped-view\n  \"Creates a Uint8ClampedArray view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.\"\n  ([a] (js/Uint8ClampedArray. (.-buffer a)))\n  ([a offset len] (js/Uint8ClampedArray. (.-buffer a) offset len)))\n\n(defn int16\n  \"Creates a native Int16Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created.\"\n  [size-or-coll]\n  (cond\n    (number? size-or-coll) (js/Int16Array. size-or-coll)\n    (typed-array? size-or-coll) (js/Int16Array. size-or-coll)\n    :else\n    (let [len (count size-or-coll)\n          buf (js/Int16Array. len)]\n      (loop [i 0, coll size-or-coll]\n        (when (< i len)\n          (aset buf i (first coll))\n          (recur (inc i) (next coll))))\n      buf)))\n\n(defn int16-view\n  \"Creates a Int16Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.\"\n  ([a] (js/Int16Array. (.-buffer a)))\n  ([a offset len] (js/Int16Array. (.-buffer a) offset len)))\n\n(defn uint16\n  \"Creates a native Uint16Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created.\"\n  [size-or-coll]\n  (cond\n    (number? size-or-coll) (js/Uint16Array. size-or-coll)\n    (typed-array? size-or-coll) (js/Uint16Array. size-or-coll)\n    :else\n    (let [len (count size-or-coll)\n          buf (js/Uint16Array. len)]\n      (loop [i 0, coll size-or-coll]\n        (when (< i len)\n          (aset buf i (first coll))\n          (recur (inc i) (next coll))))\n      buf)))\n\n(defn uint16-view\n  \"Creates a Uint16Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.\"\n  ([a] (js/Uint16Array. (.-buffer a)))\n  ([a offset len] (js/Uint16Array. (.-buffer a) offset len)))\n\n(defn int32\n  \"Creates a native Int32Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created.\"\n  [size-or-coll]\n  (cond\n    (number? size-or-coll) (js/Int32Array. size-or-coll)\n    (typed-array? size-or-coll) (js/Int32Array. size-or-coll)\n    :else\n    (let [len (count size-or-coll)\n          buf (js/Int32Array. len)]\n      (loop [i 0, coll size-or-coll]\n        (when (< i len)\n          (aset buf i (first coll))\n          (recur (inc i) (next coll))))\n      buf)))\n\n(defn int32-view\n  \"Creates a Int32Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.\"\n  ([a] (js/Int32Array. (.-buffer a)))\n  ([a offset len] (js/Int32Array. (.-buffer a) offset len)))\n\n(defn uint32\n  \"Creates a native Uint32Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created.\"\n  [size-or-coll]\n  (cond\n    (number? size-or-coll) (js/Uint32Array. size-or-coll)\n    (typed-array? size-or-coll) (js/Uint32Array. size-or-coll)\n    :else\n    (let [len (count size-or-coll)\n          buf (js/Uint32Array. len)]\n      (loop [i 0, coll size-or-coll]\n        (when (< i len)\n          (aset buf i (first coll))\n          (recur (inc i) (next coll))))\n      buf)))\n\n(defn uint32-view\n  \"Creates a Uint32Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.\"\n  ([a] (js/Uint32Array. (.-buffer a)))\n  ([a offset len] (js/Uint32Array. (.-buffer a) offset len)))\n\n(defn float32\n  \"Creates a native Float32Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created.\"\n  [size-or-coll]\n  (cond\n    (number? size-or-coll) (js/Float32Array. size-or-coll)\n    (typed-array? size-or-coll) (js/Float32Array. size-or-coll)\n    :else\n    (let [len (count size-or-coll)\n          buf (js/Float32Array. len)]\n      (loop [i 0, coll size-or-coll]\n        (when (< i len)\n          (aset buf i (first coll))\n          (recur (inc i) (next coll))))\n      buf)))\n\n(defn float32-view\n  \"Creates a Float32Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.\"\n  ([a] (js/Float32Array. (.-buffer a)))\n  ([a offset len] (js/Float32Array. (.-buffer a) offset len)))\n\n(defn float64\n  \"Creates a native Float64Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created.\"\n  [size-or-coll]\n  (cond\n    (number? size-or-coll) (js/Float64Array. size-or-coll)\n    (typed-array? size-or-coll) (js/Float64Array. size-or-coll)\n    :else\n    (let [len (count size-or-coll)\n          buf (js/Float64Array. len)]\n      (loop [i 0, coll size-or-coll]\n        (when (< i len)\n          (aset buf i (first coll))\n          (recur (inc i) (next coll))))\n      buf)))\n\n(defn float64-view\n  \"Creates a Float64Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.\"\n  ([a] (js/Float64Array. (.-buffer a)))\n  ([a offset len] (js/Float64Array. (.-buffer a) offset len)))\n"]}