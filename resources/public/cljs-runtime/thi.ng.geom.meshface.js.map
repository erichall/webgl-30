{"version":3,"sources":["thi/ng/geom/meshface.cljc"],"mappings":"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","names":["thi.ng.geom.meshface/xf-face-verts","mesh","p1__27585#","cljs.core.map.cljs$core$IFn$_invoke$arity$1","cljs.core/first","thi.ng.geom.core/raw","cljs.core/PROTOCOL_SENTINEL","this__4428__auto__","writer__4429__auto__","opt__4430__auto__","cljs.core/-write","thi.ng.geom.meshface/MeshFace","thi.ng.geom.meshface/->MeshFace","vertices","_hash","_","or__4185__auto__","cljs.core/hash","o","cljs.core/compare","thi.ng.geom.meshface/IndexedMeshFace","thi.ng.geom.meshface/->IndexedMeshFace","attribs","idx","p1__27628#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core.get.cljs$core$IFn$_invoke$arity$2","mattr","cljs.core/reduce-kv","acc","k","v","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/sequential?","p1__27629#","attr","aval","cljs.core/imul","c"],"sourcesContent":["(ns thi.ng.geom.meshface\n  (:require\n   [thi.ng.geom.core :as g]\n   [thi.ng.geom.vector :as v :refer [vec2 vec3]]))\n\n(defn xf-face-verts\n  [mesh] (map #(first (g/raw % mesh))))\n\n(deftype MeshFace\n    [vertices\n     #?@(:clj [^:unsynchronized-mutable _hash]\n         :cljs [^:mutable _hash])]\n\n  g/IVertexAccess\n  (vertices [_] vertices)\n  (vertices [_ _] vertices)\n\n  g/IAttributeAccess\n  (attribs [_ _] nil)\n\n  g/IRawAccess\n  (raw [_ _] [vertices])\n\n  Object\n  (toString [_] (str \\[ vertices \\]))\n  #?@(:clj\n      [(hashCode [_] (or _hash (set! _hash (.hashCode vertices))))\n       (equals\n        [_ o]\n        (and (instance? MeshFace o)\n             (clojure.lang.Util/equals vertices (.-vertices ^MeshFace o))))\n\n       Comparable\n       (compareTo [_ o] (compare vertices (.-vertices ^MeshFace o)))\n\n       clojure.lang.IHashEq\n       (hasheq [_] (.hashCode _))]\n\n      :cljs\n      [IHash\n       (-hash [_] (or _hash (set! _hash (hash vertices))))\n\n       IComparable\n       (-compare [_ o] (compare vertices (.-vertices ^MeshFace o)))]))\n\n(deftype IndexedMeshFace\n    [vertices attribs\n     #?@(:clj [^:unsynchronized-mutable _hash]\n         :cljs [^:mutable _hash])]\n\n  g/IVertexAccess\n  (vertices [_ mesh]\n    (let [idx (-> mesh :vertices :id->v)]\n      (mapv #(get idx %) vertices)))\n\n  g/IAttributeAccess\n  (attribs [_ mesh]\n    (let [mattr (get mesh :attribs)]\n      (reduce-kv\n       (fn [acc k v]\n         (let [idx (-> mattr (get k) (get :id->v))]\n           (assoc acc k (if (sequential? v) (mapv #(get idx %) v) (get idx v)))))\n       {} attribs)))\n  (attribs [_ mesh attr]\n    (let [idx  (-> mesh (get :attribs) (get attr) (get :id->v))\n          aval (attribs attr)]\n      (if (sequential? aval) (mapv idx attribs) (idx aval))))\n\n  g/IRawAccess\n  (raw [_ mesh]\n    [(g/vertices _ mesh) (g/attribs _ mesh)])\n\n  Object\n  (toString [_]\n    (str \\[ vertices \\space attribs \\]))\n  #?@(:clj\n      [(hashCode\n        [_]\n        (or _hash\n            (set! _hash\n                  (unchecked-add-int\n                   (unchecked-multiply-int (.hashCode vertices) 31)\n                   (.hashCode attribs)))))\n       (equals\n        [_ o]\n        (and (instance? IndexedMeshFace o)\n             (clojure.lang.Util/equals vertices (.-vertices ^IndexedMeshFace o))\n             (clojure.lang.Util/equals attribs (.-attribs ^IndexedMeshFace o))))\n\n       Comparable\n       (compareTo\n        [_ o]\n        (let [c (compare vertices (.-vertices ^IndexedMeshFace o))]\n          (if (zero? c)\n            (compare attribs (.-attribs ^IndexedMeshFace o))\n            c)))\n\n       clojure.lang.IHashEq\n       (hasheq [_] (.hashCode _))]\n\n      :cljs\n      [IHash\n       (-hash\n        [_]\n        (or _hash\n            (set! _hash\n                  (-> (hash vertices)\n                      (imul 31)\n                      (+ (hash attribs))\n                      (bit-or 0)))))\n\n       IComparable\n       (-compare\n        [_ o]\n        (let [c (compare vertices (.-vertices ^IndexedMeshFace o))]\n          (if (zero? c)\n            (compare attribs (.-attribs ^IndexedMeshFace o))\n            c)))]))\n"]}