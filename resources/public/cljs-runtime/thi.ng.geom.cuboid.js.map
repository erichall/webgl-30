{"version":3,"sources":["thi/ng/geom/cuboid.cljc"],"mappings":"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","names":["var_args","G__30059","thi.ng.geom.cuboid/cuboid","js/Error","thi.ng.geom.cuboid.cuboid.cljs$core$IFn$_invoke$arity$1","a","b","c","d","e","f","g","h","thi.ng.geom.types/Cuboid","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.vector/vec3","x","thi.ng.geom.cuboid.cuboid.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.vector.vec3.cljs$core$IFn$_invoke$arity$0","cljs.core/map?","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core/sequential?","cljs.core/count","thi.ng.xerror.core.illegal_arg_BANG_.cljs$core$IFn$_invoke$arity$2","thi.ng.xerror.core.illegal_arg_BANG_.cljs$core$IFn$_invoke$arity$1","o","size","vec__30061","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__30064","x1","y1","z1","thi.ng.geom.vector.vec3.cljs$core$IFn$_invoke$arity$1","x2","y2","z2","thi.ng.math.core._PLUS_.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.vector.vec3.cljs$core$IFn$_invoke$arity$3","cljs.core/PROTOCOL_SENTINEL","_","cljs.core.transduce.cljs$core$IFn$_invoke$arity$3","p1__30067#","cljs.core.map.cljs$core$IFn$_invoke$arity$1","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.utils/tri-area3","cljs.core/+","thi.ng.geom.core.tessellate.cljs$core$IFn$_invoke$arity$1","thi.ng.geom.utils/bounding-box","thi.ng.geom.utils/axis-range","thi.ng.geom.utils.bounding_sphere.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.core/centroid","p","thi.ng.geom.core/classify-point","thi.ng.geom.utils.center.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.utils.center.cljs$core$IFn$_invoke$arity$3","thi.ng.geom.utils/centroid","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","c'","thi.ng.geom.plane.plane_from_points.cljs$core$IFn$_invoke$arity$1","cljs.core/reduced","x__4273__auto__","y__4274__auto__","thi.ng.geom.core.faces.cljs$core$IFn$_invoke$arity$1","vec__30201","vec__30190","s","thi.ng.xerror.core.unsupported_BANG_.cljs$core$IFn$_invoke$arity$0","p__30165","map__30166","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$3","thi.ng.geom.core.as_mesh.cljs$core$IFn$_invoke$arity$2","mesh","flags","attribs","vec__30172","vec__30175","thi.ng.geom.core.vertices.cljs$core$IFn$_invoke$arity$1","north","south","east","west","front","back","thi.ng.dstruct.core/demunge-flags-seq","thi.ng.geom.attribs/generate-face-attribs","cljs.core.sequence.cljs$core$IFn$_invoke$arity$2","cljs.core.filter.cljs$core$IFn$_invoke$arity$1","cljs.core/identity","thi.ng.geom.core/into","or__4185__auto__","thi.ng.geom.basicmesh/basic-mesh","thi.ng.geom.utils/map-trilinear","acc","p'","thi.ng.geom.core/closest-point","thi.ng.geom.core/dist-squared","cljs.core/first","p__30111","map__30112","map__30122","vec__30127","vec__30130","thi.ng.math.core.random.cljs$core$IFn$_invoke$arity$2","p__30133","map__30134","map__30137","vec__30142","vec__30145","id","thi.ng.math.core.random.cljs$core$IFn$_invoke$arity$1","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","p__30082","p__30083","map__30084","map__30085","map__30088","thi.ng.geom.core.subdivide.cljs$core$IFn$_invoke$arity$2","points","num","cols","rows","slices","ru","cljs.core.partition.cljs$core$IFn$_invoke$arity$3","thi.ng.math.core/norm-range","rv","rw","map-p","p1__30068#","thi.ng.math.core/roundto","thi.ng.math.core/*eps*","iter__4582__auto__","s__30091","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","xs__6292__auto__","vec__30098","iterys__4578__auto__","s__30093","vec__30101","s__30095","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","b__30097","cljs.core/chunk-buffer","i__30096","vec__30105","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__30094","cljs.core/chunk-rest","vec__30108","cljs.core/cons","cljs.core/rest","fs__4579__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__30092","iter__30090","w1","w2","v1","v2","u1","u2","p__30208","map__30209","thi.ng.geom.core.tessellate.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.utils/tessellate-3","opts","cljs.core/some","cljs.core/keys","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1","thi.ng.geom.core/faces","theta","thi.ng.geom.core/rotate-z","p1__30069#","thi.ng.geom.core/rotate-x","p1__30070#","thi.ng.geom.core/rotate-y","p1__30071#","axis","p1__30072#","thi.ng.geom.core/rotate-around-axis","p1__30073#","thi.ng.math.core._STAR_.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.utils.scale_size.cljs$core$IFn$_invoke$arity$2","t","p1__30074#","m","p1__30075#","thi.ng.geom.core/transform-vector","vec__30204","p1__30076#","G__30207","thi.ng.geom.tetrahedron.tetrahedron.cljs$core$IFn$_invoke$arity$1","thi.ng.geom.core/volume","thi.ng.math.core/abs*","cljs.core/chunk-first"],"sourcesContent":["(ns thi.ng.geom.cuboid\n  #?(:cljs\n     (:require-macros\n      [thi.ng.math.macros :as mm]))\n  (:require\n   [thi.ng.geom.core :as g]\n   [thi.ng.geom.utils :as gu]\n   [thi.ng.geom.vector :as v :refer [vec3]]\n   [thi.ng.geom.attribs :as attr]\n   [thi.ng.geom.basicmesh :as bm]\n   [thi.ng.geom.plane :as p]\n   [thi.ng.geom.tetrahedron :as tetra]\n   #?(:clj [thi.ng.geom.types] :cljs [thi.ng.geom.types :refer [Cuboid]])\n   [thi.ng.dstruct.core :as d]\n   [thi.ng.xerror.core :as err]\n   [thi.ng.math.core :as m :refer [*eps*]]\n   #?(:clj [thi.ng.math.macros :as mm]))\n  #?(:clj (:import [thi.ng.geom.types Cuboid])))\n\n;; Unlike an axis-aligned bounding box (AABB), this type specifies a\n;; freeform box/cuboid, defined by its 8 vertices and which can be\n;; freely rotated & transformed. An AABB can be considered a logical\n;; subtype of this type and an AABB can be converted into a cuboid via\n;; the `cuboid` constructor function defined in this namespace.\n\n(defn cuboid\n  ([] (cuboid 1.0))\n  ([a b c d e f g h]\n   (Cuboid. (mapv vec3 [a b c d e f g h])))\n  ([x]\n   (cond\n     (number? x)     (cuboid (vec3) x)\n     (map? x)        (cuboid (get x :p) (get x :size))\n     (sequential? x) (if (== 8 (count x))\n                       (Cuboid. (mapv vec3 x))\n                       (err/illegal-arg!\n                        \"Wrong number of points, expected 8 but got\"\n                        (count x)))\n     :else           (err/illegal-arg! x)))\n  ([o size]\n   (let [[x1 y1 z1 :as a] (vec3 o)\n         [x2 y2 z2 :as g] (m/+ a size)\n         b                (vec3 x1 y1 z2)\n         c                (vec3 x2 y1 z2)\n         d                (vec3 x2 y1 z1)\n         e                (vec3 x1 y2 z1)\n         f                (vec3 x1 y2 z2)\n         h                (vec3 x2 y2 z1)]\n     (Cuboid. [a b c d e f g h]))))\n\n(extend-type Cuboid\n\n  g/IArea\n  (area\n    [_] (transduce (map #(apply gu/tri-area3 %)) + (g/tessellate _)))\n\n  g/IBounds\n  (bounds [_] (gu/bounding-box (get _ :points)))\n  (width [_] (gu/axis-range 0 (get _ :points)))\n  (height [_] (gu/axis-range 1 (get _ :points)))\n  (depth [_] (gu/axis-range 2 (get _ :points)))\n\n  g/IBoundingSphere\n  (bounding-sphere\n    [_] (gu/bounding-sphere (g/centroid _) (get _ :points)))\n\n  g/IBoundary\n  (contains-point?\n    [_ p] (>= (g/classify-point _ p) 0))\n\n  g/ICenter\n  (center\n    ([_] (Cuboid. (gu/center (vec3) (get _ :points))))\n    ([_ o] (Cuboid. (gu/center (g/centroid _) (vec3 o) (get _ :points)))))\n  (centroid\n    [_] (gu/centroid (get _ :points)))\n\n  ;; In order to determine if a given point lies within or outside the\n  ;; cuboid, we compute the classifier for each of the 6 sides /\n  ;; facets / plane and use their maximum as compound result. Since\n  ;; the faces are all pointing outwards (away from the center),\n  ;; `classify-point` for each face will return a positive value if\n  ;; the point is in the positive half space of that plane. This\n  ;; means, in order for a point to be inside the cuboid, all plane\n  ;; classifiers need to be negative (or zero if the point is on the\n  ;; surface. The search is terminated early as soon as one facet\n  ;; produces a positive classifier.\n  ;;\n  ;; *Note:* Because of its reliance on plane normals, this\n  ;; implementation only works for fully planar cuboids.\n\n  g/IClassify\n  (classify-point\n    [_ p]\n    (- (reduce\n        (fn [c f]\n          (let [c' (g/classify-point (p/plane-from-points f) p)]\n            (if (pos? c') (reduced c') (max c c'))))\n        -1.0 (g/faces _))))\n\n  ;; e +----+ h\n  ;;   |\\   :\\\n  ;;   |f+----+ g\n  ;;   | |  : |\n  ;; a +-|--+d|\n  ;;    \\|   \\|\n  ;;   b +----+ c\n  ;;\n  ;; Faces are always returned in this order: east, west, north,\n  ;; south, front, back - assuming the vertex order given in the\n  ;; diagram.\n\n  g/IVertexAccess\n  (vertices\n    [_] (get _ :points))\n\n  g/IEdgeAccess\n  (edges\n    [_]\n    (let [[a b c d e f g h] (get _ :points)]\n      [[a b] [b c] [c d] [d a] ;; bottom\n       [e f] [f g] [g h] [h e] ;; top\n       [a e] [b f]             ;; left\n       [c g] [d h]             ;; right\n       ]))\n\n  g/IFaceAccess\n  (faces\n    [_]\n    (let [[a b c d e f g h] (get _ :points)]\n      [[c d h g] ;; east\n       [a b f e] ;; west\n       [f g h e] ;; north\n       [a d c b] ;; south\n       [b c g f] ;; front\n       [d a e h] ;; back\n       ]))\n\n  g/IIntersect\n  (intersect-shape\n    [_ s] (err/unsupported!))\n\n  g/IMeshConvert\n  (as-mesh\n    ([_] (g/as-mesh _ {}))\n    ([_ {:keys [mesh flags attribs] :or {flags \"nsewfb\"}}]\n     (let [[a b c d e f g h] (g/vertices _)\n           [north south east west front back] (d/demunge-flags-seq flags \"nsewfb\")]\n       (->> [(if east  (attr/generate-face-attribs [c d h g] 0 attribs nil))\n             (if west  (attr/generate-face-attribs [a b f e] 1 attribs nil))\n             (if north (attr/generate-face-attribs [f g h e] 2 attribs nil))\n             (if south (attr/generate-face-attribs [a d c b] 3 attribs nil))\n             (if front (attr/generate-face-attribs [b c g f] 4 attribs nil))\n             (if back  (attr/generate-face-attribs [d a e h] 5 attribs nil))]\n            (sequence (filter identity))\n            (g/into (or mesh (bm/basic-mesh)))))))\n\n  ;; - `map-point` still missing\n  ;; - `unmap-point` takes a seq of 8 points defining a cuboid and vector\n  ;;   of normalized UVW coordinates. Applies trilinear interpolation to\n  ;;   compute point within the cuboid:\n  ;;   - U is coord along AD/BC edge\n  ;;   - V along AE/BF\n  ;;   - W along AB/DC\n  ;;\n  ;; Also see: `map-trilinear`\n\n  g/IPointMap\n  (map-point\n    [_ p] (err/unsupported!))\n  (unmap-point\n    [_ p]\n    (gu/map-trilinear (get _ :points) p))\n\n  ;; FIXME either calc barycentric coords for quad or use triangles\n  ;; (already implemented) Do not use, work in progress...\n\n  g/IProximity\n  (closest-point\n    [_ p]\n    (->> (g/faces _)\n         (reduce\n          (fn [acc f]\n            (let [p' (g/closest-point (p/plane-from-points f) p)\n                  d (g/dist-squared p p')]\n              (if (< d (acc 1)) [p' d] acc)))\n          [nil 1e+100])\n         (first)))\n\n  g/ISample\n  (random-point-inside\n    [{p :p size :size}]\n    (let [[x1 y1 z1] p\n          [x2 y2 z2] (m/+ p size)]\n      (vec3 (m/random x1 x2) (m/random y1 y2) (m/random z1 z2))))\n  (random-point\n    [{p :p size :size}]\n    (let [[x1 y1 z1] p\n          [x2 y2 z2] (m/+ p size)\n          id (int (m/random 6))]\n      (cond\n        (< id 2) (vec3 (if (zero? id) x1 x2) (m/random y1 y2) (m/random z1 z2))\n        (< id 4) (vec3 (m/random x1 x2) (if (= 2 id) y1 y2) (m/random z1 z2))\n        :else    (vec3 (m/random x1 x2) (m/random y1 y2) (if (= 4 id) z1 z2)))))\n\n  ;; An Cuboid can be subdivided into smaller ones, i.e. to create a\n  ;; seq of uniform grid cells. The following options can be given as\n  ;; a 2nd argument map:\n  ;;\n  ;; | Key       | Description                                                           | Default |\n  ;; |-----------+-----------------------------------------------------------------------+---------|\n  ;; | `:num`    | number of cols/rows/slices the form will be uniformly subdivided into |       1 |\n  ;; | `:cols`   | number of times the form will be subdivided along the X-axis          |       1 |\n  ;; | `:rows`   | number of times the form will be subdivided along the Y-axis          |       1 |\n  ;; | `:slices` | number of times the form will be subdivided along the Z-axis          |       1 |\n  ;;\n  ;; When `:num` is given, the resulting cuboids will retain the\n  ;; aspect ratio of the original. If specified, `:cols`, `:rows` and\n  ;; `:slices` will take precedence over `:num`, but the latter will\n  ;; be used as default for missing args. Cuboids are returned as a\n  ;; lazyseq starting from the first vertex of the original with inner\n  ;; sorting over XYZ.\n\n  g/ISubdivide\n  (subdivide\n    ([_] (g/subdivide _ {}))\n    ([{points :points} {:keys [num cols rows slices] :or {num 1}}]\n     (let [ru    (partition 2 1 (m/norm-range (or cols num)))\n           rv    (partition 2 1 (m/norm-range (or rows num)))\n           rw    (partition 2 1 (m/norm-range (or slices num)))\n           map-p (fn [p]\n                   (->> (gu/map-trilinear points p)\n                        (mapv #(m/roundto % *eps*))\n                        (vec3)))]\n       (for [[w1 w2] rw, [v1 v2] rv, [u1 u2] ru]\n         (Cuboid.\n          (mapv map-p [[u1 v1 w1] [u1 v1 w2] [u2 v1 w2] [u2 v1 w1]\n                       [u1 v2 w1] [u1 v2 w2] [u2 v2 w2] [u2 v2 w1]]))))))\n\n  g/ITessellate\n  (tessellate\n    ([_] (g/tessellate _ {}))\n    ([_ {f :fn :or {f gu/tessellate-3} :as opts}]\n     (->> (if (some #{:num :cols :rows :slices} (keys opts))\n            (g/subdivide _ opts)\n            [_])\n          (sequence\n           (comp\n            (mapcat g/faces)\n            (mapcat f))))))\n\n  g/IRotate\n  (rotate\n    [_ theta] (g/rotate-z _ theta))\n\n  g/IRotate3D\n  (rotate-x\n    [_ theta] (Cuboid. (mapv #(g/rotate-x % theta) (get _ :points))))\n  (rotate-y\n    [_ theta] (Cuboid. (mapv #(g/rotate-y % theta) (get _ :points))))\n  (rotate-z\n    [_ theta] (Cuboid. (mapv #(g/rotate-z % theta) (get _ :points))))\n  (rotate-around-axis\n    [_ axis theta]\n    (Cuboid.\n     (mapv #(g/rotate-around-axis % axis theta) (get _ :points))))\n\n  g/IScale\n  (scale\n    [_ s] (Cuboid. (mapv #(m/* % s) (get _ :points))))\n  (scale-size\n    [_ s] (Cuboid. (gu/scale-size s (get _ :points))))\n\n  g/ITranslate\n  (translate\n    [_ t] (Cuboid. (mapv #(m/+ % t) (get _ :points))))\n\n  g/ITransform\n  (transform\n    [_ m] (Cuboid. (mapv #(g/transform-vector m %) (get _ :points))))\n\n  ;; https://www.math.ucdavis.edu/~deloera/CURRENT_INTERESTS/small.cubes.ps\n  ;; http://www.ics.uci.edu/~eppstein/projects/tetra/\n\n  g/IVolume\n  (volume\n    [_]\n    (let [[a b c d e f g h] (get _ :points)]\n      (transduce\n       (map #(-> % tetra/tetrahedron g/volume m/abs*))\n       +\n       [[a b d e]\n        [b c d g]\n        [d e g h]\n        [b d e g]\n        [b f g e]]))))\n"]}