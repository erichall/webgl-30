{"version":3,"sources":["webgl_30/lessons/multipoint.cljs"],"mappings":"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","names":["webgl-30.lessons.multipoint/initial-state","js/webgl-30","js/webgl-30.lessons","js/webgl-30.lessons.multipoint","js/webgl-30.lessons.multipoint.state-atom","webgl-30.lessons.multipoint/state-atom","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/deref","cljs.core/reset!","webgl-30.lessons.multipoint/vertex-shader","webgl-30.lessons.multipoint/fragment-shader","p__26669","map__26671","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","webgl-30.lessons.multipoint/draw!","_","gl","point-size","objects-to-draw","program","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","webgl_30.webgl_id2.vertex_attrib_1f.cljs$core$IFn$_invoke$arity$variadic","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","webgl-30.webgl-id2/uniform4f","G__26687","webgl_30.webgl_id2.clear_color_BANG_.cljs$core$IFn$_invoke$arity$variadic","webgl_30.webgl_id2.clear_BANG_.cljs$core$IFn$_invoke$arity$variadic","webgl_30.webgl_id2.draw_arrays_BANG_.cljs$core$IFn$_invoke$arity$variadic","webgl-30.lessons.multipoint/setup!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","p__26713","map__26721","state","webgl-30.webgl-id2/init-shaders","a-position-attribute","webgl-30.webgl-id2/attribute","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","webgl-30.webgl-id2/uniform","webgl-30.webgl-id2/initialize-vertex-buffer!","js/Float32Array","webgl-30.lessons.multipoint/raf-draw!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","js/requestAnimationFrame","t","webgl-30.lessons.multipoint/lesson","webgl-30.core/get-filename","canvas-id","w","h","webgl-30.component/webgl-canvas","webgl-30.webgl-id2/get-context"],"sourcesContent":["(ns webgl-30.lessons.multipoint\n  (:require [webgl-30.webgl-id2 :as w]\n            [webgl-30.core :as c]\n            [webgl-30.input :as i]\n            [webgl-30.component :refer [webgl-canvas]]))\n\n(def initial-state {:gl         nil\n                    :point-size 20})\n(defonce state-atom (atom nil))\n(when (nil? @state-atom)\n  (reset! state-atom initial-state))\n\n(def vertex-shader\n  \"\n  attribute float a_pointsize;\n  attribute vec4 a_position;\n\n  void main() {\n       gl_Position = a_position;\n       gl_PointSize = a_pointsize;\n  }\")\n\n(def fragment-shader\n  \"\n  precision mediump float;\n  uniform vec4 u_fragcolor;\n  void main() {\n       gl_FragColor = u_fragcolor;\n   }\")\n\n(defn draw!\n  [_ {:keys [gl point-size objects-to-draw]}]\n  (let [program (get-in objects-to-draw [:the-object :program])]\n    (w/vertex-attrib-1f gl (get-in objects-to-draw [:the-object :attributes :a-pointsize :location]) point-size)\n    (apply w/uniform4f gl (get-in objects-to-draw [:the-object :uniforms :u-fragcolor :location]) [0.0 1.0 0.0 1.0])\n\n    (doto gl\n      (w/clear-color! 0.0 0.0 0.0 1.0)\n      (w/clear! (.-COLOR_BUFFER_BIT gl))\n      (w/draw-arrays! (.-POINTS gl) 0 4))))\n\n(defn setup!\n  []\n  (swap! state-atom (fn [{:keys [gl] :as state}]\n                      (let [program (w/init-shaders gl vertex-shader fragment-shader)\n                            a-position-attribute (w/attribute gl program {:name \"a_position\"\n                                                                          :size 2})]\n                        (-> (assoc state :objects-to-draw\n                                         {:the-object {:program    program\n                                                       :uniforms   {:u-fragcolor (w/uniform gl program {:name \"u_fragcolor\"})}\n                                                       :attributes {:a-position  a-position-attribute\n                                                                    :a-pointsize (w/attribute gl program {:name \"a_pointsize\"})}\n                                                       :buffers    {:a-position-buffer (w/initialize-vertex-buffer! gl {:data      (js/Float32Array. [0.0 0.5\n                                                                                                                                                      -0.5 -0.5\n                                                                                                                                                      0.5 -0.5])\n                                                                                                                        :attribute a-position-attribute})}}}))))))\n\n(defn raf-draw!\n  [state]\n  (swap! state-atom assoc :raf-id (js/requestAnimationFrame (fn [t] (draw! t state)))))\n\n(def ^:export lesson\n  {:title           (fn []\n                      [:div\n                       [:h1 {:style {:font-family \"monospace\"}}\n                        \"This is chapter 3 from WebGL Programming Guide Interactive 3D Graphics Programming with WebGL\"]\n                       [:h4 {:style {:font-family \"monospace\"}}\n                        \"multipoint by WebGL Programming Guide Interactive 3D Graphics Programming with WebGL by Kouichi Matsuda, Rodger Lea.\"]])\n   :source          (c/get-filename #'state-atom)\n   :tutorial-source \"WebGL Programming Guide Interactive 3D Graphics Programming with WebGL by Kouichi Matsuda, Rodger Lea.\"\n   :start           (fn []\n                      (let [canvas-id \"fundamentals\"\n                            w 400\n                            h 400]\n                        [webgl-canvas {:height   h\n                                       :width    w\n                                       :id       canvas-id\n                                       :on-mount (fn []\n                                                   (let [gl (w/get-context canvas-id)]\n                                                     (do\n                                                       (swap! state-atom assoc :gl gl)\n                                                       (setup!)\n                                                       (raf-draw! @state-atom))))}]))})\n"]}