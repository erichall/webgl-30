{"version":3,"sources":["webgl_30/lessons/color_point.cljs"],"mappings":"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","names":["webgl-30.lessons.color-point/initial-state","js/webgl-30","js/webgl-30.lessons","js/webgl-30.lessons.color-point","js/webgl-30.lessons.color-point.state-atom","webgl-30.lessons.color-point/state-atom","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/deref","cljs.core/reset!","webgl-30.lessons.color-point/vertex-shader","webgl-30.lessons.color-point/fragment-shader","p__26674","map__26677","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","webgl-30.lessons.color-point/draw!","_","gl","clicks","colors","point-size","objects-to-draw","program","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","frag-color-location","webgl-30.webgl-id2/get-uniform-location","webgl_30.webgl_id2.vertex_attrib_1f.cljs$core$IFn$_invoke$arity$variadic","webgl-30.webgl-id2/get-attribute-location","G__26686","webgl_30.webgl_id2.clear_color_BANG_.cljs$core$IFn$_invoke$arity$variadic","webgl_30.webgl_id2.clear_BANG_.cljs$core$IFn$_invoke$arity$variadic","seq__26692","cljs.core/seq","chunk__26693","count__26694","i__26695","vec__26732","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__26735","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__26742","cljs.core/first","vec__26745","cljs.core/next","color","x","y","cljs.core.mapv.cljs$core$IFn$_invoke$arity$3","cljs.core/vector","webgl_30.webgl_id2.vertex_attrib_3f.cljs$core$IFn$_invoke$arity$variadic","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","webgl-30.webgl-id2/uniform4f","webgl_30.webgl_id2.draw_arrays_BANG_.cljs$core$IFn$_invoke$arity$variadic","webgl-30.lessons.color-point/setup!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","p__26753","map__26754","state","webgl-30.webgl-id2/init-shaders","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","webgl-30.lessons.color-point/raf-draw!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","js/requestAnimationFrame","t","p__26762","vec__26764","webgl-30.lessons.color-point/get-color","webgl-30.lessons.color-point/lesson","webgl-30.core/get-filename","canvas-id","w","h","webgl-30.component/webgl-canvas","webgl-30.webgl-id2/get-context","webgl-30.input/mousedown","webgl-30.webgl-id2/get-canvas","e","rect","l","c-x","c-y","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/conj"],"sourcesContent":["(ns webgl-30.lessons.color-point\n  (:require [webgl-30.webgl-id2 :as w]\n            [webgl-30.core :as c]\n            [webgl-30.input :as i]\n            [webgl-30.component :refer [webgl-canvas]]))\n\n(def initial-state {:gl         nil\n                    :point-size 20\n                    :clicks     []\n                    :colors     []})\n(defonce state-atom (atom nil))\n(when (nil? @state-atom)\n  (reset! state-atom initial-state))\n\n(def vertex-shader\n  \"\n  attribute float a_pointsize;\n  attribute vec4 a_position;\n\n  void main() {\n       gl_Position = a_position;\n       gl_PointSize = a_pointsize;\n  }\")\n\n(def fragment-shader\n  \"\n  precision mediump float;\n  uniform vec4 u_fragcolor;\n  void main() {\n       gl_FragColor = u_fragcolor;\n   }\")\n\n(defn draw!\n  [_ {:keys [gl clicks colors point-size objects-to-draw]}]\n  (let [program (get-in objects-to-draw [:the-object :program])\n        frag-color-location (w/get-uniform-location gl program \"u_fragcolor\")]\n    (w/vertex-attrib-1f gl (w/get-attribute-location gl program \"a_pointsize\") point-size)\n\n    (doto gl\n      (w/clear-color! 0.0 0.0 0.0 1.0)\n      (w/clear! (.-COLOR_BUFFER_BIT gl)))\n\n    (doseq [[color [x y]] (mapv vector colors clicks)]\n      (w/vertex-attrib-3f gl (w/get-attribute-location gl program \"a_position\") x y 0.0)\n      (apply w/uniform4f gl frag-color-location color)\n      (w/draw-arrays! gl (.-POINTS gl) 0 1))))\n\n(defn setup!\n  []\n  (swap! state-atom (fn [{:keys [gl] :as state}]\n                      (let [program (w/init-shaders gl vertex-shader fragment-shader)]\n                        (assoc state :objects-to-draw\n                                     {:the-object {:program program}})))))\n\n(defn raf-draw!\n  [state]\n  (swap! state-atom assoc :raf-id (js/requestAnimationFrame (fn [t] (draw! t state)))))\n\n(defn get-color\n  [[x y]]\n  (cond\n    (and (>= x 0) (>= y 0))\n    [1.0 0.0 0.0 1.0]\n\n    (and (< x 0) (< y 0))\n    [0.0 1.0 0.0 1.0]\n\n    :else\n    [1.0 1.0 1.0 1.0]))\n\n(def ^:export lesson\n  {:title           (fn []\n                      [:div\n                       [:h1 {:style {:font-family \"monospace\"}}\n                        \"This is chapter 3 from WebGL Programming Guide Interactive 3D Graphics Programming with WebGL\"]\n                       [:h4 {:style {:font-family \"monospace\"}}\n                        \"color point by WebGL Programming Guide Interactive 3D Graphics Programming with WebGL by Kouichi Matsuda, Rodger Lea.\"]])\n   :source          (c/get-filename #'state-atom)\n   :tutorial-source \"WebGL Programming Guide Interactive 3D Graphics Programming with WebGL by Kouichi Matsuda, Rodger Lea.\"\n   :start           (fn []\n                      (let [canvas-id \"fundamentals\"\n                            w 400\n                            h 400]\n                        [webgl-canvas {:height   h\n                                       :width    w\n                                       :id       canvas-id\n                                       :on-mount (fn []\n                                                   (let [gl (w/get-context canvas-id)]\n                                                     (do\n                                                       (swap! state-atom assoc :gl gl)\n                                                       (i/mousedown (w/get-canvas gl) (fn [e]\n                                                                                        (let [x (aget e \"clientX\")\n                                                                                              y (aget e \"clientY\")\n                                                                                              rect (.getBoundingClientRect (aget e \"target\"))\n                                                                                              l (aget rect \"left\")\n                                                                                              t (aget rect \"top\")\n                                                                                              c-x (/ (- (- x l) (/ h 2)) (/ h 2))\n                                                                                              c-y (/ (- (/ w 2) (- y t)) (/ w 2))]\n                                                                                          (-> (swap! state-atom (fn [state]\n                                                                                                                  (-> (update state :clicks conj [c-x c-y])\n                                                                                                                      (update :colors conj (get-color [c-x c-y])))))\n                                                                                              raf-draw!))))\n\n                                                       (setup!)\n                                                       (raf-draw! @state-atom))))}]))})\n"]}