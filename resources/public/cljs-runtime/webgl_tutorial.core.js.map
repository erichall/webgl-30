{"version":3,"sources":["webgl_tutorial/core.cljs"],"mappings":";;;;;;;;;;;;;AAeA,AAACA;AACD,AAAA,AAAMC;AAAN,AAAA;;AACA,AAAA,AAAMC;AAAN,AAAA;;AAEA,AAAA,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAU,AAAA,AAAA,AAAA,AAACC;;AACpB,AAAA,AAAAJ,AAAAC,AAAAI;AAAA;AAAA,AAAA,AAASC,AAAO,AAAA,AAACC;;AAajB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAiBL,AAAKC,AAAS,AAAA,AAAA,AAACC,AAAa,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AACM,AAAA,AAACC;AAEpC,AAAA,AAAAZ,AAAAC,AAAAY;AAAA;AAAA,AAAA,AAASC,AAAO,AAAA,AAACC;;AAEjB,AAAA,AAAMC,AACHC,AAAMC,AAAKC;AADd,AAEMF,AACA,AAAA,AAACG,AACD,AAAA,AAACC,AAAc,AAACC,AAA8BhB,AAAOE,AACrD,AAACe,AAAwBjB,AAAOkB,AAChC,AAACC,AAAUN;;AAEjB,AAAA,AAAMO,AACHC;AADH,AAEE,AAAAC,AAAMtB;AAAN,AAAA,AAAAsB,AAAA,AAAA,AAAA,AAAA,AAAA,AACGC;;AADH,AAAAD,AAEGE,AAAoB,AAACd,AAA4BP,AAASD,AAAYM;;AAFzEc;;AAKF,AAAA,AAAA5B,AAAAC,AAAA8B;AAAA;AAAA,AAAA,AAASC,AACA,AAACC,AAAa,AAAKN;AAAL,AAAQ,AAACD,AAAYC;;AAArB","names":["cljs.core/enable-console-print!","webgl-tutorial.core/init!","webgl-tutorial.core/reload!","js/webgl-tutorial","js/webgl-tutorial.core","js/webgl-tutorial.core.app-state","webgl-tutorial.core/app-state","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","js/webgl-tutorial.core.gl-ctx","webgl-tutorial.core/gl-ctx","thi.ng.geom.gl.core.gl_context.cljs$core$IFn$_invoke$arity$1","webgl-tutorial.core/shader-spec","webgl-tutorial.core/triangle","thi.ng.geom.core.as_mesh.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.triangle.triangle3.cljs$core$IFn$_invoke$arity$1","thi.ng.geom.gl.glmesh.gl_mesh.cljs$core$IFn$_invoke$arity$1","js/webgl-tutorial.core.camera","webgl-tutorial.core/camera","thi.ng.geom.gl.camera/perspective-camera","webgl-tutorial.core/combine-model-shader-camera","model","spec","camera","thi.ng.geom.gl.core/as-gl-buffer-spec","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","thi.ng.geom.gl.shaders/make-shader-from-spec","thi.ng.geom.gl.core/make-buffers-in-spec","thi.ng.geom.gl.webgl.constants/static-draw","thi.ng.geom.gl.camera/apply","webgl-tutorial.core/draw-frame!","t","G__28068","thi.ng.geom.gl.core.clear_color_and_depth_buffer.cljs$core$IFn$_invoke$arity$6","thi.ng.geom.gl.core/draw-with-shader","js/webgl-tutorial.core.running","webgl-tutorial.core/running","thi.ng.geom.gl.webgl.animator.animate.cljs$core$IFn$_invoke$arity$1"],"sourcesContent":["(ns webgl-tutorial.core\n  (:require\n    [thi.ng.geom.gl.core :as gl]\n    [thi.ng.geom.matrix :as mat]\n    [thi.ng.geom.triangle :as tri]\n    [thi.ng.geom.core :as geom]\n    [thi.ng.geom.gl.glmesh :as glmesh]\n    [thi.ng.geom.gl.camera :as cam]\n    [thi.ng.geom.gl.shaders :as shaders]\n    [thi.ng.geom.gl.webgl.constants :as glc]\n    [thi.ng.geom.gl.webgl.animator :as anim]\n    [reagent.core :as r]\n    [reagent.dom :as rd]\n    ))\n\n(enable-console-print!)\n(defn init! [] nil)\n(defn reload! [] nil)\n\n(defonce app-state (atom {:red 0}))\n(defonce gl-ctx (gl/gl-context \"main\"))\n\n;(def shader-spec\n;  {:vs       \"void main() {\n;                gl_Position = proj * view * vec4(position, 1.0);\n;              }\"\n;   :fs       \"void main() {\n;                gl_FragColor = vec4(0.5, 0.5, 1.0, 1.0);\n;              }\"\n;   :uniforms {:view :mat4\n;              :proj :mat4}\n;   :attribs  {:position :vec3}})\n\n(def shader-spec\n  {:vs       \"\n  void main() {\n    gl_Position = proj * view * vec4(position, 1.0);\n  }\"\n   :fs       \"\n   void main() {\n      gl_FragColor = vec4(1.0 1.0 1.0, 1.7);\n   }\n   \"\n   ;:version  330\n   :uniforms {:view :mat4\n              :proj :mat4}\n   :attribs  {:position :vec3}})\n\n\n;; model\n(def triangle (geom/as-mesh (tri/triangle3 [[1 0 0] [0 1 0] [0 0 1]])\n                            {:mesh (glmesh/gl-mesh 3)}))\n;; viewport\n(defonce camera (cam/perspective-camera {}))\n\n(defn combine-model-shader-camera\n  [model spec camera]\n  (-> model\n      (gl/as-gl-buffer-spec {})\n      (assoc :shader (shaders/make-shader-from-spec gl-ctx shader-spec))\n      (gl/make-buffers-in-spec gl-ctx glc/static-draw)\n      (cam/apply camera)))\n\n(defn draw-frame!\n  [t]\n  (doto gl-ctx\n    (gl/clear-color-and-depth-buffer 0 0 0 1 1)\n    (gl/draw-with-shader (combine-model-shader-camera triangle shader-spec camera))\n    ))\n\n(defonce running\n         (anim/animate (fn [t] (draw-frame! t) true)))\n\n"]}