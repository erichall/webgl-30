{"version":3,"sources":["webgl_30/lessons/matrices_2d_2.cljs"],"mappings":"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","names":["webgl-30.lessons.matrices-2d_2/initial-state","js/webgl-30","js/webgl-30.lessons","js/webgl-30.lessons.matrices-2d_2","js/webgl-30.lessons.matrices-2d_2.state-atom","webgl-30.lessons.matrices-2d_2/state-atom","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/deref","cljs.core/reset!","webgl-30.lessons.matrices-2d_2/fragment-shader","webgl-30.lessons.matrices-2d_2/vertex-shader","p__26057","map__26060","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","webgl-30.lessons.matrices-2d_2/multiply-matrices","rect","gl","map__26075","translation","angle-rad","scale","translation-matrix","webgl-30.math/translation-2d-matrix","rotation-matrix","webgl-30.math/rotation-2d-matrix","scale-matrix","webgl-30.math/scaling-2d-matrix","projection-matrix","webgl-30.math/projection-2d-matrix","webgl-30.webgl/get-canvas-width","webgl-30.webgl/get-canvas-height","move-origin-matrix","webgl-30.math/matrix-multiply-2d","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","webgl-30.lessons.matrices-2d_2/format","seq26095","G__26096","cljs.core/first","cljs.core/next","self__4776__auto__","f","xs","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","cljs.pprint/cl-format","webgl-30.lessons.matrices-2d_2/draw!","timestamp","map__26104","state","cljs.core/assoc-in","webgl-30.webgl/draw-scene!","webgl-30.lessons.matrices-2d_2/setup!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","p__26119","map__26121","program","webgl-30.webgl/link-shaders!","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","webgl-30.webgl/attribute","js/Float32Array","webgl-30.shapes/f-shape-2d","webgl-30.lessons.matrices-2d_2/lesson","webgl-30.core/get-filename","canvas-id","webgl-30.component/webgl-canvas","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","webgl-30.webgl/get-context","js/requestAnimationFrame","webgl-30.component/slider","val","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","webgl_30.lessons.matrices_2d_2.format.cljs$core$IFn$_invoke$arity$variadic","webgl-30.math/deg->rad","webgl-30.math/rad->deg"],"sourcesContent":["(ns webgl-30.lessons.matrices-2d_2\n  (:require [reagent.core :as r]\n            [webgl-30.math :as m]\n            [webgl-30.webgl :as webgl]\n            [webgl-30.shapes :as shapes]\n            [webgl-30.core :as c]\n            [webgl-30.component :refer [webgl-canvas slider]]))\n\n(def initial-state {:gl   nil\n                    :rect {:translation [140 150]\n                           :rotation    [0 1]\n                           :scale       [1 1]\n                           :angle-rad   0\n                           :width       100\n                           :height      30\n                           :color       [0.3 0.3 0.3 1]}})\n(defonce state-atom (r/atom nil))\n(when (nil? @state-atom)\n  (reset! state-atom initial-state))\n\n(def fragment-shader\n  \"precision mediump float;\n   uniform vec4 u_color;\n   void main() {\n       gl_FragColor = u_color;\n   }\")\n\n(def vertex-shader\n  \"attribute vec2 a_position;\n\n  uniform mat3 u_matrix;\n\n  void main() {\n    gl_Position = vec4((u_matrix * vec3(a_position, 1)).xy, 0, 1);\n  }\")\n\n(defn multiply-matrices\n  [{:keys [rect gl]}]\n  (let [{:keys [translation angle-rad scale]} rect\n        translation-matrix (m/translation-2d-matrix translation)\n        rotation-matrix (m/rotation-2d-matrix angle-rad)\n        scale-matrix (m/scaling-2d-matrix scale)\n        projection-matrix (m/projection-2d-matrix (webgl/get-canvas-width gl) (webgl/get-canvas-height gl))\n        move-origin-matrix (m/translation-2d-matrix [-50 -75])] ;; move origin to center of the F\n    (-> (m/matrix-multiply-2d projection-matrix translation-matrix)\n        (m/matrix-multiply-2d rotation-matrix)\n        (m/matrix-multiply-2d scale-matrix)\n        (m/matrix-multiply-2d move-origin-matrix))))\n\n(defn format\n  [f & xs]\n  (apply cljs.pprint/cl-format nil f xs))\n\n(defn draw!\n  [timestamp]\n  (let [{:keys [rect] :as state} @state-atom]\n    (-> (assoc-in state [:objects-to-draw :my-f :uniforms :u_matrix :values] (multiply-matrices state))\n        webgl/draw-scene!)))\n\n(defn setup!\n  []\n  (-> (swap! state-atom (fn [{:keys [gl rect] :as state}]\n                          (let [program (webgl/link-shaders! gl {:fs fragment-shader :vs vertex-shader})]\n                            (assoc state :objects-to-draw\n                                         {:my-f {:program    program\n                                                 :attributes {:a_position (webgl/attribute gl program\n                                                                                           {:name   \"a_position\"\n                                                                                            :size   2\n                                                                                            :data   (js/Float32Array. shapes/f-shape-2d)\n                                                                                            :usage  (.-STATIC_DRAW gl)\n                                                                                            :target (.-ARRAY-BUFFER gl)})}\n                                                 :uniforms   {:u_resolution {:name   \"u_resolution\"\n                                                                             :type   \"uniform2f\"\n                                                                             :values [(aget gl \"canvas\" \"width\") (aget gl \"canvas\" \"height\")]}\n                                                              :u_color      {:name   \"u_color\"\n                                                                             :type   \"uniform4fv\"\n                                                                             :values (:color rect)}\n                                                              :u_matrix     {:name      \"u_matrix\"\n                                                                             :type      \"uniformMatrix3fv\"\n                                                                             :transpose false\n                                                                             :values    (multiply-matrices state)}}\n                                                 :element    {:draw-type (.-TRIANGLES gl)\n                                                              :offset    0\n                                                              :count     18}}}))))))\n\n(def ^:export lesson\n  {:title           (fn []\n                      [:div\n                       [:h1 {:style {:font-family \"monospace\"}}\n                        \"Lesson - WebGL 2D Matrices\"]\n                       [:h4 {:style {:font-family \"monospace\"}}\n                        \"Matrix in 2d\"]])\n   :source          (c/get-filename #'state-atom)\n   :tutorial-source \"webgl-2d-matrices.html\"\n   :start           (fn []\n                      (let [canvas-id \"translation\"]\n                        [:div {:style {:display        \"flex\"\n                                       :flex-direction \"row\"}}\n                         [webgl-canvas {:height   400\n                                        :width    400\n                                        :id       canvas-id\n                                        :on-mount (fn []\n                                                    (do\n                                                      (swap! state-atom assoc :gl (webgl/get-context canvas-id))\n                                                      (setup!)\n                                                      (js/requestAnimationFrame draw!)))}]\n                         [:div {:style {:margin-left \"30px\"}}\n                          [:div {:style {:display        \"flex\"\n                                         :flex-direction \"row\"}}\n                           [:span {:style {:color        \"white\"\n                                           :margin-right \"10px\"}} \"x\"]\n                           [slider {:on-change (fn [val]\n                                                 (swap! state-atom assoc-in [:rect :translation] [val (get-in @state-atom [:rect :translation 1])])\n                                                 (js/requestAnimationFrame draw!))\n                                    :value     (get-in @state-atom [:rect :translation 0])\n                                    :min       0\n                                    :max       400\n                                    :id        \"x-slider\"}]\n                           [:span {:style {:color        \"white\"\n                                           :margin-right \"10px\"}} (get-in @state-atom [:rect :x])]]\n                          [:div {:style {:display        \"flex\"\n                                         :flex-direction \"row\"}}\n                           [:span {:style {:color        \"white\"\n                                           :margin-right \"10px\"}} \"y\"]\n                           [slider {:on-change (fn [val]\n                                                 (swap! state-atom assoc-in [:rect :translation] [(get-in @state-atom [:rect :translation 0]) val])\n                                                 (js/requestAnimationFrame draw!))\n                                    :value     (get-in @state-atom [:rect :translation 1])\n                                    :min       0\n                                    :max       400\n                                    :id        \"y-slider\"}]\n                           [:span {:style {:color        \"white\"\n                                           :margin-right \"10px\"}} (get-in @state-atom [:rect :y])]]\n                          [:div {:style {:display        \"flex\"\n                                         :flex-direction \"row\"}}\n                           [:span {:style {:color        \"white\"\n                                           :white-space  \"nowrap\"\n                                           :margin-right \"10px\"}} \"scale-x\"]\n                           [slider {:on-change (fn [val]\n                                                 (swap! state-atom assoc-in [:rect :scale] [val (get-in @state-atom [:rect :scale 1])])\n                                                 (js/requestAnimationFrame draw!))\n                                    :value     (get-in @state-atom [:rect :scale 0])\n                                    :min       -5\n                                    :max       5\n                                    :step      0.01\n                                    :id        \"x-scale\"}]\n                           [:span {:style {:color        \"white\"\n                                           :margin-right \"10px\"}} (get-in @state-atom [:rect :scale 0])]]\n                          [:div {:style {:display        \"flex\"\n                                         :flex-direction \"row\"}}\n                           [:span {:style {:color        \"white\"\n                                           :white-space  \"nowrap\"\n                                           :margin-right \"10px\"}} \"scale-y\"]\n                           [slider {:on-change (fn [val]\n                                                 (swap! state-atom assoc-in [:rect :scale] [(get-in @state-atom [:rect :scale 0]) val])\n                                                 (js/requestAnimationFrame draw!))\n                                    :value     (get-in @state-atom [:rect :scale 1])\n                                    :min       -5\n                                    :max       5\n                                    :step      0.01\n                                    :id        \"y-scale\"}]\n                           [:span {:style {:color        \"white\"\n                                           :margin-right \"10px\"}} (->> (get-in @state-atom [:rect :scale 1])\n                                                                       (format \"~4f\"))]]\n                          [:div {:style {:display        \"flex\"\n                                         :flex-direction \"row\"}}\n                           [:span {:style {:color        \"white\"\n                                           :white-space  \"nowrap\"\n                                           :margin-right \"10px\"}} \"angle\"]\n                           [slider {:on-change (fn [val]\n                                                 (swap! state-atom assoc-in [:rect :angle-rad] (m/deg->rad val))\n                                                 (js/requestAnimationFrame draw!))\n                                    :value     (m/rad->deg (get-in @state-atom [:rect :angle-rad]))\n                                    :min       0\n                                    :max       365\n                                    :step      1\n                                    :id        \"rot\"}]\n                           [:span {:style {:color        \"white\"\n                                           :margin-right \"10px\"}} (->> (get-in @state-atom [:rect :angle-rad])\n                                                                       m/rad->deg\n                                                                       (format \"~1f\"))]]]]))})\n"]}