{"version":3,"sources":["clojure/core/matrix/impl/sequence.cljc"],"mappings":"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","names":["cljs.core/PROTOCOL_SENTINEL","cljs.core/ISeq","m","length","clojure.core.matrix.protocols/new-vector","rows","columns","clojure.core.matrix.protocols/new-matrix","dims","clojure.core.matrix.protocols/new-matrix-nd","data","clojure.core.matrix.protocols/coerce-param","x","x__25978__auto__","clojure.core.matrix.protocols/get-0d","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","y","row","clojure.core.matrix.protocols/get-1d","indexes","temp__5733__auto__","cljs.core/seq","next-indexes","cljs.core/next","mv","cljs.core/first","clojure.core.matrix.protocols/get-nd","v","clojure.core.matrix.protocols/set-1d","clojure.core.matrix.protocols/convert-to-nested-vectors","column","clojure.core.matrix.protocols/set-2d","clojure.core.matrix.protocols/set-nd","new-shape","clojure.core.matrix.protocols/broadcast","a","clojure.core.matrix.protocols/get-shape","i","cljs.core/vec","clojure.core.matrix.protocols/get-columns","dimension","ldimension","cljs.core/long","clojure.core.matrix.protocols/get-major-slice-seq","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","p1__26258#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","clojure.core.matrix.protocols/get-slice","cljs.core.range.cljs$core$IFn$_invoke$arity$1","clojure.core.matrix.protocols/dimension-count","clojure.core.matrix.protocols/dimensionality","js/console.log","cljs.core/cons","cljs.core/count","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","clojure.core.matrix.protocols/element-seq","f","p1__26264#","clojure.core.matrix.protocols.element_map.cljs$core$IFn$_invoke$arity$2","vec__26271","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","clojure.core.matrix.protocols/broadcast-compatible","p1__26265#","p2__26266#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$3","clojure.core.matrix.protocols.element_map.cljs$core$IFn$_invoke$arity$3","more","vec__26275","seq__26276","first__26277","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","p1__26267#","p2__26268#","p3__26269#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$4","clojure.core.matrix.protocols.element_map.cljs$core$IFn$_invoke$arity$4","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","init","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ms","p1__26279#","rest__26280#","clojure.core.matrix.protocols.element_map_indexed.cljs$core$IFn$_invoke$arity$2","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","as","vec__26285","p1__26281#","rest__26282#","clojure.core.matrix.protocols.element_map_indexed.cljs$core$IFn$_invoke$arity$3","vec__26288","seq__26289","first__26290","cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic","mr","p1__26283#","rest__26284#","clojure.core.matrix.protocols.element_map_indexed.cljs$core$IFn$_invoke$arity$4"],"sourcesContent":["(ns clojure.core.matrix.impl.sequence\n  \"Namepace implementing selected core.matrix protocols for clojure sequences.\n\n   Useful if you want to pass Clojure sequences directly to core.matrix functions.\n\n   WARNING: because they lack efficient indexed access, sequences will perform badly for most\n   array operations. In general they should be converted to other implementations before use.\"\n  (:require [clojure.core.matrix.protocols :as mp]\n            [clojure.core.matrix.implementations :as imp]\n    #?(:clj [clojure.core.matrix.macros :refer [scalar-coerce error]]))\n  #?(:clj (:import [clojure.lang ISeq])\n     :cljs (:require-macros [clojure.core.matrix.macros :refer [scalar-coerce error]])))\n\n;; core.matrix implementation for Clojure ISeq objects\n;;\n;; Important notes:\n;; 1. Intended mainly for accessing data. Not recommended for computations...\n;; 2. generally returns a persistent vector where possible\n\n#?(:clj (do\n  (set! *warn-on-reflection* true)\n  (set! *unchecked-math* true)\n))\n\n(extend-protocol mp/PImplementation\n  ISeq\n    (implementation-key [m] :sequence)\n    (meta-info [m]\n      {:doc \"Core.matrix implementation for Clojure ISeq objects\"})\n    (new-vector [m length]\n      (mp/new-vector [] length))\n    (new-matrix [m rows columns]\n      (mp/new-matrix [] rows columns))\n    (new-matrix-nd [m dims]\n      (mp/new-matrix-nd [] dims))\n    (construct-matrix [m data]\n      (mp/coerce-param [] data))\n    (supports-dimensionality? [m dims]\n      true))\n\n(extend-protocol mp/PIndexedAccess\n  ISeq\n    (get-1d [m x]\n      (scalar-coerce (nth m x)))\n    (get-2d [m x y]\n      (let [row (nth m x)]\n        (mp/get-1d row y)))\n    (get-nd [m indexes]\n      (if-let [indexes (seq indexes)]\n        (if-let [next-indexes (next indexes)]\n          (let [mv (nth m (first indexes))]\n            (mp/get-nd mv next-indexes))\n          (nth m (first indexes)))\n        m ;; TODO: figure out if this is a good return value? should it be an error?\n        )))\n\n(extend-protocol mp/PIndexedSetting\n  ISeq\n    (set-1d [m row v]\n      (mp/set-1d (mp/convert-to-nested-vectors m) row v))\n    (set-2d [m row column v]\n      (mp/set-2d (mp/convert-to-nested-vectors m) row column v))\n    (set-nd [m indexes v]\n      (mp/set-nd (mp/convert-to-nested-vectors m) indexes v))\n    (is-mutable? [m]\n      false))\n\n(extend-protocol mp/PBroadcast\n  ISeq\n    (broadcast [m new-shape]\n      (mp/broadcast (mp/convert-to-nested-vectors m) new-shape)))\n\n(extend-protocol mp/PBroadcastLike\n  ISeq\n    (broadcast-like [m a]\n      (mp/broadcast (mp/convert-to-nested-vectors a) (mp/get-shape m))))\n\n(extend-protocol mp/PSliceView\n  ISeq\n    (get-major-slice-view [m i]\n      (nth m i)))\n\n(extend-protocol mp/PSliceSeq\n  ISeq\n    (get-major-slice-seq [m] (vec m)))\n\n(extend-protocol mp/PMatrixRows\n  ISeq\n    (get-rows [m]\n      (vec m)))\n\n(extend-protocol mp/PMatrixColumns\n  ISeq\n    (get-columns [m]\n      (let [m (mp/coerce-param [] m)]\n        (mp/get-columns m))))\n\n(extend-protocol mp/PSliceSeq2\n  ISeq\n    (get-slice-seq [m dimension]\n      (let [ldimension (long dimension)]\n        (cond\n         (== ldimension 0) (mp/get-major-slice-seq m)\n         (< ldimension 0) (error \"Can't get slices of a negative dimension: \" dimension)\n         :else (mapv #(mp/get-slice m dimension %) (range (mp/dimension-count m dimension)))))))\n\n(extend-protocol mp/PConversion\n  ISeq\n    (convert-to-nested-vectors [m]\n      (if (> (mp/dimensionality (first m)) 0)\n        (mapv mp/convert-to-nested-vectors m)\n        (vec m))))\n\n(extend-protocol mp/PDimensionInfo\n  ISeq\n    (dimensionality [m]\n      (inc (mp/dimensionality (first m))))\n    (is-vector? [m]\n      (== 0 (mp/dimensionality (first m))))\n    (is-scalar? [m]\n      false)\n    (get-shape [m]\n      #?(:cljs (js/console.log (str \"shape of seq: \" m)))\n      (cons (count m) (mp/get-shape (first m))))\n    (dimension-count [m x]\n      (if (== x 0)\n        (count m)\n        (mp/dimension-count (first m) (dec x)))))\n\n(extend-protocol mp/PFunctionalOperations\n  ISeq\n    (element-seq [m]\n      (if (== 0 (long (mp/dimensionality (first m))))\n        m ;; handle 1D case, just return this sequence unchanged\n        (mapcat mp/element-seq m)))\n    (element-map\n      ([m f]\n        (mapv #(mp/element-map % f) m))\n      ([m f a]\n        (let [[m a] (mp/broadcast-compatible m a)]\n          (mapv #(mp/element-map % f %2) m (mp/get-major-slice-seq a))))\n      ([m f a more]\n        (let [[m a & more] (apply mp/broadcast-compatible m a more)] ; FIXME\n          (mapv #(mp/element-map % f %2 %3) m (mp/get-major-slice-seq a) (map mp/get-major-slice-seq more)))))\n    (element-map!\n      ([m f]\n        (error \"Sequence arrays are not mutable!\"))\n      ([m f a]\n        (error \"Sequence arrays are not mutable!\"))\n      ([m f a more]\n        (error \"Sequence arrays are not mutable!\")))\n    (element-reduce\n      ([m f]\n        (reduce f (mapcat mp/element-seq m)))\n      ([m f init]\n        (reduce f init (mapcat mp/element-seq m)))))\n\n(extend-protocol mp/PMapIndexed\n  ISeq\n    (element-map-indexed\n      ([ms f]\n        (mapv (fn [i m] (mp/element-map-indexed m #(apply f (cons i %1) %&)))\n              (range (count ms)) ms))\n      ([ms f as]\n        (let [[ms as] (mp/broadcast-compatible ms as)]\n          (mapv (fn [i m a]\n                  (mp/element-map-indexed m #(apply f (cons i %1) %&) a))\n                (range (count ms)) ms (mp/get-major-slice-seq as))))\n      ([ms f as more]\n        (let [[ms as & more] (apply mp/broadcast-compatible ms as more)] ; FIXME\n          (mapv (fn [i m a & mr]\n                  (mp/element-map-indexed m #(apply f (cons i %1) %&) a mr))\n                (range (count ms)) ms\n                (mp/get-major-slice-seq as)\n                (map mp/get-major-slice-seq more)))))\n    (element-map-indexed!\n      ([m f]\n        (error \"Sequence arrays are not mutable!\"))\n      ([m f a]\n        (error \"Sequence arrays are not mutable!\"))\n      ([m f a more]\n        (error \"Sequence arrays are not mutable!\"))))\n\n;; =====================================\n;; Register implementation\n\n;(imp/register-implementation '(1 2 3))\n"]}