{"version":3,"sources":["webgl_30/webgl.cljs"],"mappings":"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","names":["webgl-30.webgl/not-nil?","x","webgl-30.webgl/power-of-two?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","%","js/Error","webgl-30.webgl/get-aspect","gl","cljs.core/float?","w","h","a","js/isNaN","webgl-30.webgl/create-shader","type","source","shader","success","js/console.log","webgl-30.webgl/create-program","vertex-shader","fragment-shader","program","webgl-30.webgl/resize-canvas-to-display-size?","canvas","css-to-real-pixels","d-width","G__547075","Math/floor","d-height","G__547076","webgl-30.webgl/resize-canvas-to-display-size","G__547077","G__547078","webgl-30.webgl/get-canvas-height","webgl-30.webgl/get-canvas-width","var_args","G__547080","webgl-30.webgl/set-gl-viewport!","width","height","webgl_30.webgl.set_gl_viewport_BANG_.cljs$core$IFn$_invoke$arity$1","G__547082","webgl-30.webgl/clear-canvas!","webgl_30.webgl.clear_canvas_BANG_.cljs$core$IFn$_invoke$arity$3","clear-depth?","color","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","cljs.core/js-invoke","or__4185__auto__","webgl-30.webgl/bind-buffer","buffer","target","p__547083","map__547084","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","webgl-30.webgl/buffer-data","src-data","usage","p__547086","map__547087","webgl-30.webgl/create-buffer","data","p__547089","map__547090","webgl-30.webgl/set-attribute!","name","size","normalize","stride","offset","location","webgl-30.webgl/set-attributes!","attributes","seq__547092","cljs.core/seq","chunk__547093","count__547094","i__547095","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","attribute","webgl-30.webgl/get-uniform-location","p__547096","map__547097","webgl-30.webgl/set-uniform!","values","transpose","cljs.core/cons","clojure.string/ends-with?","cljs.core/vector?","cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic","cljs.core.apply.cljs$core$IFn$_invoke$arity$5","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","G__547100","webgl-30.webgl/set-uniforms!","state","objs","cljs.core/vals","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","seq__547101","chunk__547103","count__547104","i__547105","vec__547123","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__547131","obj","uniforms","fexpr__547126","fexpr__547134","cljs.core.juxt.cljs$core$IFn$_invoke$arity$2","seq__547127","chunk__547128","count__547129","i__547130","seq__547135","chunk__547136","count__547137","i__547138","uniform","seq__547139","chunk__547140","count__547141","i__547142","webgl-30.webgl/get-context","canvas-id","js/document.querySelector","p__547143","map__547144","webgl-30.webgl/draw-arrays!","draw-type","count","p__547146","map__547147","webgl-30.webgl/prepare-canvas!","clear-color","webgl_30.webgl.set_gl_viewport_BANG_.cljs$core$IFn$_invoke$arity$3","webgl-30.webgl/use-program!","webgl-30.webgl/enable-features!","features","seq__547149","chunk__547150","count__547151","i__547152","f","webgl-30.webgl/set-texture-param!","param","cljs.core/rest","webgl-30.webgl/bind-texture!","texture","webgl-30.webgl/set-texture-params!","params","seq__547153","chunk__547154","count__547155","i__547156","p","webgl-30.webgl/set-textures!","textures","seq__547157","chunk__547158","count__547159","i__547160","map__547165","map__547167","p__547169","map__547170","webgl-30.webgl/draw-scene!","objects-to-draw","viewport-width","viewport-height","seq__547172","chunk__547173","count__547174","i__547175","map__547180","map__547182","element","webgl_30.webgl.set_uniforms_BANG_.cljs$core$IFn$_invoke$arity$3","p__547184","map__547185","webgl-30.webgl/link-shaders!","vs","fs","p__547187","map__547188","webgl-30.webgl/get-attribute","attribute-name","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","p__547190","map__547191","p__547193","map__547194","webgl-30.webgl/get-rectangle","y","x1","x2","y1","y2","webgl-30.webgl/create-a-texture","webgl-30.webgl/img?","maybe-img","G__547197","webgl-30.webgl/create-texture!","texture-data","webgl_30.webgl.create_texture_BANG_.cljs$core$IFn$_invoke$arity$3","img","cljs.core/last","G__547199","webgl-30.webgl/create-texture-with-mipmap","webgl_30.webgl.create_texture_with_mipmap.cljs$core$IFn$_invoke$arity$3","G__547201","webgl-30.webgl/create-texture-from-img","img-name","on-load","webgl_30.webgl.create_texture_from_img.cljs$core$IFn$_invoke$arity$4","js/Image","G__547202","webgl-30.webgl/initialize-texture-from-img","webgl-30.webgl/create-framebuffer","webgl-30.webgl/bind-framebuffer!","framebuffer","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","webgl-30.webgl/attach-texture-to-framebuffer","seq547203","G__547204","G__547205","self__4776__auto__","webgl-30.webgl/gl-invoke","fn","args","webgl-30.webgl/vertex-attrib-pointer","seq547206","G__547207","webgl-30.webgl/enable-vertex-attrib-array","seq547208","G__547209","p__547210","map__547211","webgl-30.webgl/attribute","webgl_30.webgl.vertex_attrib_pointer.cljs$core$IFn$_invoke$arity$variadic","webgl_30.webgl.enable_vertex_attrib_array.cljs$core$IFn$_invoke$arity$variadic","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","webgl-30.webgl/framebuffer-complete?","webgl-30.webgl/pixels->object","seq547213","G__547214","G__547215","webgl-30.webgl/img-pow-2?","webgl-30.webgl/generate-mipmap!","p__547216","map__547217","webgl-30.webgl/set-tex-parameteri!","p-name","p__547219","map__547220","webgl-30.webgl/texture-pixels","pixels","params-i","border","level","internalformat","format","dont-allocate?","cljs.core/not","webgl_30.webgl.pixels__GT_object.cljs$core$IFn$_invoke$arity$variadic","seq__547222","chunk__547223","count__547224","i__547225","param-i","p__547226","map__547227","webgl-30.webgl/texture-img","mipmap?","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","seq__547229","chunk__547230","count__547231","i__547232","webgl-30.webgl/framebuffer-texture-2D","seq547233","G__547234","p__547235","map__547236","webgl-30.webgl/texture->framebuffer","attachment","textarget","webgl_30.webgl.framebuffer_texture_2D.cljs$core$IFn$_invoke$arity$variadic","p__547238","map__547239","webgl-30.webgl/framebuffer","fb","webgl-30.webgl/clear-color!","seq547241","G__547242","colors","webgl-30.webgl/clear!","seq547243","G__547244","bits","bit-colors","cljs.core/bit-or"],"sourcesContent":["(ns webgl-30.webgl)\n\n(defn not-nil?\n  [x]\n  (not (nil? x)))\n\n(defn power-of-two?\n  [x]\n  (and (= (bit-and x (- x)) x) (> x 0)))\n\n(defn get-aspect\n  [gl]\n  {:post [(float? %)]}\n  (let [w (aget gl \"canvas\" \"clientWidth\")\n        h (aget gl \"canvas\" \"clientHeight\")\n        a (/ w h)]\n    (if (js/isNaN a)\n      1\n      a)))\n\n(defn create-shader\n  [gl type source]\n  (let [shader (.createShader gl type)]\n    (.shaderSource gl shader source)\n    (.compileShader gl shader)\n    (let [success (.getShaderParameter gl shader (.-COMPILE_STATUS gl))]\n      (if success\n        shader\n        (do\n          (js/console.log (.getShaderInfoLog gl shader))\n          (.deleteShader gl shader))))))\n\n\n(defn create-program\n  [gl vertex-shader fragment-shader]\n  (let [program (.createProgram gl)]\n    (.attachShader gl program vertex-shader)\n    (.attachShader gl program fragment-shader)\n    (.linkProgram gl program)\n    (let [success (.getProgramParameter gl program (.-LINK_STATUS gl))]\n      (if success\n        program\n        (do\n          (js/console.log (.getProgramInfoLog gl program))\n          (.deleteProgram gl program))))))\n\n(defn resize-canvas-to-display-size?\n  [gl]\n  (let [canvas (.-canvas gl)\n        css-to-real-pixels 1\n        d-width (Math/floor (* (.-clientWidth canvas) css-to-real-pixels))\n        d-height (Math/floor (* (.-clientHeight canvas) css-to-real-pixels))]\n    (not (or (= (.-width canvas) d-width)\n             (= (.-height canvas) d-height)))))\n\n(defn resize-canvas-to-display-size\n  [gl]\n  (let [canvas (.-canvas gl)\n        css-to-real-pixels 1                                ;(or (.-devicePixelRatio js/window) 1)\n        d-width (Math/floor (* (.-clientWidth canvas) css-to-real-pixels))\n        d-height (Math/floor (* (.-clientHeight canvas) css-to-real-pixels))]\n    (when-not (or (= (.-width canvas) d-width)\n                  (= (.-height canvas) d-height))\n      (set! (.-height canvas) d-height)\n      (set! (.-width canvas) d-width))\n    gl))\n\n(defn get-canvas-height\n  [gl]\n  (aget gl \"canvas\" \"height\"))\n\n(defn get-canvas-width\n  [gl]\n  (aget gl \"canvas\" \"width\"))\n\n(defn set-gl-viewport!\n  ([gl]\n   (let [width (get-canvas-width gl)\n         height (get-canvas-height gl)]\n     (.viewport gl 0 0 width height)\n     gl))\n  ([gl width height]\n   (if (and (some? width) (some? height))\n     (do (.viewport gl 0 0 width height) gl)\n     (set-gl-viewport! gl))))\n\n(defn clear-canvas!\n  ([gl]\n   (clear-canvas! gl false [0 0 0 0]))\n  ([gl clear-depth?] (clear-canvas! gl clear-depth? [0 0 0 0]))\n  ([gl clear-depth? color]\n   (apply js-invoke gl \"clearColor\" (or color [0 0 0 0]))\n   (if clear-depth?\n     (.clear gl (bit-or (.-COLOR_BUFFER_BIT gl) (.-DEPTH_BUFFER_BIT gl)))\n     (.clear gl (.-COLOR_BUFFER_BIT gl)))\n   gl))\n\n(defn bind-buffer\n  [^js gl buffer target]\n  (.bindBuffer gl target buffer)\n  gl)\n\n(defn buffer-data\n  \"bufferData copies the `src-data` to the GPU.\"\n  [^js gl {:keys [target src-data usage]}]\n  {:pre  [(some? gl)]\n   :post [(= gl %)]}\n  (.bufferData gl target src-data usage)\n  gl)\n\n(defn create-buffer\n  [gl {:keys [target data usage]}]\n  (let [buffer (.createBuffer gl)]\n    (-> (bind-buffer gl buffer target)\n        (buffer-data {:target   target\n                      :src-data data\n                      :usage    usage}))\n    {:buffer buffer\n     :target target\n     :data   data\n     :usage  usage}))\n\n(defn set-attribute!\n  [gl program {:keys [name size type normalize stride offset buffer target]}]\n  (let [location (.getAttribLocation gl program name)]\n\n    (bind-buffer gl buffer target)\n\n    ;; Describe how to take the data from our buffer and give it to our shader.\n    (.vertexAttribPointer gl location size type normalize stride offset)\n\n    ;; Turn the variable on inside our GLSL VS program above.\n    (.enableVertexAttribArray gl location)\n    gl))\n\n(defn set-attributes!\n  [gl program attributes]\n  (doseq [attribute attributes]\n    (set-attribute! gl program attribute))\n  gl)\n\n(defn get-uniform-location\n  [gl program name]\n  (.getUniformLocation gl program name))\n\n(defn set-uniform!\n  [^js gl program {:keys [type values transpose name]}]\n  (let [location (get-uniform-location gl program name)\n        values (if (some? transpose) (cons transpose [values]) values)]\n    (if (clojure.string/ends-with? type \"v\")\n      (if (vector? values)\n        (js-invoke gl type location values)\n        (apply js-invoke gl type location values))\n      (.apply (aget gl type) gl (into-array (cons location values))))\n    gl))\n\n(defn set-uniforms!\n  ([gl state]\n   (let [objs (vals (get-in state [:objects-to-draw]))]\n     (doseq [obj objs\n             :let [[uniforms program] ((juxt :uniforms :program) obj)]]\n       (doseq [uniform (vals uniforms)]\n         (set-uniform! gl program uniform))))\n   gl)\n  ([gl program uniforms]\n   {:pre  [(some? gl) (some? program)]\n    :post [(= gl %)]}\n   (doseq [uniform uniforms]\n     (set-uniform! gl program uniform))\n   gl))\n\n(defn get-context\n  [canvas-id]\n  (->\n    (str \"#\" canvas-id)\n    js/document.querySelector\n    (.getContext \"webgl\")))\n\n;; funny error\n;; :GL_INVALID_OPERATION : glDrawArrays: attempt to access out of range vertices in attribute 0\n;; wrong size on the attribute.... 3 instead of 2....\n;; another one\n;;  INVALID_VALUE: enableVertexAttribArray: index out of range\n;;  INVALID_VALUE: vertexAttribPointer: index out of range\n;;    SOL => wrong name on attribute :)\n\n(defn draw-arrays!\n  [gl {:keys [draw-type offset count]}]\n  (.drawArrays gl draw-type offset count)\n  gl)\n\n(defn prepare-canvas!\n  [gl {:keys [clear-depth? clear-color width height]}]\n  (-> (resize-canvas-to-display-size gl)\n      (set-gl-viewport! width height)\n      (clear-canvas! clear-depth? clear-color))\n  gl)\n\n(defn use-program!\n  [gl program]\n  (.useProgram gl program)\n  gl)\n\n(defn enable-features!\n  [gl features]\n  (doseq [f (or features [])]\n    (.enable gl f))\n  gl)\n\n(defn set-texture-param!\n  [gl param]\n  (let [f (first param)]\n    (apply js-invoke gl f (rest param)))\n  gl)\n\n(defn bind-texture!\n  [gl type texture]\n  (.bindTexture gl type texture)\n  gl)\n\n(defn set-texture-params!\n  [gl texture type params]\n\n  (bind-texture! gl type texture)\n\n  (doseq [p params]\n    (set-texture-param! gl p))\n  gl)\n\n(defn set-textures!\n  [gl textures]\n  (doseq [{:keys [params type texture]} textures]\n    (set-texture-params! gl texture type (vals params)))\n  gl)\n\n(defn draw-scene!\n  [{:keys [gl objects-to-draw clear-depth? clear-color viewport-width viewport-height]}]\n\n  (prepare-canvas! gl {:clear-depth? clear-depth?\n                       :clear-color  clear-color\n                       :width        viewport-width\n                       :height       viewport-height})\n\n  (doseq [{:keys [program attributes uniforms element features textures]} (vals objects-to-draw)]\n    (-> (use-program! gl program)\n        (enable-features! features)\n        (set-uniforms! program (vals uniforms))\n        ;(set-textures! (vals textures))\n        ;(set-attributes! program (vals attributes))\n        (draw-arrays! element)))\n  gl)\n\n(defn link-shaders!\n  \"Create a WebGL Program with a Vertex shader and a Fragment shader.\"\n  [gl {:keys [vs fs]}]\n  (let [vs (create-shader gl (.-VERTEX_SHADER gl) vs)\n        fs (create-shader gl (.-FRAGMENT_SHADER gl) fs)\n        program (create-program gl vs fs)]\n    program))\n\n(defn get-attribute\n  [{:keys [attributes]} attribute-name]\n  (-> (filter (fn [{:keys [name]}] (= name attribute-name)) attributes)\n      first))\n\n(defn get-rectangle\n  [{:keys [x y width height]}]\n  (let [x1 x\n        x2 (+ x width)\n        y1 y\n        y2 (+ y height)]\n    [x1 y1\n     x2 y1\n     x1 y2\n     x1 y2\n     x2 y1\n     x2 y2]))\n\n(defn create-a-texture\n  [gl]\n  (.createTexture gl))\n\n(defn img?\n  [maybe-img]\n  (= (aget maybe-img \"nodeName\") \"IMG\"))\n\n(defn create-texture!\n  ([gl texture-data] (create-texture! gl nil texture-data))\n  ([gl texture texture-data]\n   (let [texture (if (some? texture) texture (create-a-texture gl))]\n\n     (bind-texture! gl (first texture-data) texture)\n     ;; hmm can this be the error?\n     ;; https://stackoverflow.com/questions/63127867/html-2d-canvas-as-texture-on-webgl-canvas\n     ;; from gman\n     (apply js-invoke gl \"texImage2D\" texture-data)\n\n     (when-let [img (-> texture-data last img?)]\n       (if (and (power-of-two? (aget (last texture-data) \"height\")) (power-of-two? (aget (last texture-data) \"width\")))\n         (.generateMipmap gl (.-TEXTURE_2D gl))\n         (do\n           (.texParameteri gl (.-TEXTURE_2D gl) (.-TEXTURE_WRAP_S gl) (.-CLAMP_TO_EDGE gl))\n           (.texParameteri gl (.-TEXTURE_2D gl) (.-TEXTURE_WRAP_T gl) (.-CLAMP_TO_EDGE gl))\n           (.texParameteri gl (.-TEXTURE_2D gl) (.-TEXTURE_MIN_FILTER gl) (.-LINEAR gl)))))\n     texture)))\n\n(defn create-texture-with-mipmap\n  ([gl texture-data] (create-texture-with-mipmap gl nil texture-data))\n  ([gl texture texture-data]\n   (let [texture (create-texture! gl texture texture-data)]\n     (.generateMipmap gl (first texture-data))\n     texture)))\n\n\n;; TOOD is there some async function naming convention in clojure??\n(defn create-texture-from-img\n  ([gl img-name on-load] (create-texture-from-img gl img-name on-load nil))\n  ([gl img-name on-load texture]\n   (let [img (js/Image.)]\n     (aset img \"src\" img-name)\n     (.addEventListener img\n                        \"load\"\n                        (fn []\n                          (let [texture (if (some? texture) texture (create-a-texture gl))]\n                            (-> (create-texture! gl\n                                                 texture\n                                                 [(.-TEXTURE_2D gl)\n                                                  0\n                                                  (.-RGBA gl)\n                                                  (.-RGBA gl)\n                                                  (.-UNSIGNED_BYTE gl)\n                                                  img])\n                                on-load))))\n     texture)))\n\n(defn initialize-texture-from-img\n  [img-name on-load]\n  (let [img (js/Image.)]\n    (aset img \"src\" img-name)\n    (.addEventListener img \"load\" (fn [] (on-load img)))))\n\n(defn create-framebuffer\n  [gl]\n  (.createFramebuffer gl))\n\n(defn bind-framebuffer!\n  [gl framebuffer]\n  (.bindFramebuffer gl (.-FRAMEBUFFER gl) framebuffer)\n  gl)\n\n(defn attach-texture-to-framebuffer\n  [gl framebuffer & texture-data]\n  (bind-framebuffer! gl framebuffer)\n  (apply js-invoke gl \"framebufferTexture2D\" texture-data)\n  gl)\n\n(defn- gl-invoke\n  [gl fn args]\n  (apply js-invoke gl fn args)\n  gl)\n\n(defn vertex-attrib-pointer\n  [gl & args]\n  (gl-invoke gl \"vertexAttribPointer\" args))\n\n(defn enable-vertex-attrib-array\n  [gl & args]\n  (gl-invoke gl \"enableVertexAttribArray\" args))\n\n(defn attribute\n  [gl program {:keys [name size type normalize stride offset data usage target] :as attribute}]\n  (let [buffer (.createBuffer gl)\n        location (.getAttribLocation gl program name)]\n    (-> (bind-buffer gl buffer (or target (.-ARRAY-BUFFER gl)))\n        (buffer-data {:target   (or target (.-ARRAY-BUFFER gl))\n                      :src-data data\n                      :usage    (or usage (.-STATIC_DRAW gl))})\n        (vertex-attrib-pointer location size (or type (.-FLOAT gl)) (or normalize false) (or stride 0) (or offset 0))\n        (enable-vertex-attrib-array location))\n\n    (-> (assoc attribute :buffer buffer)\n        (assoc :location location)\n        (assoc :target (or target (.-ARRAY-BUFFER gl)))\n        (assoc :usage (or usage (.-STATIC_DRAW gl)))\n        (assoc :type (or type (.-FLOAT gl)))\n        (assoc :normalize (or normalize false))\n        (assoc :stride (or stride 0))\n        (assoc :offset (or offset 0)))))\n\n(defn framebuffer-complete?\n  [gl]\n  (= (.checkFramebufferStatus gl (.-FRAMEBUFFER gl)) (.-FRAMEBUFFER_COMPLETE gl)))\n\n(defn pixels->object\n  \"assign an pixels to a texture object\"\n  [gl texture & texture-data]\n  (-> (bind-texture! gl (.-TEXTURE_2D gl) texture)\n      (gl-invoke \"texImage2D\" texture-data))\n  gl)\n\n(defn img-pow-2?\n  [img]\n  (let [w (aget img \"width\")\n        h (aget img \"height\")]\n    (and (power-of-two? w) (power-of-two? h))))\n\n(defn generate-mipmap!\n  [gl]\n  (.generateMipmap gl (.-TEXTURE_2D gl))\n  gl)\n\n(defn set-tex-parameteri!\n  [gl {:keys [target p-name param]}]\n  (.texParameteri gl (or target (.-TEXTURE_2D gl)) p-name param)\n  gl)\n\n(defn texture-pixels\n  [gl {:keys [pixels params-i target width height border level internalformat format type dont-allocate?] :as data}]\n  (let [texture (create-a-texture gl)\n        target (or target (.-TEXTURE_2D gl))\n        level (or level 0)\n        internalformat (or internalformat (.-RGBA gl))\n        format (or format (.-RGBA gl))\n        type (or type (.-UNSIGNED_BYTE gl))\n        dont-allocate? (or dont-allocate? false)]\n\n    (if-not dont-allocate?\n      (pixels->object gl texture target level internalformat width height border format type pixels) ;; assign the img to a texture obj\n      (bind-texture! gl (.-TEXTURE_2D gl) texture))\n\n    (doseq [param-i (vals params-i)]\n      (set-tex-parameteri! gl param-i))\n\n    (-> (assoc data :target target)\n        (assoc :texture-obj texture)\n        (assoc :level level)\n        (assoc :internalformat internalformat)\n        (assoc :format format)\n        (assoc :type type))))\n\n(defn texture-img\n  \"we need to:\n    pre to this, create buffer and call bufferData on them for both texture data and object data\n\n    1) init texture -----> load the img, and when onload is done, goto next step\n    2) gl.createTexture\n       gl.getUniformLocation(gl.program, 'u_sampler')\n       activate and bind texture, set text params, call uniformi0, then we can draw.\n    \"\n  [gl {:keys [pixels params-i mipmap? target level internalformat format type] :as data}]\n  (let [texture (create-a-texture gl)\n        target (or target (.-TEXTURE_2D gl))\n        level (or level 0)\n        internalformat (or internalformat (.-RGBA gl))\n        format (or format (.-RGBA gl))\n        type (or type (.-UNSIGNED_BYTE gl))]\n\n    ;; assign the img to a texture obj\n    (pixels->object gl texture target level internalformat format type pixels)\n\n    (when mipmap?\n      (if (img-pow-2? pixels)\n        (generate-mipmap! gl)\n        (println \"Img not power of two...\")))\n\n    (doseq [param-i (vals params-i)]\n      (set-tex-parameteri! gl param-i))\n\n    (-> (assoc data :target target)\n        (assoc :texture-obj texture)\n        (assoc :level level)\n        (assoc :internalformat internalformat)\n        (assoc :format format)\n        (assoc :type type))))\n\n(defn framebuffer-texture-2D\n  [gl & args]\n  (gl-invoke gl \"framebufferTexture2D\" args))\n\n(defn texture->framebuffer\n  \"Attach a texture object specified by texture to the framebuffer object bound by target.\"\n  [gl {:keys [framebuffer attachment textarget texture level]}]\n  (let [attachment (or attachment (.-COLOR_ATTACHMENT0 gl))\n        textarget (or textarget (.-TEXTURE_2D gl))\n        level (or level 0)]\n    (-> (bind-framebuffer! gl framebuffer)\n        (framebuffer-texture-2D (.-FRAMEBUFFER gl) attachment textarget texture level))\n    gl))\n\n(defn framebuffer\n  [gl {:keys [texture]}]\n  (let [fb (.createFramebuffer gl)]\n    (texture->framebuffer gl {:framebuffer fb\n                              :texture     texture})\n    fb))\n\n(defn clear-color!\n  [gl & colors]\n  (gl-invoke gl \"clearColor\" colors))\n\n(defn clear!\n  [gl & bits]\n  (let [bit-colors (apply bit-or bits)]\n    (.clear gl bit-colors))\n  gl)\n\n\n\n\n"]}