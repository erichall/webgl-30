{"version":3,"sources":["webgl_30/lessons/textures_0.cljs"],"mappings":"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","names":["webgl-30.lessons.textures-0/initial-state","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","webgl-30.math/deg->rad","js/webgl-30","js/webgl-30.lessons","js/webgl-30.lessons.textures-0","js/webgl-30.lessons.textures-0.state-atom","webgl-30.lessons.textures-0/state-atom","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/deref","cljs.core/reset!","webgl-30.lessons.textures-0/fragment-shader","webgl-30.lessons.textures-0/vertex-shader","p__26311","map__26312","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","webgl-30.lessons.textures-0/multiply-matrices","rect","gl","map__26319","translation","scale","rotation","projection-matrix","webgl-30.math/projection-3d-matrix","webgl-30.webgl/get-canvas-width","webgl-30.webgl/get-canvas-height","orthographic-matrix","webgl-30.math/orthographic-matrix","translation-matrix","webgl-30.math/translation-3d-matrix","rotation-matrix-x","webgl-30.math/rotation-3d-x-matrix","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","rotation-matrix-y","webgl-30.math/rotation-3d-y-matrix","rotation-matrix-z","webgl-30.math/rotation-3d-z-matrix","scale-matrix","webgl-30.math/scaling-3d-matrix","webgl-30.math/matrix-multiply-3d","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","webgl-30.lessons.textures-0/format","seq26331","G__26332","cljs.core/first","cljs.core/next","self__4776__auto__","f","xs","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","cljs.pprint/cl-format","webgl-30.lessons.textures-0/draw!","timestamp","state","map__26338","s","now","delta-time","cljs.core/assoc-in","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","webgl-30.webgl/draw-scene!","js/requestAnimationFrame","t","G__26340","G__26341","webgl-30.lessons.textures-0/raf-draw!","webgl-30.lessons.textures-0/setup!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","p__26347","map__26348","program","webgl-30.webgl/link-shaders!","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","webgl_30.webgl.create_texture_BANG_.cljs$core$IFn$_invoke$arity$2","js/Uint8Array","webgl_30.webgl.create_texture_from_img.cljs$core$IFn$_invoke$arity$4","texture","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","webgl-30.webgl/attribute","js/Float32Array","webgl-30.shapes/f-shape-3d","webgl-30.shapes/f-texture-coordinates","webgl-30.lessons.textures-0/lesson","webgl-30.core/get-filename","map__26369","canvas-id","webgl-30.component/webgl-canvas","cljs.core/assoc","webgl-30.webgl/get-context"],"sourcesContent":["(ns webgl-30.lessons.textures-0\n  (:require [reagent.core :as r]\n            [shadow.resource :as rc]\n            [webgl-30.math :as m]\n            [webgl-30.webgl :as webgl]\n            [webgl-30.shapes :as shapes]\n            [webgl-30.core :as c]\n            [webgl-30.component :refer [webgl-canvas slider]]))\n\n(def initial-state {:gl   nil\n                    :rect {:translation    [200 170 100]\n                           :rotation       (mapv m/deg->rad [190 40 320])\n                           :scale          [1 1 1]\n                           :rotation-speed 1.2\n                           :then           0\n                           :width          100\n                           :height         30\n                           :color          [0.3 0.3 0.3 1]}})\n(defonce state-atom (r/atom nil))\n(when (nil? @state-atom)\n  (reset! state-atom initial-state))\n\n(def fragment-shader\n  \"precision mediump float;\n\n   varying vec2 v_texcoord;\n\n   // The texture\n   uniform sampler2D u_texture;\n\n   void main() {\n       gl_FragColor = texture2D(u_texture, v_texcoord);\n   }\")\n\n(def vertex-shader\n  \"attribute vec4 a_position;\n   attribute vec2 a_texcoord;\n\n  uniform mat4 u_matrix;\n\n  varying vec2 v_texcoord;\n\n  void main() {\n    gl_Position = u_matrix * a_position;\n\n    // this can be passed to the fragment shader\n    v_texcoord = a_texcoord;\n  }\")\n\n(defn multiply-matrices\n  [{:keys [rect gl]}]\n  (let [{:keys [translation scale rotation]} rect\n        projection-matrix (m/projection-3d-matrix (webgl/get-canvas-width gl) (webgl/get-canvas-height gl) 400)\n        orthographic-matrix (m/orthographic-matrix 0 (webgl/get-canvas-width gl) (webgl/get-canvas-height gl) 0 400 -400)\n        translation-matrix (m/translation-3d-matrix translation)\n        rotation-matrix-x (m/rotation-3d-x-matrix (nth rotation 0))\n        rotation-matrix-y (m/rotation-3d-y-matrix (nth rotation 1))\n        rotation-matrix-z (m/rotation-3d-z-matrix (nth rotation 2))\n        scale-matrix (m/scaling-3d-matrix scale)]\n    (-> (m/matrix-multiply-3d orthographic-matrix translation-matrix)\n        (m/matrix-multiply-3d rotation-matrix-x)\n        (m/matrix-multiply-3d rotation-matrix-y)\n        (m/matrix-multiply-3d rotation-matrix-z)\n        (m/matrix-multiply-3d scale-matrix))))\n\n(defn format\n  [f & xs]\n  (apply cljs.pprint/cl-format nil f xs))\n\n(defn draw!\n  [timestamp state]\n  (let [{:keys [rect] :as s} state\n        now (* timestamp 0.001)\n        delta-time (- now (:then rect))\n        state (assoc-in s [:rect :rotation 1] (+ (get-in rect [:rotation 1]) (* (:rotation-speed rect) delta-time)))]\n    (-> (assoc-in state [:objects-to-draw :my-f :uniforms :u_matrix :values] (multiply-matrices state))\n        webgl/draw-scene!)\n    (js/requestAnimationFrame (fn [t] (draw! t (assoc-in state [:rect :then] now))))))\n\n(defn raf-draw!\n  [state]\n  (js/requestAnimationFrame (fn [t] (draw! t state))))\n\n(defn setup!\n  []\n  (-> (swap! state-atom (fn [{:keys [gl ] :as state}]\n                          (let [program (webgl/link-shaders! gl {:fs fragment-shader :vs vertex-shader})]\n                            (-> (assoc state :clear-depth? true)\n                                (assoc :objects-to-draw\n                                       {:my-f {:program    program\n                                               :features   [(.-CULL_FACE gl) (.-DEPTH_TEST gl)]\n                                               :textures   {:f-texture {:texture (->> (webgl/create-texture! gl [(.-TEXTURE_2D gl) 0 (.-RGBA gl) 1 1 0 (.-RGBA gl) (.-UNSIGNED_BYTE gl) (js/Uint8Array. [0 0 255 255])])\n                                                                                      (webgl/create-texture-from-img gl \"images/f-texture.png\" (fn [texture]\n                                                                                                                                                 (-> (swap! state-atom assoc-in [:objects-to-draw :my-f :textures :f-texture :texture] texture)\n                                                                                                                                                     raf-draw!))))\n                                                                        :type    (.-TEXTURE_2D gl)}}\n                                               :attributes {:a_position (webgl/attribute gl program {:name \"a_position\"\n                                                                                                     :size 3\n                                                                                                     :data (js/Float32Array. shapes/f-shape-3d)})\n                                                            :a_texcoord (webgl/attribute gl program {:name \"a_texcoord\"\n                                                                                                     :size 2\n                                                                                                     :data (js/Float32Array. shapes/f-texture-coordinates)\n                                                                                                     })}\n                                               :uniforms   {:u_matrix  {:name      \"u_matrix\"\n                                                                        :type      \"uniformMatrix4fv\"\n                                                                        :transpose false\n                                                                        :values    (multiply-matrices state)}\n                                                            :u_texture {:name   \"u_texture\"\n                                                                        :type   \"uniform1i\"\n                                                                        :values [0]}}\n                                               :element    {:draw-type (.-TRIANGLES gl)\n                                                            :offset    0\n                                                            :count     (* 16 6)}}})))))))\n(def ^:export lesson\n  {:title           (fn []\n                      [:div\n                       [:h1 {:style {:font-family \"monospace\"}}\n                        \"Lesson - WebGL Textures\"]\n                       [:h4 {:style {:font-family \"monospace\"}}\n                        \"Texture\"]])\n   :source          (c/get-filename #'state-atom)\n   :tutorial-source \"webgl-3d-textures.html\"\n   :start           (fn []\n                      (let [canvas-id \"texture-0\"\n                            state @state-atom\n                            {:keys [translation scale rotation]} (:rect state)]\n                        [:div {:style {:display        \"flex\"\n                                       :flex-direction \"row\"}}\n                         [webgl-canvas {:height   400\n                                        :width    400\n                                        :id       canvas-id\n                                        :on-mount (fn []\n                                                    (do\n                                                      (swap! state-atom assoc :gl (webgl/get-context canvas-id))\n                                                      (setup!)\n                                                      (js/requestAnimationFrame (fn [t] (draw! t @state-atom)))))}]]))})\n"]}