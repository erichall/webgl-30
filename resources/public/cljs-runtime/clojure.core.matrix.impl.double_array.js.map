{"version":3,"sources":["clojure/core/matrix/impl/double_array.cljs"],"mappings":"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","names":["clojure.core.matrix.impl.double-array/new-double-array","shape","dims","cljs.core/count","cljs.core.double_array.cljs$core$IFn$_invoke$arity$1","cljs.core/first","ns","cljs.core/next","rn","cljs.core/long","r0","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","cljs.core/cons","iter__4582__auto__","s__33945","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","b__33947","cljs.core/chunk-buffer","i__33946","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__33944","cljs.core/chunk-rest","cljs.core/rest","i","cljs.core.range.cljs$core$IFn$_invoke$arity$1","clojure.core.matrix.impl.double-array/construct-double-array","data","clojure.core.matrix.protocols/dimensionality","n","clojure.core.matrix.protocols/dimension-count","r","n__4666__auto__","clojure.core.matrix.protocols/get-1d","clojure.core.matrix.protocols/get-0d","goog.object/set","clojure.core.matrix.protocols/PImmutableAssignment","G__33948","clojure.core.matrix.protocols/assign","G__33949","G__33950","m","source","clojure.core.matrix.protocols/PAssignment","G__33951","clojure.core.matrix.protocols/assign!","G__33952","G__33953","G__33954","clojure.core.matrix.protocols/assign-array!","G__33955","G__33956","clojure.core.matrix.protocols/set-1d!","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","arr","start","length","clojure.core.matrix.protocols/PImplementation","G__33957","clojure.core.matrix.protocols/implementation-key","G__33958","G__33959","G__33960","clojure.core.matrix.protocols/meta-info","G__33961","G__33962","G__33963","clojure.core.matrix.protocols/new-vector","G__33964","G__33965","G__33966","clojure.core.matrix.protocols/new-matrix","G__33967","G__33968","G__33969","clojure.core.matrix.protocols/new-matrix-nd","G__33970","G__33971","G__33972","clojure.core.matrix.protocols/construct-matrix","G__33973","G__33974","G__33975","clojure.core.matrix.protocols/supports-dimensionality?","G__33976","G__33977","rows","columns","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","clojure.core.matrix.protocols/PDimensionInfo","G__33978","G__33979","G__33980","G__33983","clojure.core.matrix.protocols/is-vector?","G__33984","G__33985","G__33986","clojure.core.matrix.protocols/is-scalar?","G__33987","G__33988","G__33991","clojure.core.matrix.protocols/get-shape","G__33992","G__33993","G__33996","G__33997","G__33998","cljs.core/List","x","clojure.core.matrix.protocols/PReshaping","G__34004","clojure.core.matrix.protocols/reshape","G__34005","G__34006","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","gv","clojure.core.matrix.protocols/generic-value","es","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","clojure.core.matrix.protocols/element-seq","cljs.core.repeat.cljs$core$IFn$_invoke$arity$1","partition-shape","temp__5733__auto__","s","plen","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/*","p1__34001#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","fs","parts","or__4185__auto__","cljs.core.take.cljs$core$IFn$_invoke$arity$2","clojure.core.matrix.protocols/PTypeInfo","G__34011","clojure.core.matrix.protocols/element-type","G__34012","G__34013","js/Number","clojure.core.matrix.protocols/PIndexedAccess","G__34016","G__34017","G__34018","G__34023","clojure.core.matrix.protocols/get-2d","G__34024","G__34025","G__34027","clojure.core.matrix.protocols/get-nd","G__34028","G__34029","row","column","indexes","clojure.core.matrix.protocols/PIndexedSetting","G__34034","clojure.core.matrix.protocols/set-1d","G__34035","G__34036","G__34039","clojure.core.matrix.protocols/set-2d","G__34040","G__34041","G__34043","clojure.core.matrix.protocols/set-nd","G__34044","G__34045","G__34049","clojure.core.matrix.protocols/is-mutable?","G__34050","G__34051","v","y","clojure.core.matrix.protocols/PIndexedSettingMutable","G__34052","G__34053","G__34054","G__34055","clojure.core.matrix.protocols/set-2d!","G__34056","G__34057","G__34058","clojure.core.matrix.protocols/set-nd!","G__34059","G__34060","clojure.core.matrix.protocols/PMutableMatrixConstruction","G__34061","clojure.core.matrix.protocols/mutable-matrix","G__34062","G__34063","clojure.core.matrix.protocols/PMatrixScaling","G__34064","clojure.core.matrix.protocols/scale","G__34065","G__34066","G__34067","clojure.core.matrix.protocols/pre-scale","G__34068","G__34069","a","len","clojure.core.matrix.protocols/PMatrixMutableScaling","G__34070","clojure.core.matrix.protocols/scale!","G__34071","G__34072","G__34073","clojure.core.matrix.protocols/pre-scale!","G__34074","G__34075","clojure.core.matrix.protocols/PConversion","G__34076","clojure.core.matrix.protocols/convert-to-nested-vectors","G__34077","G__34078","cljs.core/vec","clojure.core.matrix.protocols/PFunctionalOperations","G__34080","G__34081","G__34082","G__34083","clojure.core.matrix.protocols/element-map","G__34084","G__34085","G__34100","clojure.core.matrix.protocols/element-map!","G__34101","G__34102","G__34103","clojure.core.matrix.protocols/element-reduce","G__34104","G__34105","f","cnt","G__34086","clojure.core.matrix.protocols/broadcast-coerce","G__34092","G__34093","more","p1__34079#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","more-count","vs","j","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","clojure.core.matrix.protocols.element_map.cljs$core$IFn$_invoke$arity$2","clojure.core.matrix.protocols.element_map.cljs$core$IFn$_invoke$arity$3","clojure.core.matrix.protocols.element_map.cljs$core$IFn$_invoke$arity$4","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","init","clojure.core.matrix.protocols/PIndexImplementation","G__34106","clojure.core.matrix.protocols/index?","G__34107","G__34108","G__34109","clojure.core.matrix.protocols/index-to-longs","G__34110","G__34111","G__34112","clojure.core.matrix.protocols/index-to-ints","G__34113","G__34114","G__34115","clojure.core.matrix.protocols/index-from-longs","G__34116","G__34117","G__34118","clojure.core.matrix.protocols/index-from-ints","G__34119","G__34120","G__34121","clojure.core.matrix.protocols/index-coerce","G__34122","G__34123","xs","cljs.core.long_array.cljs$core$IFn$_invoke$arity$1","cljs.core.int_array.cljs$core$IFn$_invoke$arity$1","clojure.core.matrix.protocols/PBroadcast","G__34124","clojure.core.matrix.protocols/broadcast","G__34125","G__34126","new-shape","nshape","mshape","mdims","ndims","clojure.core.matrix.utils/same-shape-object?","clojure.core.matrix.impl.wrappers/wrap-broadcast","clojure.core.matrix.protocols/PNumerical","G__34127","clojure.core.matrix.protocols/numerical?","G__34128","G__34129","clojure.core.matrix.protocols/PSubVector","G__34130","clojure.core.matrix.protocols/subvector","G__34131","G__34132","clojure.core.matrix.impl.wrappers/wrap-nd","clojure.core.matrix.protocols/PMatrixEquality","G__34133","clojure.core.matrix.protocols/matrix-equals","G__34134","G__34135","b","clojure.core.matrix.protocols/same-shape?","x__25978__auto__","cljs.core/not-any?","cljs.core/false?","cljs.core.map.cljs$core$IFn$_invoke$arity$3","cljs.core/==","clojure.core.matrix.protocols/PSameShape","G__34136","G__34137","G__34138","clojure.core.matrix.protocols/PSelect","G__34139","clojure.core.matrix.protocols/select","G__34140","G__34141","area","clojure.core.matrix.protocols/select-view","clojure.core.matrix.impl.wrappers/wrap-selection","clojure.core.matrix.protocols/PLogistic","G__34142","clojure.core.matrix.protocols/logistic","G__34143","G__34144","clojure.core.matrix.impl.common/logistic-fn","clojure.core.matrix.protocols/PLogisticMutable","G__34145","clojure.core.matrix.protocols/logistic!","G__34146","G__34147","clojure.core.matrix.protocols.element_map_BANG_.cljs$core$IFn$_invoke$arity$2","clojure.core.matrix.protocols/PSoftplus","G__34148","clojure.core.matrix.protocols/softplus","G__34149","G__34150","clojure.core.matrix.impl.common/softplus-fn","clojure.core.matrix.protocols/PSoftmax","G__34151","clojure.core.matrix.protocols/softmax","G__34152","G__34153","em","clojure.core.matrix.protocols/exp","clojure.core.matrix.protocols.element_divide.cljs$core$IFn$_invoke$arity$2","clojure.core.matrix.protocols/element-sum","clojure.core.matrix.protocols/PSoftmaxMutable","G__34154","clojure.core.matrix.protocols/softmax!","G__34155","G__34156","clojure.core.matrix.protocols/exp!","clojure.core.matrix.protocols.element_divide_BANG_.cljs$core$IFn$_invoke$arity$2","clojure.core.matrix.protocols/PSoftplusMutable","G__34157","clojure.core.matrix.protocols/softplus!","G__34158","G__34159","clojure.core.matrix.protocols/PReLU","G__34160","clojure.core.matrix.protocols/relu","G__34161","G__34162","clojure.core.matrix.impl.common/relu-fn","clojure.core.matrix.protocols/PReLUMutable","G__34163","clojure.core.matrix.protocols/relu!","G__34164","G__34165","clojure.core.matrix.protocols/PMatrixPredicates","G__34167","clojure.core.matrix.protocols/identity-matrix?","G__34168","G__34169","G__34170","clojure.core.matrix.protocols/zero-matrix?","G__34171","G__34172","G__34173","clojure.core.matrix.protocols/symmetric?","G__34174","G__34175","G__34177","G__34178","G__34179","G__34180","G__34181","G__34182","G__34183","G__34184","G__34185","rc","cc","elem","p1__34166#","cljs.core/every?","G__34176","clojure.core.matrix.impl.common/square?","clojure.core.matrix.impl.common/symmetric-matrix-entries?","clojure.core.matrix.protocols/transpose","clojure.core.matrix.protocols/PSummable","G__34186","G__34187","G__34188","clojure.core.matrix.protocols.element_reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/+","clojure.core.matrix.protocols/matrix-add","clojure.core.matrix.protocols/PMatrixMultiply","G__34189","clojure.core.matrix.protocols/matrix-multiply","G__34190","G__34191","G__34204","clojure.core.matrix.protocols/element-multiply","G__34205","G__34206","adims","clojure.core.matrix.protocols/vector-dot","vec__34192","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","arows","acols","vec__34195","mrows","mcols","vec__34198","vec__34201","mutable","new-m-type","clojure.core.matrix.implementations.get_canonical_object.cljs$core$IFn$_invoke$arity$1","new-m","k","vec__34207","clojure.core.matrix.protocols/broadcast-compatible","clojure.core.matrix.protocols/PMatrixMultiplyMutable","G__34210","clojure.core.matrix.protocols/element-multiply!","G__34211","G__34212","G__34213","clojure.core.matrix.protocols/matrix-multiply!","G__34214","G__34215","clojure.core.matrix.protocols/PMatrixDivide","G__34216","clojure.core.matrix.protocols/element-divide","G__34217","G__34218","cljs.core/type","clojure.core.matrix.protocols.element_divide.cljs$core$IFn$_invoke$arity$1","clojure.core.matrix.protocols/PMatrixDivideMutable","G__34219","clojure.core.matrix.protocols/element-divide!","G__34220","G__34221","cljs.core//","vec__34222","clojure.core.matrix.protocols.element_map_BANG_.cljs$core$IFn$_invoke$arity$3","clojure.core.matrix.protocols/PBroadcastCoerce","G__34225","G__34226","G__34227","clojure.core.matrix.protocols/coerce-param","clojure.core.matrix.protocols/broadcast-like","clojure.core.matrix.protocols/PCoercion","G__34228","G__34229","G__34230","param","cljs.core/ISeq","clojure.core.matrix.protocols/PBroadcastLike","G__34231","G__34232","G__34233","sm","sa","clojure.core.matrix.protocols/PMatrixOps","G__34234","clojure.core.matrix.protocols/trace","G__34235","G__34236","G__34237","clojure.core.matrix.protocols/determinant","G__34238","G__34239","G__34240","clojure.core.matrix.protocols/inverse","G__34241","G__34242","Math/min","res","cljs.core/chunk-first"],"sourcesContent":["(ns clojure.core.matrix.impl.double-array\n  \"Implementation supporting:\n\n   - Javascript double[] arrays as core.matrix 1D vectors\n  \"\n  (:require [clojure.core.matrix.protocols :as mp]\n            [clojure.core.matrix.implementations :as imp]\n            [clojure.core.matrix.impl.wrappers :as wrap]\n            [clojure.core.matrix.impl.common :refer [logistic-fn softplus-fn relu-fn\n                                                     square? symmetric-matrix-entries?]]\n            [clojure.core.matrix.utils :as u])\n  (:require-macros [clojure.core.matrix.macros :refer [scalar-coerce error is-double-array? c-for]]))\n\n(defn new-double-array\n  \"Creates a new zero-filled nested double array of the given shape\"\n  [shape]\n  (let [dims (count shape)]\n    (cond\n      (== 0 dims) 0.0\n      (== 1 dims) (double-array (int (first shape)))\n      :else\n        (let [ns (next shape)\n              rn (long (first shape))\n              r0 (new-double-array ns)]\n          (into-array (cons r0 (for [i (range (dec rn))] (new-double-array ns))))))))\n\n(defn construct-double-array [data]\n  (let [dims (long (mp/dimensionality data))]\n    (cond\n     (== dims 1)\n       (let [n (long (mp/dimension-count data 0))\n             r (double-array n)]\n           (dotimes [i n]\n             (aset r i (double (mp/get-1d data i))))\n           r)\n     (== dims 0)\n       (double (mp/get-0d data))\n     :default\n       nil)))\n\n(extend-protocol mp/PImmutableAssignment\n  array\n  (assign [m source] ))\n\n(extend-protocol mp/PAssignment\n  array\n  (assign! [m source]\n    (dotimes [i (count source)]\n      (mp/set-1d! m i (nth source i)))\n    m)\n  (assign-array! [m arr start length]\n    (let [length (long length)\n          start (long start)]\n      (dotimes [i length]\n        (mp/set-1d! m i (nth arr (+ start i)))))\n    m))\n\n(extend-protocol mp/PImplementation\n  array\n  (implementation-key [m] :number-array)\n  (meta-info [m]\n    {:doc \"Clojure.core.matrix implementation for JS arrays\"})\n  (new-vector [m length] (double-array (int length)))\n  (new-matrix [m rows columns]\n    (new-double-array [rows columns]))\n  (new-matrix-nd [m shape]\n    (new-double-array shape))\n  (construct-matrix [m data]\n    (let [dims (long (mp/dimensionality data))]\n      (cond\n        (== dims 2) (error \"Double arrays in cljs only support a single dimension currently - submit a patch!\")\n        (== dims 1)\n          (let [n (long (mp/dimension-count data 0))\n                arr (double-array n)]\n            (dotimes [i n]\n              (aset arr i (double (mp/get-1d data i))))\n            arr)\n        (== dims 0)\n          (double (mp/get-0d data))\n        :default\n          nil)))\n  (supports-dimensionality? [m dims]\n    (let [dims (long dims)]\n      (or (== dims 1) (== dims 2)))))\n\n(extend-protocol mp/PDimensionInfo\n  array\n  (dimensionality [m] 1)\n  (is-vector? [m] true)\n  (is-scalar? [m] false)\n  (get-shape [m] (list (count m)))\n  (dimension-count [m x]\n    (if (== (long x) 0)\n      (count m)\n      (error \"Double array does not have dimension: \" x))))\n\n(extend-protocol mp/PReshaping\n  array\n  (reshape [m shape]\n    (if (= (mp/get-shape m) shape) ;; Short circuit if already the desired shape\n      m\n      (let [gv (mp/generic-value m) ;; generic value for array padding. Typically nil or zero\n            es (concat (mp/element-seq m) (repeat gv))\n            partition-shape (fn partition-shape [es shape]\n                              (if-let [s (seq shape)]\n                                (let [ns (next s)\n                                      plen (reduce * 1 ns)]\n                                  (map #(partition-shape % ns) (partition plen es)))\n                                (first es)))]\n        (if-let [shape (seq shape)]\n          (let [fs (long (first shape))\n                parts (partition-shape es shape)]\n            (or\n              (mp/construct-matrix m (take fs parts))\n              (mp/construct-matrix [] (take fs parts))))\n          (first es))))))\n\n(extend-protocol mp/PTypeInfo\n  array\n  (element-type [m] js/Number))\n\n(extend-protocol mp/PIndexedAccess\n  array\n  (get-1d [m x] (aget m (int x)))\n  (get-2d [m row column]\n      (error \"Can't do get-2D from 1D double array\"))\n  (get-nd [m indexes]\n    (if (== 1 (count indexes))\n      (aget m (int (first indexes)))\n      (error \"Can't get from double array with dimensionality: \" (count indexes)))))\n\n(extend-protocol mp/PIndexedSetting\n  array\n  (set-1d [m x v]\n    (let [arr (.slice m)]\n      (aset arr (int x) v)\n      arr))\n  (set-2d [m x y v]\n    (error \"Can't do 2D set on double array\"))\n  (set-nd [m indexes v]\n    (if (== 1 (count indexes))\n      (let [arr (.slice m)\n            x (int (first indexes))]\n        (aset arr (int x) v)\n        arr)\n      (error \"Can't set on double array with dimensionality: \" (count indexes))))\n  (is-mutable? [m] true))\n\n(extend-protocol mp/PIndexedSettingMutable\n  array\n  (set-1d! [m x v]\n    (aset m (int x) v)\n    m)\n  (set-2d! [m x y v]\n    (error \"Can't do 2D set on double array\"))\n  (set-nd! [m indexes v]\n    (if (== 1 (count indexes))\n      (do\n        (aset m (int (first indexes)) v)\n        m)\n      (error \"Can't set on double array with dimensionality: \" (count indexes)))))\n\n(extend-protocol mp/PMutableMatrixConstruction\n  array\n  (mutable-matrix [m] (.slice m)))\n\n(extend-protocol mp/PMatrixScaling\n  array\n  (scale [m a]\n    (let [m m\n          len (alength m)\n          arr (double-array len)\n          a (double a)]\n      (dotimes [i len] (aset arr i (* a (aget m i))))\n      arr))\n  (pre-scale [m a]\n    (let [m m\n          len (alength m)\n          arr (double-array len)\n          a (double a)]\n      (dotimes [i len] (aset arr i (* a (aget m i))))\n      arr)))\n\n(extend-protocol mp/PMatrixMutableScaling\n  array\n  (scale! [m a]\n    (let [m m\n          a (double a)]\n      (dotimes [i (alength m)] (aset m i (* a (aget m i))))))\n\n  (pre-scale! [m a]\n    (let [m m\n          a (double a)]\n      (dotimes [i (alength m)] (aset m i (* a (aget m i)))))))\n\n(extend-protocol mp/PConversion\n  array\n  (convert-to-nested-vectors [m]\n    (vec m)))\n\n(extend-protocol mp/PFunctionalOperations\n  array\n  (element-seq [m] m)\n\n  (element-map\n    ([m f]\n     (let [cnt (alength m)\n           r (double-array cnt)]\n       (dotimes [i cnt]\n         (aset r i (f (aget m i))))\n       r))\n    ([m f a]\n     (let [r (double-array m)\n           a (mp/broadcast-coerce r a)]\n       (dotimes [i (alength m)]\n         (aset r i (f (aget m i) (aget a i))))\n       r))\n    ([m f a more]\n     (let [r (double-array m)\n           a (mp/broadcast-coerce m a)\n           more (mapv #(mp/broadcast-coerce m %) more)\n           more-count (long (count more))\n           vs (double-array more-count)]\n       (dotimes [i (alength m)]\n         (dotimes [j more-count] (aset vs j (aget (more j) i)))\n         (aset r i (double (apply f (aget m i) (aget a i) vs))))\n       r)))\n\n  (element-map!\n    ([m f]\n     (mp/assign! m (mp/element-map m f)))\n    ([m f a]\n     (mp/assign! m (mp/element-map m f a)))\n    ([m f a more]\n     (mp/assign! m (mp/element-map m f a more))))\n\n  (element-reduce\n    ([m f]\n     (let [m m]\n       (reduce f m)))\n    ([m f init]\n     (let [m m]\n       (reduce f init m)))))\n\n(extend-protocol mp/PIndexImplementation\n  array\n\t  (index? [m] true)\n\t  (index-to-longs [m] m)\n\t  (index-to-ints [m] m)\n\t  (index-from-longs [m xs]\n      (long-array xs))\n\t  (index-from-ints [m xs]\n      (int-array xs))\n\t  (index-coerce [m a]\n      m))\n\n(extend-protocol mp/PBroadcast\n  array\n  (broadcast [m new-shape]\n    (let [nshape new-shape\n          mshape (mp/get-shape m)\n          mdims (count mshape)\n          ndims (count nshape)]\n      (cond\n        (and (== mdims ndims) (u/same-shape-object? nshape mshape)) m\n        :else (wrap/wrap-broadcast m new-shape)))))\n\n(extend-protocol mp/PNumerical\n  array\n  (numerical? [m] true))\n\n(extend-protocol mp/PSubVector\n  array\n  (subvector [m start length]\n    (mp/subvector (wrap/wrap-nd m) start length)))\n\n(extend-protocol mp/PMatrixEquality\n  array\n  (matrix-equals [a b]\n    (cond\n      (identical? a b) true\n      (mp/same-shape? a b)\n      (if (== 0 (long (mp/dimensionality a)))\n        (== (mp/get-0d a) (scalar-coerce b))\n        (not-any? false? (map == (mp/element-seq a) (mp/element-seq b))))\n      :else false)))\n\n(extend-protocol mp/PSameShape\n  array\n  (same-shape? [a b]\n    (u/same-shape-object? (mp/get-shape a) (mp/get-shape b))))\n\n(extend-protocol mp/PSelect\n  array\n  (select [a area]\n    (or (mp/select-view a area)\n        (wrap/wrap-selection a area))))\n\n(extend-protocol mp/PLogistic\n  array\n  (logistic [m]\n      (mp/element-map m logistic-fn)))\n\n(extend-protocol mp/PLogisticMutable\n  array\n  (logistic! [m]\n    (mp/element-map! m logistic-fn)))\n\n(extend-protocol mp/PSoftplus\n  array\n  (softplus [m]\n    (mp/element-map m softplus-fn)))\n\n(extend-protocol mp/PSoftmax\n  array\n  (softmax [m]\n    (let [em (mp/exp m)]\n      (mp/element-divide em (mp/element-sum em)))))\n\n(extend-protocol mp/PSoftmaxMutable\n  array\n  (softmax! [m]\n    (mp/exp! m)\n    (mp/element-divide! m (mp/element-sum m))\n    m))\n\n(extend-protocol mp/PSoftplusMutable\n  array\n  (softplus! [m]\n    (mp/element-map! m softplus-fn)))\n\n(extend-protocol mp/PReLU\n  array\n  (relu [m]\n    (mp/element-map m relu-fn)))\n\n(extend-protocol mp/PReLUMutable\n  array\n  (relu! [m]\n    (mp/element-map! m relu-fn)))\n\n(extend-protocol mp/PMatrixPredicates\n  array\n  (identity-matrix? [m]\n    (let [rc (long (mp/dimension-count m 0))\n          cc (long (mp/dimension-count m 1))]\n      (if (and (== (long (mp/dimensionality m)) 2) (== rc cc))\n        (loop [i (long 0)]\n          (if (< i rc)\n            (if (loop [j (long 0)]\n                  (if (< j cc)\n                    (let [elem (mp/get-2d m i j)]\n                      (if (number? elem)\n                        (if (== i j)\n                          (if (== (double elem) 1.0) (recur (inc j)) false)\n                          (if (zero? elem) (recur (inc j)) false))\n                        false))\n                    true))\n              (recur (inc i))\n              false)\n            true))\n        false)))\n  (zero-matrix? [m]\n    (every? #(and (number? %) (zero? %)) (mp/element-seq m)))\n  (symmetric? [m]\n    (case (long (mp/dimensionality m))\n      0 true\n      1 true\n      2 (and (square? m) (symmetric-matrix-entries? m))\n      (= m (mp/transpose m))))\n\n  number\n  (identity-matrix? [m] (= 1 m))\n  (zero-matrix? [m] (zero? m))\n  (symmetric? [m] true))\n\n(extend-protocol mp/PSummable\n  array\n  (element-sum [a]\n    (mp/element-reduce a (if (mp/numerical? a) + mp/matrix-add))))\n\n(extend-protocol mp/PMatrixMultiply\n  array\n  (matrix-multiply [m a]\n    (let [mdims (long (mp/dimensionality m))\n          adims (long (mp/dimensionality a))]\n      (cond\n        (== adims 0) (mp/scale m a)\n        (and (== mdims 1) (== adims 1)) (mp/vector-dot m a)\n        (and (== mdims 1) (== adims 2))\n        (let [[arows acols] (mp/get-shape a)]\n          (mp/reshape (mp/matrix-multiply (mp/reshape m [1 arows]) a)\n                      [acols]))\n        (and (== mdims 2) (== adims 1))\n        (let [[mrows mcols] (mp/get-shape m)]\n          (mp/reshape (mp/matrix-multiply m (mp/reshape a [mcols 1]))\n                      [mcols]))\n        (and (== mdims 2) (== adims 2))\n        (let [mutable (mp/is-mutable? m)\n              [^long mrows ^long mcols] (mp/get-shape m)\n              [^long arows ^long acols] (mp/get-shape a)\n              new-m-type (if mutable m (imp/get-canonical-object :ndarray))\n              new-m (mp/new-matrix new-m-type mrows acols)]\n          ;; TODO: optimize cache-locality (http://bit.ly/12FgFbl)\n          (c-for [i (long 0) (< i mrows) (inc i)\n                  j (long 0) (< j acols) (inc j)]\n                 (mp/set-2d! new-m i j 0))\n          (c-for [i (long 0) (< i mrows) (inc i)\n                  j (long 0) (< j acols) (inc j)\n                  k (long 0) (< k mcols) (inc k)]\n                 (mp/set-2d! new-m i j (+ (mp/get-2d new-m i j)\n                                          (* (mp/get-2d m i k)\n                                             (mp/get-2d a k j)))))\n          new-m))))\n  (element-multiply [m a]\n    (if (number? a)\n      (mp/scale m a)\n      (let [[m a] (mp/broadcast-compatible m a)]\n        (mp/element-map m clojure.core/* a)))))\n\n(extend-protocol mp/PMatrixMultiplyMutable\n  array\n  (element-multiply! [m a]\n    (mp/assign! m (mp/element-multiply m a)))\n  (matrix-multiply! [m a]\n    (mp/assign! m (mp/matrix-multiply m a))))\n\n(extend-protocol mp/PMatrixDivide\n  array\n  (element-divide\n    ([m]\n     (if (mp/get-shape m)\n       (mp/element-map m mp/element-divide)\n       (error \"Don't know how to take reciprocal of \" (type m))))\n    ([m a]\n     (mp/element-multiply m (mp/element-divide a)))))\n\n(extend-protocol mp/PMatrixDivideMutable\n  array\n  (element-divide!\n    ([m] (mp/element-map! m /))\n    ([m a]\n     (let [[m a] (mp/broadcast-compatible m a)]\n       (mp/element-map! m / a)))))\n\n(extend-protocol mp/PBroadcastCoerce\n  array\n  (broadcast-coerce [m a]\n    (mp/coerce-param m (mp/broadcast-like m a))))\n\n(extend-protocol mp/PCoercion\n  array\n  (coerce-param [m param]\n    (let [param (if (instance? ISeq param) (mp/convert-to-nested-vectors param) param)]\n      (or (mp/construct-matrix m param)\n          param))))\n\n(extend-protocol mp/PBroadcastLike\n  array\n  (broadcast-like [m a]\n    (let [sm (mp/get-shape m) sa (mp/get-shape a)]\n      (if (u/same-shape-object? sm sa)\n        a\n        (mp/broadcast a sm)))))\n\n(extend-protocol mp/PMatrixOps\n  array\n  (trace [m]\n    (when-not (== 2 (long (mp/dimensionality m))) (error \"Trace requires a 2D matrix\"))\n    (let [rc (long (mp/dimension-count m 0))\n          cc (long (mp/dimension-count m 1))\n          dims (Math/min rc cc)]\n      (loop [i 0 res 0.0]\n        (if (>= i dims)\n          res\n          (recur (inc i) (+ res (double (mp/get-2d m i i))))))))\n\n  (determinant [m] nil)\n  (inverse [m] nil))\n\n\n"]}