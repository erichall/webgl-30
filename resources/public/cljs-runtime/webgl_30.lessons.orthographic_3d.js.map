{"version":3,"sources":["webgl_30/lessons/orthographic_3d.cljs"],"mappings":"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","names":["webgl-30.lessons.orthographic-3d/initial-state","js/webgl-30","js/webgl-30.lessons","js/webgl-30.lessons.orthographic-3d","js/webgl-30.lessons.orthographic-3d.state-atom","webgl-30.lessons.orthographic-3d/state-atom","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/deref","cljs.core/reset!","webgl-30.lessons.orthographic-3d/fragment-shader","webgl-30.lessons.orthographic-3d/vertex-shader","p__81405","map__81406","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","webgl-30.lessons.orthographic-3d/multiply-matrices","rect","gl","map__81408","translation","scale","rotation","projection-matrix","webgl-30.math/projection-3d-matrix","webgl-30.webgl/get-canvas-width","webgl-30.webgl/get-canvas-height","translation-matrix","webgl-30.math/translation-3d-matrix","rotation-matrix-x","webgl-30.math/rotation-3d-x-matrix","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","rotation-matrix-y","webgl-30.math/rotation-3d-y-matrix","rotation-matrix-z","webgl-30.math/rotation-3d-z-matrix","scale-matrix","webgl-30.math/scaling-3d-matrix","webgl-30.math/matrix-multiply-3d","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","webgl-30.lessons.orthographic-3d/format","seq81410","G__81411","cljs.core/first","cljs.core/next","self__4776__auto__","f","xs","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","cljs.pprint/cl-format","webgl-30.lessons.orthographic-3d/draw!","timestamp","map__81412","state","cljs.core/assoc-in","webgl-30.webgl/draw-scene!","p__81414","map__81415","cljs.core.get.cljs$core$IFn$_invoke$arity$3","webgl-30.lessons.orthographic-3d/slider-component","on-change","label","value","id","min","max","step","display-value","webgl-30.component/slider","or__4185__auto__","webgl-30.lessons.orthographic-3d/setup!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","p__81417","map__81418","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","webgl-30.webgl/link-shaders!","webgl-30.webgl/create-buffer","js/Float32Array","webgl-30.shapes/f-shape-3d","webgl-30.lessons.orthographic-3d/lesson","map__81420","canvas-id","webgl-30.component/webgl-canvas","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","webgl-30.webgl/get-context","js/requestAnimationFrame","val","webgl-30.math/deg->rad","webgl-30.math/rad->deg","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","webgl_30.lessons.orthographic_3d.format.cljs$core$IFn$_invoke$arity$variadic"],"sourcesContent":["(ns webgl-30.lessons.orthographic-3d\n  (:require [reagent.core :as r]\n            [webgl-30.math :as m]\n            [webgl-30.webgl :as webgl]\n            [webgl-30.shapes :as shapes]\n            [webgl-30.component :refer [webgl-canvas slider]]))\n\n(def initial-state {:gl   nil\n                    :rect {:translation [140 150 0]\n                           :rotation    [0 1 1]\n                           :scale       [1 1 1]\n                           :angle-rad   0\n                           :width       100\n                           :height      30\n                           :color       [0.3 0.3 0.3 1]}})\n(defonce state-atom (r/atom nil))\n(when (nil? @state-atom)\n  (reset! state-atom initial-state))\n\n(def fragment-shader\n  \"precision mediump float;\n   uniform vec4 u_color;\n   void main() {\n       gl_FragColor = u_color;\n   }\")\n\n(def vertex-shader\n  \"// attribute vec2 a_position;\n   attribute vec4 a_position;\n\n  //uniform mat3 u_matrix;\n  uniform mat4 u_matrix;\n\n  void main() {\n    //gl_Position = vec4((u_matrix * vec3(a_position, 1)).xy, 0, 1);\n    gl_Position = u_matrix * a_position;\n  }\")\n\n(defn multiply-matrices\n  [{:keys [rect gl]}]\n  (let [{:keys [translation scale rotation]} rect\n        projection-matrix (m/projection-3d-matrix (webgl/get-canvas-width gl) (webgl/get-canvas-height gl) 400)\n        translation-matrix (m/translation-3d-matrix translation)\n        rotation-matrix-x (m/rotation-3d-x-matrix (nth rotation 0))\n        rotation-matrix-y (m/rotation-3d-y-matrix (nth rotation 1))\n        rotation-matrix-z (m/rotation-3d-z-matrix (nth rotation 2))\n        scale-matrix (m/scaling-3d-matrix scale)]\n    (-> (m/matrix-multiply-3d projection-matrix translation-matrix)\n        (m/matrix-multiply-3d rotation-matrix-x)\n        (m/matrix-multiply-3d rotation-matrix-y)\n        (m/matrix-multiply-3d rotation-matrix-z)\n        (m/matrix-multiply-3d scale-matrix))))\n\n(defn format\n  [f & xs]\n  (apply cljs.pprint/cl-format nil f xs))\n\n(defn draw!\n  [timestamp]\n  (let [{:keys [rect] :as state} @state-atom]\n    (-> (assoc-in state [:objects-to-draw :my-f :uniforms :u_matrix :values] (multiply-matrices state))\n        webgl/draw-scene!)))\n\n(defn slider-component\n  [{:keys [on-change label value id min max step display-value] :or {step 1}}]\n  [:div {:style {:display        \"flex\"\n                 :flex-direction \"row\"}}\n   [:span {:style {:color        \"white\"\n                   :white-space  \"nowrap\"\n                   :margin-right \"10px\"}} label]\n   [slider {:on-change on-change\n            :value     value\n            :min       min\n            :step      step\n            :max       max\n            :id        id}]\n   [:span {:style {:color        \"white\"\n                   :margin-right \"10px\"}} (or display-value value)]])\n\n(defn setup!\n  []\n  (-> (swap! state-atom (fn [{:keys [gl rect] :as state}]\n                          (assoc state :objects-to-draw\n                                       {:my-f {:program    (webgl/link-shaders! gl {:fs fragment-shader :vs vertex-shader})\n                                               :attributes {:a_position {:name        \"a_position\"\n                                                                         :size        3\n                                                                         :type        (.-FLOAT gl)\n                                                                         :normalize   false\n                                                                         :stride      0\n                                                                         :offset      0\n                                                                         :buffer-info (webgl/create-buffer gl\n                                                                                                           {:data   (js/Float32Array. shapes/f-shape-3d)\n                                                                                                            :usage  (.-STATIC_DRAW gl)\n                                                                                                            :target (.-ARRAY-BUFFER gl)})}}\n                                               :uniforms   {:u_resolution {:name   \"u_resolution\"\n                                                                           :type   \"uniform2f\"\n                                                                           :values [(aget gl \"canvas\" \"width\") (aget gl \"canvas\" \"height\")]}\n                                                            :u_color      {:name   \"u_color\"\n                                                                           :type   \"uniform4fv\"\n                                                                           :values (:color rect)}\n                                                            :u_matrix     {:name      \"u_matrix\"\n                                                                           :type      \"uniformMatrix4fv\"\n                                                                           :transpose false\n                                                                           :values    (multiply-matrices state)}}\n                                               :element    {:draw-type (.-TRIANGLES gl)\n                                                            :offset    0\n                                                            :count     18}}})))))\n\n(def ^:export lesson\n  {:title           (fn []\n                      [:div\n                       [:h1 {:style {:font-family \"monospace\"}}\n                        \"Lesson - Orthographic 3D\"]\n                       [:h4 {:style {:font-family \"monospace\"}}\n                        \"Matrix\"]])\n   :source          \"https://github.com/erichall/webgl-30/blob/master/src/webgl_30/lessons/orthographic_3d.cljs\"\n   :tutorial-source \"https://webglfundamentals.org/webgl/lessons/webgl-3d-orthographic.html\"\n   :start           (fn []\n                      (let [canvas-id \"translation\"\n                            state @state-atom\n                            {:keys [translation scale rotation]} (:rect state)]\n                        [:div {:style {:display        \"flex\"\n                                       :flex-direction \"row\"}}\n                         [webgl-canvas {:height   400\n                                        :width    400\n                                        :id       canvas-id\n                                        :on-mount (fn []\n                                                    (do\n                                                      (swap! state-atom assoc :gl (webgl/get-context canvas-id))\n                                                      (setup!)\n                                                      (js/requestAnimationFrame draw!)))}]\n                         [:div {:style {:margin-left \"30px\"}}\n                          ;; trans\n                          [slider-component {:on-change (fn [val]\n                                                          (swap! state-atom assoc-in [:rect :translation] (assoc translation 0 val))\n                                                          (js/requestAnimationFrame draw!))\n                                             :value     (first translation) :id :translate-x :min 0 :max 400 :label \"x\"}]\n                          [slider-component {:on-change (fn [val]\n                                                          (swap! state-atom assoc-in [:rect :translation] (assoc translation 1 val))\n                                                          (js/requestAnimationFrame draw!))\n                                             :value     (nth translation 1) :id :translate-y :min 0 :max 400 :label \"y\"}]\n                          [slider-component {:on-change (fn [val]\n                                                          (swap! state-atom assoc-in [:rect :translation] (assoc translation 2 val))\n                                                          (js/requestAnimationFrame draw!))\n                                             :value     (nth translation 1) :id :translate-z :min 0 :max 400 :label \"z\"}]\n\n                          ;; scale\n                          [slider-component {:on-change (fn [val]\n                                                          (swap! state-atom assoc-in [:rect :scale] (assoc scale 0 val))\n                                                          (js/requestAnimationFrame draw!))\n                                             :value     (nth scale 0) :id :scale-x :min -5 :max 5 :label \"x-scale\" :step 0.1}]\n                          [slider-component {:on-change (fn [val]\n                                                          (swap! state-atom assoc-in [:rect :scale] (assoc scale 1 val))\n                                                          (js/requestAnimationFrame draw!))\n                                             :value     (nth scale 1) :id :scale-y :min -5 :max 5 :label \"y-scale\" :step 0.1}]\n                          [slider-component {:on-change (fn [val]\n                                                          (swap! state-atom assoc-in [:rect :scale] (assoc scale 2 val))\n                                                          (js/requestAnimationFrame draw!))\n                                             :value     (nth scale 2) :id :scale-z :min -5 :max 5 :label \"z-scale\" :step 0.1}]\n                          ;; rotation\n                          [slider-component {:on-change     (fn [val]\n                                                              (swap! state-atom assoc-in [:rect :rotation 0] (m/deg->rad val))\n                                                              (js/requestAnimationFrame draw!))\n                                             :value         (m/rad->deg (nth rotation 0)) :id :rotate-x :min 0 :max 365 :label \"x-rotation\"\n                                             :display-value (->> (get-in @state-atom [:rect :rotation 0])\n                                                                 m/rad->deg\n                                                                 (format \"~1f\"))}]\n                          [slider-component {:on-change     (fn [val]\n                                                              (swap! state-atom assoc-in [:rect :rotation 1] (m/deg->rad val))\n                                                              (js/requestAnimationFrame draw!))\n                                             :value         (m/rad->deg (nth rotation 1)) :id :rotate-y :min 0 :max 365 :label \"y-rotation\"\n                                             :display-value (->> (get-in @state-atom [:rect :rotation 1])\n                                                                 m/rad->deg\n                                                                 (format \"~1f\"))}]\n                          [slider-component {:on-change     (fn [val]\n                                                              (swap! state-atom assoc-in [:rect :rotation 2] (m/deg->rad val))\n                                                              (js/requestAnimationFrame draw!))\n                                             :value         (m/rad->deg (nth rotation 2)) :id :rotate-z :min 0 :max 365 :label \"z-rotation\"\n                                             :display-value (->> (get-in @state-atom [:rect :rotation 2])\n                                                                 m/rad->deg\n                                                                 (format \"~1f\"))}]]]))})\n"]}