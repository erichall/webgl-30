{"version":3,"sources":["webgl_30/lessons/textures_2.cljs"],"mappings":"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","names":["webgl-30.lessons.textures-2/initial-state","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","webgl-30.math/deg->rad","js/webgl-30","js/webgl-30.lessons","js/webgl-30.lessons.textures-2","js/webgl-30.lessons.textures-2.state-atom","webgl-30.lessons.textures-2/state-atom","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/deref","cljs.core/reset!","webgl-30.lessons.textures-2/fragment-shader","webgl-30.lessons.textures-2/vertex-shader","p__26299","map__26300","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","webgl-30.lessons.textures-2/multiply-matrices","rect","gl","map__26305","translation","scale","rotation","scale-factor","t-size","x","webgl-30.webgl/get-canvas-width","y","webgl-30.webgl/get-canvas-height","orthographic-matrix","webgl-30.math/orthographic-matrix","translation-matrix","webgl-30.math/translation-3d-matrix","translate-matrix-two","scale-matrix","webgl-30.math/scaling-3d-matrix","webgl-30.math/matrix-multiply-3d","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","webgl-30.lessons.textures-2/format","seq26314","G__26315","cljs.core/first","cljs.core/next","self__4776__auto__","f","xs","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","cljs.pprint/cl-format","webgl-30.lessons.textures-2/draw!","timestamp","state","cljs.core/assoc-in","webgl-30.webgl/draw-scene!","webgl-30.lessons.textures-2/raf-draw!","js/requestAnimationFrame","t","webgl-30.lessons.textures-2/setup!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","p__26344","map__26345","program","webgl-30.webgl/link-shaders!","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","js/Uint8Array","webgl_30.webgl.create_texture_BANG_.cljs$core$IFn$_invoke$arity$2","webgl_30.webgl.create_texture_from_img.cljs$core$IFn$_invoke$arity$4","texture","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","webgl-30.webgl/attribute","js/Float32Array","webgl-30.lessons.textures-2/set-texture-param!","type","val-str","map__26384","cljs.core/update-in","p","webgl-30.core/set-last","webgl-30.lessons.textures-2/lesson","webgl-30.core/get-filename","canvas-id","webgl-30.core/ns-str","webgl-30.component/webgl-canvas","cljs.core/assoc","webgl-30.webgl/get-context"],"sourcesContent":["(ns webgl-30.lessons.textures-2\n  (:require [reagent.core :as r]\n            [webgl-30.math :as m]\n            [webgl-30.webgl :as webgl]\n            [webgl-30.shapes :as shapes]\n            [webgl-30.core :as c]\n            [webgl-30.component :refer [webgl-canvas slider]]))\n\n(def initial-state {:gl   nil\n                    :rect {:translation    [250 200 0]\n                           :rotation       (mapv m/deg->rad [190 40 320])\n                           :scale          [1 1 1]\n                           :rotation-speed 1.2\n                           :then           0\n                           :width          100\n                           :height         30\n                           :color          [0.3 0.3 0.3 1]}})\n(defonce state-atom (r/atom nil))\n(when (nil? @state-atom)\n  (reset! state-atom initial-state))\n\n(def fragment-shader\n  \"precision mediump float;\n\n   varying vec2 v_texcoord;\n\n   // The texture\n   uniform sampler2D u_texture;\n\n   void main() {\n       gl_FragColor = texture2D(u_texture, v_texcoord);\n   }\")\n\n(def vertex-shader\n  \"attribute vec4 a_position;\n   attribute vec2 a_texcoord;\n\n  uniform mat4 u_matrix;\n\n  varying vec2 v_texcoord;\n\n  void main() {\n    gl_Position = u_matrix * a_position;\n\n    // this can be passed to the fragment shader\n    v_texcoord = a_texcoord;\n  }\")\n\n(defn multiply-matrices\n  [{:keys [rect gl]}]\n  (let [{:keys [translation scale rotation]} rect\n        scale-factor 2.5\n        t-size (* 80 scale-factor)\n        x (- (/ (webgl/get-canvas-width gl) 2) (/ t-size 2))\n        y (- (webgl/get-canvas-height gl) t-size 60)\n        orthographic-matrix (m/orthographic-matrix 0 (webgl/get-canvas-width gl) (webgl/get-canvas-height gl) 0 -1 1)\n        translation-matrix (m/translation-3d-matrix [x y 0])\n        translate-matrix-two (m/translation-3d-matrix [0.5 0.5 0])\n        scale-matrix (m/scaling-3d-matrix [t-size t-size 1])]\n    (-> (m/matrix-multiply-3d orthographic-matrix translation-matrix)\n        (m/matrix-multiply-3d scale-matrix)\n        (m/matrix-multiply-3d translate-matrix-two))))\n\n(defn format\n  [f & xs]\n  (apply cljs.pprint/cl-format nil f xs))\n\n(defn draw!\n  [timestamp state]\n  (-> (assoc-in state [:objects-to-draw :my-f :uniforms :u_matrix :values] (multiply-matrices state))\n      webgl/draw-scene!))\n\n(defn raf-draw!\n  [state]\n  (js/requestAnimationFrame (fn [t] (draw! t state))))\n\n(defn setup!\n  []\n  (-> (swap! state-atom (fn [{:keys [gl] :as state}]\n                          (let [program (webgl/link-shaders! gl {:fs fragment-shader :vs vertex-shader})]\n                            (-> (assoc state :clear-depth? true)\n                                (assoc :objects-to-draw\n                                       {:my-f {:program    program\n                                               :features   [(.-CULL_FACE gl) (.-DEPTH_TEST gl)]\n                                               ;; first create a blue placeholder texture, then load the img async\n                                               :textures   {:f-texture {:texture (->> [(.-TEXTURE_2D gl) 0 (.-RGBA gl) 1 1 0 (.-RGBA gl) (.-UNSIGNED_BYTE gl) (js/Uint8Array. [0 0 255 255])]\n                                                                                      (webgl/create-texture! gl)\n                                                                                      (webgl/create-texture-from-img gl \"images/f-texture.png\" (fn [texture]\n                                                                                                                                                 (-> (swap! state-atom assoc-in [:objects-to-draw :my-f :textures :f-texture :texture] texture)\n                                                                                                                                                     raf-draw!))))\n                                                                        :type    (.-TEXTURE_2D gl)\n                                                                        :params  {:min-filter [\"texParameteri\" (.-TEXTURE_2D gl) (.-TEXTURE_MIN_FILTER gl) (.-NEAREST gl)]\n                                                                                  :wrap-s     [\"texParameteri\" (.-TEXTURE_2D gl) (.-TEXTURE_WRAP_S gl) (aget gl \"CLAMP_TO_EDGE\")]\n                                                                                  :wrap-t     [\"texParameteri\" (.-TEXTURE_2D gl) (.-TEXTURE_WRAP_T gl) (aget gl \"REPEAT\")]}}}\n                                               :attributes {:a_position (webgl/attribute gl program {:name \"a_position\"\n                                                                                                     :size 3\n                                                                                                     :data (js/Float32Array. [-0.5, 0.5, 0.5,\n                                                                                                                              0.5, 0.5, 0.5,\n                                                                                                                              -0.5, -0.5, 0.5,\n                                                                                                                              -0.5, -0.5, 0.5,\n                                                                                                                              0.5, 0.5, 0.5,\n                                                                                                                              0.5, -0.5, 0.5])})\n                                                            :a_texcoord (webgl/attribute gl program {:name \"a_texcoord\"\n                                                                                                     :size 2\n                                                                                                     :data (js/Float32Array. [-3, -1,\n                                                                                                                              2, -1,\n                                                                                                                              -3, 4,\n                                                                                                                              -3, 4,\n                                                                                                                              2, -1,\n                                                                                                                              2, 4])})}\n                                               :uniforms   {:u_matrix  {:name      \"u_matrix\"\n                                                                        :type      \"uniformMatrix4fv\"\n                                                                        :transpose false\n                                                                        :values    (multiply-matrices state)}\n                                                            :u_texture {:name   \"u_texture\"\n                                                                        :type   \"uniform1i\"\n                                                                        :values [0]}}\n                                               :element    {:draw-type (.-TRIANGLES gl)\n                                                            :offset    0\n                                                            :count     (* 1 6)}}})))))))\n\n(defn set-texture-param!\n  [type val-str]\n  (let [{:keys [gl]} @state-atom]\n    (swap! state-atom update-in [:objects-to-draw :my-f :textures :f-texture :params type] (fn [p] (c/set-last p (aget gl val-str))))))\n\n(def ^:export lesson\n  {:title           (fn []\n                      [:div\n                       [:h1 {:style {:font-family \"monospace\"}}\n                        \"Lesson - WebGL Textures\"]\n                       [:h4 {:style {:font-family \"monospace\"}}\n                        \"Textureeee!\"]])\n   :source          (c/get-filename #'state-atom)           ;; TODO broken\n   :tutorial-source \"webgl-3d-textures.html\"\n   :start           (fn []\n                      (let [canvas-id (c/ns-str ::x)]\n                        [:div {:style {:display        \"flex\"\n                                       :flex-direction \"row\"}}\n                         [webgl-canvas {:height   400\n                                        :width    400\n                                        :id       canvas-id\n                                        :on-mount (fn []\n                                                    (do\n                                                      (swap! state-atom assoc :gl (webgl/get-context canvas-id))\n                                                      (setup!)\n                                                      (js/requestAnimationFrame (fn [t] (draw! t @state-atom)))))}]\n                         [:form {:style  {:margin-left \"30px\"}\n                                 :action \"\"}\n                          [:p {:style {:margin-bottom \"0px\"}} \"TEXTURE_WRAP_S\"]\n                          [:input {:type            \"radio\"\n                                   :name            :texture-wrap-s\n                                   :default-checked \"checked\"\n                                   :id              :repeat\n                                   :on-click        (fn [] (-> (set-texture-param! :wrap-s \"REPEAT\") raf-draw!))\n                                   :style           {:color \"white\"}}]\n                          [:label {:for :repeat} \"REPEAT\"]\n                          [:br]\n                          [:input {:type     \"radio\"\n                                   :name     :texture-wrap-s\n                                   :id       :clamp-to-edge\n                                   :on-click (fn [] (-> (set-texture-param! :wrap-s \"CLAMP_TO_EDGE\") raf-draw!))\n                                   :style    {:color \"white\"}}]\n                          [:label {:for :clamp-to-edge} \"CLAMP_TO_EDGE\"]\n                          [:br]\n                          [:input {:type     \"radio\"\n                                   :name     :texture-wrap-s\n                                   :id       :mir\n                                   :on-click (fn [] (-> (set-texture-param! :wrap-s \"MIRRORED_REPEAT\") raf-draw!))\n                                   :style    {:color \"white\"}}]\n                          [:label {:for :mir} \"MIRRORED_REPEAT\"]\n\n                          [:p {:style {:margin-bottom \"0px\"}} \"TEXTURE_WRAP_T\"]\n                          [:input {:type            \"radio\"\n                                   :name            :texture-wrap-t\n                                   :default-checked \"checked\"\n                                   :id              :r\n                                   :on-click        (fn [] (-> (set-texture-param! :wrap-t \"REPEAT\") raf-draw!))\n                                   :style           {:color \"white\"}}]\n                          [:label {:for :r} \"REPEAT\"]\n                          [:br]\n                          [:input {:type     \"radio\"\n                                   :name     :texture-wrap-t\n                                   :id       :c\n                                   :on-click (fn [] (-> (set-texture-param! :wrap-t \"CLAMP_TO_EDGE\") raf-draw!))\n                                   :style    {:color \"white\"}}]\n                          [:label {:for :c} \"CLAMP_TO_EDGE\"]\n                          [:br]\n                          [:input {:type     \"radio\"\n                                   :name     :texture-wrap-t\n                                   :id       :m\n                                   :on-click (fn [] (-> (set-texture-param! :wrap-t \"MIRRORED_REPEAT\") raf-draw!))\n                                   :style    {:color \"white\"}}]\n                          [:label {:for :m} \"MIRRORED_REPEAT\"]\n                          [:br]]]))})\n"]}