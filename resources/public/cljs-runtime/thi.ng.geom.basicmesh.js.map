{"version":3,"sources":["thi/ng/geom/basicmesh.cljc"],"mappings":"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","names":["p__29324","vec__29325","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","thi.ng.geom.basicmesh/add-face*","mesh","fverts","thi.ng.geom.types/BasicMesh","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.meshface/MeshFace","thi.ng.geom.basicmesh/basic-mesh","cljs.core/PROTOCOL_SENTINEL","_","thi.ng.geom.utils.total_area_3d.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.meshface/xf-face-verts","thi.ng.geom.utils/bounding-box","cljs.core/seq","thi.ng.geom.utils/axis-range","thi.ng.geom.utils.bounding_sphere.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.core/centroid","thi.ng.geom.core.center.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.vector.vec3.cljs$core$IFn$_invoke$arity$0","o","thi.ng.geom.core/translate","thi.ng.math.core._.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.utils/centroid","thi.ng.geom.utils/map-mesh","f","cljs.core/vec","cljs.core/rseq","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.comp.cljs$core$IFn$_invoke$arity$3","p1__29346#","cljs.core.map.cljs$core$IFn$_invoke$arity$1","thi.ng.geom.core.vertices.cljs$core$IFn$_invoke$arity$2","p1__29347#","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1","thi.ng.dstruct.core.successive_nth.cljs$core$IFn$_invoke$arity$2","cljs.core/first","cljs.core/set","opts","p1__29349#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.core/raw","face","v","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","p1__29350#","p1__29352#","cljs.core.filter.cljs$core$IFn$_invoke$arity$1","thi.ng.dstruct.core/index-of","thi.ng.xerror.core.unsupported_BANG_.cljs$core$IFn$_invoke$arity$0","force?","thi.ng.geom.core/compute-face-normals","fnorms","cljs.core/transient","faces","cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3","thi.ng.geom.utils.ortho_normal.cljs$core$IFn$_invoke$arity$1","cljs.core/next","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/persistent!","thi.ng.geom.utils/into-mesh","thi.ng.geom.core/into","thi.ng.geom.core.tessellate.cljs$core$IFn$_invoke$arity$2","or__4185__auto__","thi.ng.geom.utils/tessellate-face","thi.ng.geom.utils/tessellate-with-first","s","p1__29356#","thi.ng.geom.utils/transform-mesh","thi.ng.math.core._STAR_.cljs$core$IFn$_invoke$arity$2","c","p1__29358#","thi.ng.math.core/madd","t","p1__29359#","thi.ng.math.core._PLUS_.cljs$core$IFn$_invoke$arity$2","m","thi.ng.geom.utils.total_volume.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns thi.ng.geom.basicmesh\n  (:require\n   [thi.ng.geom.core :as g]\n   [thi.ng.geom.utils :as gu]\n   [thi.ng.geom.vector :as v :refer [vec2 vec3]]\n   [thi.ng.geom.matrix :refer [M44]]\n   [thi.ng.geom.meshface :as mf]\n   #?(:clj [thi.ng.geom.types] :cljs [thi.ng.geom.types :refer [BasicMesh]])\n   [thi.ng.dstruct.core :as d]\n   [thi.ng.math.core :as m :refer [*eps*]]\n   [thi.ng.xerror.core :as err]\n   [clojure.core.reducers :as r])\n   #?(:clj (:import [thi.ng.geom.types BasicMesh])))\n\n(declare basic-mesh)\n\n(defn- add-face*\n  [mesh [fverts]]\n  (BasicMesh.\n   (into (get mesh :vertices) fverts)\n   (conj (get mesh :faces) (thi.ng.geom.meshface.MeshFace. fverts nil))\n   (get mesh :fnormals)))\n\n(defn basic-mesh\n  \"Builds a new 3d mesh data structure and (optionally) populates it with\n  the given items (a seq of existing meshes and/or faces). Faces are defined\n  as vectors of their vertices.\"\n  [] (BasicMesh. #{} #{} {}))\n\n(extend-type BasicMesh\n\n  g/IArea\n  (area\n    [_] (gu/total-area-3d (mf/xf-face-verts _) (get _ :faces)))\n\n  g/IBounds\n  (bounds [_] (gu/bounding-box (seq (get _ :vertices))))\n  (width [_]  (gu/axis-range 0 (get _ :vertices)))\n  (height [_] (gu/axis-range 1 (get _ :vertices)))\n  (depth [_]  (gu/axis-range 2 (get _ :vertices)))\n\n  g/IBoundingSphere\n  (bounding-sphere\n    [_] (gu/bounding-sphere (g/centroid _) (get _ :vertices)))\n\n  g/ICenter\n  (center\n    ([_]   (g/center _ (vec3)))\n    ([_ o] (g/translate _ (m/- o (g/centroid _)))))\n  (centroid\n    [_]    (gu/centroid (seq (get _ :vertices))))\n\n  g/IFlip\n  (flip [_] (gu/map-mesh (fn [f] [(vec (rseq f))]) _))\n\n  g/IVertexAccess\n  (vertices\n    [_] (get _ :vertices))\n\n  g/IEdgeAccess\n  (edges\n    [_]\n    (into\n     #{}\n     (comp\n      (map #(g/vertices % _))\n      (mapcat #(d/successive-nth 2 (conj % (first %))))\n      (map set))\n     (get _ :faces)))\n\n  g/IFaceAccess\n  (faces\n    ([_] (get _ :faces))\n    ([_ opts]\n     (if opts\n       (map #(g/raw % _) (get _ :faces))\n       (get _ :faces))))\n  (add-face\n    [_ face] (add-face* _ face))\n  (vertex-faces\n    [_ v]\n    (sequence\n     (comp\n      (map #(g/vertices % _))\n      (filter\n       #(pos? #?(:clj (.indexOf ^clojure.lang.PersistentVector % v)\n                 :cljs (d/index-of % v))))\n      (get _ :faces))))\n  (remove-face\n    [_ f]\n    (err/unsupported!)) ;; TODO implement\n\n  g/INormalAccess\n  (face-normals\n    [_ force?] (if (seq (get _ :fnormals)) (get _ :fnormals) (if force? (get (g/compute-face-normals _) :fnormals))))\n  (face-normal\n    [_ f] (get (get _ :fnormals) f))\n  (vertex-normals\n    [_ force?] (if force? (err/unsupported!)))\n  (vertex-normal\n    [_ v] (err/unsupported!))\n  (compute-face-normals\n    [_]\n    (loop [fnorms (transient {}), faces (get _ :faces)]\n      (if faces\n        (let [f (first faces)]\n          (recur (assoc! fnorms f (gu/ortho-normal (g/vertices f _))) (next faces)))\n        (assoc _ :fnormals (persistent! fnorms)))))\n  (compute-vertex-normals\n    [_] (err/unsupported!))\n\n  g/IGeomContainer\n  (into\n    [_ faces] (gu/into-mesh _ add-face* faces))\n\n  g/IClear\n  (clear*\n    [_] (basic-mesh))\n\n  g/IMeshConvert\n  (as-mesh\n    ([_] _)\n    ([_ opts] (g/into (get opts :mesh) (get _ :faces))))\n\n  g/ITessellate\n  (tessellate\n    ([_]      (g/tessellate _ {}))\n    ([_ opts] (gu/map-mesh (or (get opts :fn) (gu/tessellate-face gu/tessellate-with-first)) _)))\n\n  g/IScale\n  (scale\n    [_ s] (gu/transform-mesh _ add-face* #(m/* % s)))\n  (scale-size\n    [_ s]\n    (let [c (g/centroid _)]\n      (gu/transform-mesh _ add-face* #(m/madd (m/- % c) s c))))\n\n  g/ITranslate\n  (translate\n    [_ t] (gu/transform-mesh _ add-face* #(m/+ % t)))\n\n  g/ITransform\n  (transform\n    [_ m]\n    (gu/transform-mesh _ add-face* m))\n\n  g/IVolume\n  (volume\n    [_] (gu/total-volume (mf/xf-face-verts _) (get _ :faces))))\n"]}