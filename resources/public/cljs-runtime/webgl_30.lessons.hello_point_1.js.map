{"version":3,"sources":["webgl_30/lessons/hello_point_1.cljs"],"mappings":";;;;;AAKA,AAAA,AAAA,AAAA,AAAKA;AACL,AAAA,AAAAC,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAW,AAAA,AAACC;;AACrB,AAAM,AAAA,AAAAC,AAAA,AAAOF;AAAb,AACE,AAACG,AAAOH,AAAWL;;AADrB;AAGA,AAAA,AAAKS;AAML,AAAA,AAAKC;AAKL,AAAA,AAAAC,AAAMM,AACHC;AADH,AAAA,AAAAN,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AACaO;AADb,AAGE,AAAAC,AAAMD;AAAN,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AACGC;;AADH,AAAAD,AAEGE,AAAS,AAAoBH;;AAFhC,AAAAC,AAAA,AAAA,AAGGG,AAAe,AAAUJ;;AAH5BC;;AAKF,AAAA,AAAMI;AAAN,AAEE,AAACC,AAAMpB,AAAW,AAAAqB;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAd,AAAA,AAAAc,AAAA,AAAA,AAAA,AAAA,AAAAb,AAAAC,AAAAY,AAAAA;AAAAA,AAAqBC;AAArB,AAAAZ,AAAAW,AAAA,AAAaR;AAAb,AACE,AAAMU,AAAQ,AAACC,AAAeX,AAAGV,AAAcC;AAA/C,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAACqB,AAAMH,AAC6BC;;;AAE5D,AAAA,AAAMG,AACHJ;AADH,AAEE,AAAA,AAACK,AAAM5B,AAAW6B,AAAc,AAACC,AAAyB,AAAKC;AAAL,AAAQ,AAACnB,AAAMmB,AAAER;;;AAE7E,AAAA,AAAA,AAAcS,AACM;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AADpB,AAAA,AAAA,AAAA,AAOoB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAhC,AAAA,AAAA,AAAAA,AAAA,AAACiC,AAED;AAAA,AACE,AAAA,AAAMC;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACGC,AAEwBD,AACA;AAAA,AACE,AACE,AAAA,AAACN,AAAM5B,AAAW6B,AAAU,AAACO,AAAcF;;AAC3C,AAACf;;AACD,AAAA,AAAAjB,AAACyB,AAAW3B","names":["webgl-30.lessons.hello_point_1/initial-state","js/webgl-30","js/webgl-30.lessons","js/webgl-30.lessons.hello_point_1","js/webgl-30.lessons.hello_point_1.state-atom","webgl-30.lessons.hello_point_1/state-atom","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/deref","cljs.core/reset!","webgl-30.lessons.hello_point_1/vertex-shader","webgl-30.lessons.hello_point_1/fragment-shader","p__26662","map__26663","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","webgl-30.lessons.hello_point_1/draw!","_","gl","G__26668","webgl_30.webgl_id2.clear_color_BANG_.cljs$core$IFn$_invoke$arity$variadic","webgl_30.webgl_id2.clear_BANG_.cljs$core$IFn$_invoke$arity$variadic","webgl_30.webgl_id2.draw_arrays_BANG_.cljs$core$IFn$_invoke$arity$variadic","webgl-30.lessons.hello_point_1/setup!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","p__26682","map__26683","state","program","webgl-30.webgl-id2/init-shaders","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","webgl-30.lessons.hello_point_1/raf-draw!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","js/requestAnimationFrame","t","webgl-30.lessons.hello_point_1/lesson","webgl-30.core/get-filename","canvas-id","webgl-30.component/webgl-canvas","webgl-30.webgl-id2/get-context"],"sourcesContent":["(ns webgl-30.lessons.hello_point_1\n  (:require [webgl-30.webgl-id2 :as w]\n            [webgl-30.core :as c]\n            [webgl-30.component :refer [webgl-canvas]]))\n\n(def initial-state {:gl nil})\n(defonce state-atom (atom nil))\n(when (nil? @state-atom)\n  (reset! state-atom initial-state))\n\n(def vertex-shader\n  \"void main() {\n       gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\n       gl_PointSize = 10.0;\n  }\")\n\n(def fragment-shader\n  \"void main() {\n       gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n   }\")\n\n(defn draw!\n  [_ {:keys [gl]}]\n\n  (doto gl\n    (w/clear-color! 0.0 0.0 0.0 1.0)\n    (w/clear! (.-COLOR_BUFFER_BIT gl))\n    (w/draw-arrays! (.-POINTS gl) 0 1)))\n\n(defn setup!\n  []\n  (swap! state-atom (fn [{:keys [gl] :as state}]\n                      (let [program (w/init-shaders gl vertex-shader fragment-shader)]\n                        (assoc state :objects-to-draw\n                                     {:the-object {:program program}})))))\n\n(defn raf-draw!\n  [state]\n  (swap! state-atom assoc :raf-id (js/requestAnimationFrame (fn [t] (draw! t state)))))\n\n(def ^:export lesson\n  {:title           (fn []\n                      [:div\n                       [:h1 {:style {:font-family \"monospace\"}}\n                        \"This is chapter 3 from WebGL Programming Guide Interactive 3D Graphics Programming with WebGL\"]\n                       [:h4 {:style {:font-family \"monospace\"}}\n                        \"HelloPoint by WebGL Programming Guide Interactive 3D Graphics Programming with WebGL by Kouichi Matsuda, Rodger Lea.\"]])\n   :source          (c/get-filename #'state-atom)\n   :tutorial-source \"WebGL Programming Guide Interactive 3D Graphics Programming with WebGL by Kouichi Matsuda, Rodger Lea.\"\n   :start           (fn []\n                      (let [canvas-id \"fundamentals\"]\n                        [webgl-canvas {:height   400\n                                       :width    400\n                                       :id       canvas-id\n                                       :on-mount (fn []\n                                                   (do\n                                                     (swap! state-atom assoc :gl (w/get-context canvas-id))\n                                                     (setup!)\n                                                     (raf-draw! @state-atom)))}]))})\n"]}