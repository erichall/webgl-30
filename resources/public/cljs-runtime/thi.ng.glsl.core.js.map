{"version":3,"sources":["thi/ng/glsl/core.cljc"],"mappings":";;;;AAKA,AAAA,AAAOA,AACJC;AADH,AAEE,AAAA,AAACC,AACAD,AACA,AAAAE;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAME;AAAN,AAAAD,AAAAD,AAAA,AAAA,AAAQG;AAAR,AAAAF,AAAAD,AAAA,AAAA,AAAUI;AAAV,AACE,AACE,AAAA,AAACC,AAAMF;AAAU,AAAA,AAAQC;;AAD3B,AAEE,AAAA,AAAA,AAACE,AAAaF;AAAG,AAAA,AAAKD;;AAFxB,AAGmBD;;;;;;AAExB,AAAA,AAAOK,AACJV;AADH,AAEE,AAAMA,AAAQA,AACA,AAACD,AACD,AAAA,AAAA,AAACE,AACD,AAAA,AAAA,AAACA;AAHf,AAIE,AAAI,AAAA,AAACO,AAAK,AAACG,AAAMX;AACf,AAAA,AAAA,AAAUA;;AACVA;;;AAEN,AAAA,AAAOY,AACJZ;AADH,AACQ,AAAA,AAAA,AAACC,AAAYD;;AAErB,AAAA,AAAMa,AACHb;AADH,AAEE,AAAMA,AAAQA,AACA,AAAA,AAAA,AAACC,AACD,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAACA;AAHf,AAIO,AAAA,AAACa,AAAUd,AACX,AAACe,AAAIL,AACL,AAACM,AAAMC,AACP,AAACL;;AAEV,AAAA,AAAeM;AAGf;;;;;AAAA,AAAMC,AAIHnB;AAJH,AAKE,AAAAoB,AAAW,AAACT,AAAM,AAACW,AAAOJ,AAAQlB;AAAlC,AAAA,AAAAoB;AAAA,AAAAA,AAASC;AAAT,AACE,AAAME,AAAO,AAAA,AAACC,AAAIH;AACZI,AAAO,AAAA,AAACD,AAAIH;AACZK,AAAO,AAACC,AAAI,AAACC,AAAOC,AAAI,AAAA,AAACf,AAAU,AAAA,AAACU,AAAIH;AAF9C,AAAA,AAAA,AAAA,AAAA,AAGgBE,AACAE,AACAC;;AANlB;;;AAgCF,AAAA,AAAA,AAAAI,AAAOE;AAAP,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAOD,AACHE;AADJ,AACU,AAACC,AAAY,AAACC,AAAWF;;;AADnC,AAAA,AAAA,AAAOF,AAEHK,AAAEC;AAFN,AAGK,AAACC,AACA,AAAKF,AAAE/B;AAAP,AAAU,AAAC6B,AAAY,AAACK,AAAWH,AAAEC,AAAKhC,AAAGA;AAC7C+B,AAAE,AAAA,AAAOC;;;AALf,AAAA,AAAA,AAAON;;AAAP,AAOA,AAAA,AAAMS,AACHP;AADH,AAEE,AAAI,AAACL,AAAI,AAAA,AAAOK;AACTA,AACA,AAACQ,AACD,AAACC,AACD,AAAA,AAACC,AACD,AAAC5B,AAAMC;;AACZ,AAAA,AAAMiB;;;AAEV,AAAA,AAAMW,AACHC,AAAK9C;AADR,AAAA,AAAA,AAAA,AACoB8C,AAAU9C","names":["thi.ng.glsl.core/minify-floats","src","clojure.string/replace","p__30462","vec__30465","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","o","d","f","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/every?","thi.ng.glsl.core/minify-line","cljs.core/first","thi.ng.glsl.core/clean-line-breaks","thi.ng.glsl.core/minify","clojure.string.split.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/str","thi.ng.glsl.core/re-meta","thi.ng.glsl.core/extract-glsl-meta","temp__5733__auto__","m","cljs.core/re-seq","return","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","name","args","cljs.core/vec","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/seq","var_args","G__30490","thi.ng.glsl.core/build-graph","js/Error","spec","thi.ng.glsl.core.build_graph.cljs$core$IFn$_invoke$arity$2","com.stuartsierra.dependency/graph","g","curr","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","com.stuartsierra.dependency/depend","thi.ng.glsl.core/assemble","thi.ng.glsl.core.build_graph.cljs$core$IFn$_invoke$arity$1","com.stuartsierra.dependency/topo-sort","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","thi.ng.glsl.core/glsl-spec-plain","deps"],"sourcesContent":["(ns thi.ng.glsl.core\n  (:require\n   [clojure.string :as str]\n   [com.stuartsierra.dependency :as dep]))\n\n(defn- minify-floats\n  [src]\n  (str/replace\n   src #\"(\\d+)\\.(\\d+)\"\n   (fn [[o d f]]\n     (cond\n       (= \"0\" d)        (str \\. f)\n       (every? #{\\0} f) (str d \\.)\n       :else            o))))\n\n(defn- minify-line\n  [src]\n  (let [src (-> src\n                (minify-floats)\n                (str/replace #\"\\s{2,}|\\t\" \"\")\n                (str/replace #\"\\s*(\\{|\\}|\\=|\\*|\\,|\\+|/|\\>|\\<|\\&|\\||\\[|\\]|\\(|\\)|\\-|\\!|\\;)\\s*\" \"$1\"))]\n    (if (= \\# (first src))\n      (str \"\\n\" src \"\\n\")\n      src)))\n\n(defn- clean-line-breaks\n  [src] (str/replace src #\"\\n{2,}\" \"\\n\"))\n\n(defn minify\n  [src]\n  (let [src (-> src\n                (str/replace #\"//.*\" \"\")\n                (str/replace #\"/\\*[\\s\\S]*?\\*/\" \"\")\n                (str/replace #\"^\\n+\" \"\"))]\n    (->> (str/split src #\"\\n\")\n         (map minify-line)\n         (apply str)\n         (clean-line-breaks))))\n\n(def ^:private re-meta\n  #\"((((highp|mediump|lowp)\\s+)?(void|bool|float|int|(b|i)?vec\\d|mat\\d))\\s+([\\w_]+)\\s*\\(([A-Za-z0-9_, ]*)\\)\\s*\\{)\")\n\n(defn extract-glsl-meta\n  \"Attempts to extract function name, return type and args from given\n  GLSL source string. If successful, returns map w/ these\n  keys: :glsl-name :glsl-return :glsl-args\"\n  [src]\n  (if-let [m (first (re-seq re-meta src))]\n    (let [return (nth m 2)\n          name   (nth m 7)\n          args   (vec (filter seq (str/split (nth m 8) #\",\\s*\")))]\n      {:glsl-return return\n       :glsl-name   name\n       :glsl-args   args})))\n\n#?(:clj\n   (defmacro minified\n     [src] `~(minify src)))\n\n#?(:clj\n   (defmacro glsl-spec\n     [deps src] `{:deps ~deps :src (minified ~src)}))\n\n#?(:clj\n   (defmacro glsl-file-spec\n     [deps path] `{:deps ~deps :src (minified ~(slurp path))}))\n\n#?(:clj\n   (defmacro defglsl\n     [name deps src]\n     `(do (def ~name (glsl-spec ~deps ~src))\n          (alter-meta! (var ~name) merge ~(extract-glsl-meta src)))))\n\n#?(:clj\n   (defmacro defglsl-file\n     [name deps path]\n     `(do (def ~name (glsl-file-spec ~deps ~path))\n          (alter-meta! (var ~name) merge ~(extract-glsl-meta (get name :src))))))\n\n(defn- build-graph\n  ([spec] (build-graph (dep/graph) spec))\n  ([g curr]\n     (reduce\n      (fn [g d] (build-graph (dep/depend g curr d) d))\n      g (:deps curr))))\n\n(defn assemble\n  [spec]\n  (if (seq (:deps spec))\n    (->> spec\n         (build-graph)\n         (dep/topo-sort)\n         (mapv :src)\n         (apply str))\n    (:src spec)))\n\n(defn glsl-spec-plain\n  [deps src] {:deps deps :src src})\n"]}