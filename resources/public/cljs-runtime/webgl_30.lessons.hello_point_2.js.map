{"version":3,"sources":["webgl_30/lessons/hello_point_2.cljs"],"mappings":";;;;;AAKA,AAAA,AAAA,AAAA,AAAKA;AACL,AAAA,AAAAC,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAW,AAAA,AAACC;;AACrB,AAAM,AAAA,AAAAC,AAAA,AAAOF;AAAb,AACE,AAACG,AAAOH,AAAWL;;AADrB;AAGA,AAAA,AAAKS;AASL,AAAA,AAAKC;AAKL,AAAA,AAAAC,AAAMM,AACHC;AADH,AAAA,AAAAN,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AACaO;AADb,AAAAH,AAAAJ,AAAA,AACgBQ;AADhB,AAEE,AAAMC,AAAQ,AAAA,AAAA,AAAA,AAACC,AAAOF;AAAtB,AACE,AAAA,AAAA,AAAA,AAACG,AAAmBJ,AAAG,AAAA,AAACK,AAAyBL,AAAGE;;AACpD,AAAA,AAACI,AAAmBN,AAAG,AAAA,AAACK,AAAyBL,AAAGE;;AAEtD,AAAAK,AAAMP;AAAN,AAAA,AAAAO,AAAA,AAAA,AAAA,AAAA,AACGC;;AADH,AAAAD,AAEGE,AAAS,AAAoBT;;AAFhC,AAAAO,AAAA,AAAA,AAGGG,AAAe,AAAUV;;AAH5BO;;AAKF,AAAA,AAAMI;AAAN,AAEE,AAACC,AAAM1B,AAAW,AAAA2B;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApB,AAAA,AAAAoB,AAAA,AAAA,AAAA,AAAA,AAAAnB,AAAAC,AAAAkB,AAAAA;AAAAA,AAAqBC;AAArB,AAAAlB,AAAAiB,AAAA,AAAad;AAAb,AACE,AAAME,AAAQ,AAACc,AAAehB,AAAGV,AAAcC;AAA/C,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC0B,AAAMF,AAC6Bb;;;AAE5D,AAAA,AAAMgB,AACHH;AADH,AAEE,AAAA,AAACI,AAAMjC,AAAWkC,AAAc,AAACC,AAAyB,AAAKC;AAAL,AAAQ,AAACxB,AAAMwB,AAAEP;;;AAE7E,AAAA,AAAA,AAAcQ,AACM;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AADpB,AAAA,AAAA,AAAA,AAOoB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAArC,AAAA,AAAA,AAAAA,AAAA,AAACsC,AAED;AAAA,AACE,AAAA,AAAMC;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACGC,AAEwBD,AACA;AAAA,AACE,AACE,AAAA,AAACN,AAAMjC,AAAWkC,AAAU,AAACO,AAAcF;;AAC3C,AAACd;;AACD,AAAA,AAAAvB,AAAC8B,AAAWhC","names":["webgl-30.lessons.hello_point_2/initial-state","js/webgl-30","js/webgl-30.lessons","js/webgl-30.lessons.hello_point_2","js/webgl-30.lessons.hello_point_2.state-atom","webgl-30.lessons.hello_point_2/state-atom","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/deref","cljs.core/reset!","webgl-30.lessons.hello_point_2/vertex-shader","webgl-30.lessons.hello_point_2/fragment-shader","p__26665","map__26666","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","webgl-30.lessons.hello_point_2/draw!","_","gl","objects-to-draw","program","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","webgl_30.webgl_id2.vertex_attrib_3f.cljs$core$IFn$_invoke$arity$variadic","webgl-30.webgl-id2/get-attribute-location","webgl_30.webgl_id2.vertex_attrib_1f.cljs$core$IFn$_invoke$arity$variadic","G__26681","webgl_30.webgl_id2.clear_color_BANG_.cljs$core$IFn$_invoke$arity$variadic","webgl_30.webgl_id2.clear_BANG_.cljs$core$IFn$_invoke$arity$variadic","webgl_30.webgl_id2.draw_arrays_BANG_.cljs$core$IFn$_invoke$arity$variadic","webgl-30.lessons.hello_point_2/setup!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","p__26705","map__26707","state","webgl-30.webgl-id2/init-shaders","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","webgl-30.lessons.hello_point_2/raf-draw!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","js/requestAnimationFrame","t","webgl-30.lessons.hello_point_2/lesson","webgl-30.core/get-filename","canvas-id","webgl-30.component/webgl-canvas","webgl-30.webgl-id2/get-context"],"sourcesContent":["(ns webgl-30.lessons.hello_point_2\n  (:require [webgl-30.webgl-id2 :as w]\n            [webgl-30.core :as c]\n            [webgl-30.component :refer [webgl-canvas]]))\n\n(def initial-state {:gl nil})\n(defonce state-atom (atom nil))\n(when (nil? @state-atom)\n  (reset! state-atom initial-state))\n\n(def vertex-shader\n  \"\n  attribute vec4 a_position;\n  attribute float a_pointsize;\n  void main() {\n       gl_Position = a_position;\n       gl_PointSize = a_pointsize;\n  }\")\n\n(def fragment-shader\n  \"void main() {\n       gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n   }\")\n\n(defn draw!\n  [_ {:keys [gl objects-to-draw]}]\n  (let [program (get-in objects-to-draw [:the-object :program])]\n    (w/vertex-attrib-3f gl (w/get-attribute-location gl program \"a_position\") 0.9 0.0 0.0)\n    (w/vertex-attrib-1f gl (w/get-attribute-location gl program \"a_pointsize\") 5.0))\n\n  (doto gl\n    (w/clear-color! 0.0 0.0 0.0 1.0)\n    (w/clear! (.-COLOR_BUFFER_BIT gl))\n    (w/draw-arrays! (.-POINTS gl) 0 1)))\n\n(defn setup!\n  []\n  (swap! state-atom (fn [{:keys [gl] :as state}]\n                      (let [program (w/init-shaders gl vertex-shader fragment-shader)]\n                        (assoc state :objects-to-draw\n                                     {:the-object {:program program}})))))\n\n(defn raf-draw!\n  [state]\n  (swap! state-atom assoc :raf-id (js/requestAnimationFrame (fn [t] (draw! t state)))))\n\n(def ^:export lesson\n  {:title           (fn []\n                      [:div\n                       [:h1 {:style {:font-family \"monospace\"}}\n                        \"This is chapter 3 from WebGL Programming Guide Interactive 3D Graphics Programming with WebGL\"]\n                       [:h4 {:style {:font-family \"monospace\"}}\n                        \"HelloPoint - 2 by WebGL Programming Guide Interactive 3D Graphics Programming with WebGL by Kouichi Matsuda, Rodger Lea.\"]])\n   :source          (c/get-filename #'state-atom)\n   :tutorial-source \"WebGL Programming Guide Interactive 3D Graphics Programming with WebGL by Kouichi Matsuda, Rodger Lea.\"\n   :start           (fn []\n                      (let [canvas-id \"fundamentals\"]\n                        [webgl-canvas {:height   400\n                                       :width    400\n                                       :id       canvas-id\n                                       :on-mount (fn []\n                                                   (do\n                                                     (swap! state-atom assoc :gl (w/get-context canvas-id))\n                                                     (setup!)\n                                                     (raf-draw! @state-atom)))}]))})\n\n"]}