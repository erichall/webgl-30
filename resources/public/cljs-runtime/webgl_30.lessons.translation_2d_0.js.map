{"version":3,"sources":["webgl_30/lessons/translation_2d_0.cljs"],"mappings":"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","names":["webgl-30.lessons.translation-2d-0/initial-state","js/webgl-30","js/webgl-30.lessons","js/webgl-30.lessons.translation-2d-0","js/webgl-30.lessons.translation-2d-0.state-atom","webgl-30.lessons.translation-2d-0/state-atom","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/deref","cljs.core/reset!","webgl-30.lessons.translation-2d-0/fragment-shader","webgl-30.lessons.translation-2d-0/vertex-shader","webgl-30.lessons.translation-2d-0/draw!","timestamp","map__26058","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","gl","rect","state","webgl-30.webgl/draw-scene!","map__26073","target","usage","s","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","webgl-30.webgl/buffer-data","js/Float32Array","webgl-30.webgl/get-rectangle","webgl-30.lessons.translation-2d-0/setup!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","p__26100","map__26101","program","webgl-30.webgl/link-shaders!","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","webgl-30.webgl/attribute","webgl-30.lessons.translation-2d-0/lesson","webgl-30.core/get-filename","canvas-id","webgl-30.component/webgl-canvas","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","webgl-30.webgl/get-context","js/requestAnimationFrame","webgl-30.component/slider","val","cljs.core/assoc-in"],"sourcesContent":["(ns webgl-30.lessons.translation-2d-0\n  (:require [reagent.core :as r]\n            [webgl-30.webgl :as webgl]\n            [webgl-30.core :as c]\n            [webgl-30.component :refer [webgl-canvas slider]]))\n\n(def initial-state {:gl   nil\n                    :rect {:x      0\n                           :y      0\n                           :width  100\n                           :height 30\n                           :color  [0.3 0.3 0.3 1]}})\n(defonce state-atom (r/atom nil))\n(when (nil? @state-atom)\n  (reset! state-atom initial-state))\n\n(def fragment-shader\n  \"precision mediump float;\n   uniform vec4 u_color;\n   void main() {\n       gl_FragColor = u_color;\n   }\")\n\n(def vertex-shader\n  \"attribute vec2 a_position;\n\n  uniform vec2 u_resolution;\n\n  void main() {\n       // convert the position from pixels to 0.0 to 1.0\n       vec2 zeroToOne = a_position / u_resolution;\n\n       // convert from 0->1 to 0->2\n       vec2 zeroToTwo = zeroToOne * 2.0;\n\n       // convert from 0->2 to -1->+1 (clip space)\n       vec2 clipSpace = zeroToTwo - 1.0;\n\n       gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1); // * vec(1, -1) flips y so it's top-left corner.\n  }\")\n\n\n\n(defn draw!\n  [timestamp]\n  (let [{:keys [gl rect] :as state} @state-atom]\n\n    (webgl/draw-scene! state)\n    (let [{:keys [target usage] :as s} (get-in state [:objects-to-draw :thing :attributes :a_position])]\n      (webgl/buffer-data gl {:target   target\n                             :src-data (-> (webgl/get-rectangle {:x      (:x rect)\n                                                                 :y      (:y rect)\n                                                                 :width  (:width rect)\n                                                                 :height (:height rect)})\n                                           js/Float32Array.)\n                             :usage    usage}))))\n\n(defn setup!\n  []\n  (-> (swap! state-atom (fn [{:keys [gl rect] :as state}]\n                          (let [program (webgl/link-shaders! gl {:fs fragment-shader :vs vertex-shader})]\n                            (assoc state :objects-to-draw\n                                         {:thing {:program    program\n                                                  :attributes {:a_position (webgl/attribute gl program {:name \"a_position\"\n                                                                                                        :size 2\n                                                                                                        :data (js/Float32Array. (webgl/get-rectangle {:x      (:x rect)\n                                                                                                                                                      :y      (:y rect)\n                                                                                                                                                      :width  (:width rect)\n                                                                                                                                                      :height (:height rect)}))})}\n                                                  :uniforms   {:u_resolution {:name   \"u_resolution\"\n                                                                              :type   \"uniform2f\"\n                                                                              :values [(aget gl \"canvas\" \"width\") (aget gl \"canvas\" \"height\")]}\n                                                               :u_color      {:name   \"u_color\"\n                                                                              :type   \"uniform4f\"\n                                                                              :values (:color rect)}}\n                                                  :element    {:draw-type (.-TRIANGLES gl)\n                                                               :offset    0\n                                                               :count     6}}}))))))\n\n(def ^:export lesson\n  {:title           (fn []\n                      [:div\n                       [:h1 {:style {:font-family \"monospace\"}}\n                        \"Lesson - WebGL 2D Translation\"]\n                       [:h4 {:style {:font-family \"monospace\"}}\n                        \"Translating a rect\"]])\n   :source          (c/get-filename #'state-atom)\n   :tutorial-source \"webgl-2d-translation.html\"\n   :start           (fn []\n                      (let [canvas-id \"translation\"]\n                        [:div {:style {:display        \"flex\"\n                                       :flex-direction \"row\"}}\n                         [webgl-canvas {:height   400\n                                        :width    400\n                                        :id       canvas-id\n                                        :on-mount (fn []\n                                                    (do\n                                                      (swap! state-atom assoc :gl (webgl/get-context canvas-id))\n                                                      (setup!)\n                                                      (js/requestAnimationFrame draw!)))}]\n                         [:div {:style {:margin-left \"30px\"}}\n                          [:div {:style {:display        \"flex\"\n                                         :flex-direction \"row\"}}\n                           [:span {:style {:color        \"white\"\n                                           :margin-right \"10px\"}} \"x\"]\n                           [slider {:on-change (fn [val]\n                                                 (swap! state-atom assoc-in [:rect :x] val)\n                                                 (js/requestAnimationFrame draw!))\n                                    :value     (get-in @state-atom [:rect :x])\n                                    :min       0\n                                    :max       400\n                                    :id        \"x-slider\"}]\n                           [:span {:style {:color        \"white\"\n                                           :margin-right \"10px\"}} (get-in @state-atom [:rect :x])]]\n                          [:div {:style {:display        \"flex\"\n                                         :flex-direction \"row\"}}\n                           [:span {:style {:color        \"white\"\n                                           :margin-right \"10px\"}} \"y\"]\n                           [slider {:on-change (fn [val]\n                                                 (swap! state-atom assoc-in [:rect :y] val)\n                                                 (js/requestAnimationFrame draw!))\n                                    :value     (get-in @state-atom [:rect :y])\n                                    :min       0\n                                    :max       400\n                                    :id        \"y-slider\"}]\n                           [:span {:style {:color        \"white\"\n                                           :margin-right \"10px\"}} (get-in @state-atom [:rect :y])]]]]))})\n"]}