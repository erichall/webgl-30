{"version":3,"sources":["thi/ng/geom/plane.cljc"],"mappings":"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","names":["thi.ng.geom.plane/plane","n","w","thi.ng.geom.types/Plane","thi.ng.math.core.normalize.cljs$core$IFn$_invoke$arity$1","thi.ng.geom.vector.vec3.cljs$core$IFn$_invoke$arity$1","thi.ng.geom.plane/plane-with-point","p","thi.ng.math.core.dot.cljs$core$IFn$_invoke$arity$2","var_args","G__29607","thi.ng.geom.plane/plane-from-points","js/Error","p__29608","vec__29609","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","a","b","c","thi.ng.geom.plane.plane_from_points.cljs$core$IFn$_invoke$arity$3","thi.ng.geom.utils.ortho_normal.cljs$core$IFn$_invoke$arity$3","cljs.core/PROTOCOL_SENTINEL","_","thi.ng.math.core/INF+","s","thi.ng.geom.vector.vec3.cljs$core$IFn$_invoke$arity$3","thi.ng.geom.core/width","thi.ng.geom.core/height","thi.ng.geom.core/depth","thi.ng.geom.types/AABB","thi.ng.geom.core/centroid","thi.ng.math.core.delta_EQ_.cljs$core$IFn$_invoke$arity$3","thi.ng.math.core/abs","cljs.core.get.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.vector/V3X","thi.ng.math.core/*eps*","thi.ng.geom.vector/V3Y","thi.ng.geom.vector/V3Z","thi.ng.geom.types/Sphere","o","thi.ng.math.core._STAR_.cljs$core$IFn$_invoke$arity$2","thi.ng.math.core.signum.cljs$core$IFn$_invoke$arity$2","d","thi.ng.geom.core/dist","p__29653","map__29654","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","thi.ng.xerror.core.unsupported_BANG_.cljs$core$IFn$_invoke$arity$0","thi.ng.math.core._.cljs$core$IFn$_invoke$arity$1","l","vec__29680","q","cljs.core/map?","thi.ng.geom.utils.intersect/intersect-ray-plane?","thi.ng.math.core._.cljs$core$IFn$_invoke$arity$2","ray","vec__29688","dir","thi.ng.geom.utils.intersect/intersect-plane-plane?","thi.ng.geom.utils.intersect/intersect-plane-sphere?","thi.ng.xerror.core.illegal_arg_BANG_.cljs$core$IFn$_invoke$arity$1","p__29671","map__29672","cljs.core.get.cljs$core$IFn$_invoke$arity$3","thi.ng.geom.core.as_mesh.cljs$core$IFn$_invoke$arity$2","width","height","size","mesh","attribs","or__4185__auto__","h","flip?","thi.ng.math.core.delta_EQ_.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.core/closest-point","thi.ng.geom.vector.vec3.cljs$core$IFn$_invoke$arity$0","thi.ng.geom.quaternion.quat.cljs$core$IFn$_invoke$arity$4","thi.ng.geom.quaternion/alignment-quat","face","p1__29629#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","thi.ng.math.core._PLUS_.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.attribs/generate-face-attribs","cljs.core/rseq","thi.ng.geom.core/add-face","thi.ng.geom.basicmesh/basic-mesh","p__29644","map__29645","map__29651","thi.ng.math.core.normalize.cljs$core$IFn$_invoke$arity$2","t","m","thi.ng.geom.core/transform-vector"],"sourcesContent":["(ns thi.ng.geom.plane\n  #?(:cljs (:require-macros [thi.ng.math.macros :as mm]))\n  (:require\n   [thi.ng.geom.core :as g]\n   [thi.ng.geom.utils :as gu]\n   [thi.ng.geom.utils.intersect :as isec]\n   [thi.ng.geom.vector :as v :refer [vec3]]\n   [thi.ng.geom.quaternion :as q]\n   [thi.ng.geom.basicmesh :as bm]\n   [thi.ng.geom.attribs :as attr]\n   #?(:clj [thi.ng.geom.types] :cljs [thi.ng.geom.types :refer [AABB Plane Sphere]])\n   [thi.ng.xerror.core :as err]\n   [thi.ng.math.core :as m :refer [*eps* INF+]]\n   #?(:clj [thi.ng.math.macros :as mm]))\n   #?(:clj (:import [thi.ng.geom.types AABB Plane Sphere])))\n\n;; A plane in cartesian 3D space can be defined as a point `p` lying\n;; on the plane and normal vector `n` standing perpendicular on the\n;; plane. The latter defines the plane's orientation in space.\n\n(defn plane\n  [n w] (Plane. (m/normalize (vec3 n)) w))\n\n(defn plane-with-point\n  [p n]\n  (let [n (m/normalize (vec3 n))]\n    (Plane. n (- (m/dot n p)))))\n\n(defn plane-from-points\n  ([[a b c]] (plane-from-points a b c))\n  ([a b c]\n   (let [n (gu/ortho-normal a b c)]\n     (Plane. n (- (m/dot n a))))))\n\n(extend-type Plane\n\n  g/IArea\n  (area [_] INF+)\n\n  g/IBounds\n  (bounds\n    [_]\n    (let [s (vec3 (g/width _) (g/height _) (g/depth _))]\n      (AABB. (m/madd s -0.5 (g/centroid _)) s)))\n  (width\n    [_] (if (m/delta= (m/abs (get _ :n)) v/V3X *eps*) 0.0 INF+))\n  (height\n    [_] (if (m/delta= (m/abs (get _ :n)) v/V3Y *eps*) 0.0 INF+))\n  (depth\n    [_] (if (m/delta= (m/abs (get _ :n)) v/V3Z *eps*) 0.0 INF+))\n\n  g/IBoundingSphere\n  (bounding-sphere\n    [_] (Sphere. (g/centroid _) INF+))\n\n  g/ICenter\n  (center\n    ([_] (Plane. (get _ :n) 0))\n    ([_ o] (plane-with-point o (get _ :n))))\n  (centroid\n    ([_] (m/* (get _ :n) (- (get _ :w)))))\n\n  g/IClassify\n  (classify-point\n    [_ p]\n    (-> (get _ :n) (m/dot p) (+ (get _ :w)) (m/signum *eps*)))\n\n  g/IDistance\n  (dist\n    [_ p] (+ (m/dot (get _ :n) p) (get _ :w)))\n  (dist-squared\n    [_ p] (let [d (g/dist _ p)] (* d d)))\n\n  g/IExtrude\n  (extrude [_ {}] (err/unsupported!))\n\n  g/IFlip\n  (flip\n    [_] (Plane. (m/- (get _ :n)) (- (get _ :w))))\n\n  g/IIntersect\n  (intersect-line\n    ([_ l]\n     (let [[p q] (if (map? l) (get l :points) l)]\n       (isec/intersect-ray-plane? p (m/- q p) (get _ :n) (get _ :w))))\n    ([_ p q]\n     (isec/intersect-ray-plane? p (m/- q p) (get _ :n) (get _ :w))))\n  (intersect-ray\n    ([_ ray]\n     (let [[p dir] (if (map? ray) [(get ray :p) (get ray :dir)] ray)]\n       (isec/intersect-ray-plane? p dir (get _ :n) (get _ :w))))\n    ([_ p dir]\n     (isec/intersect-ray-plane? p dir (get _ :n) (get _ :w))))\n  (intersect-shape\n    [_ s]\n    (cond\n      (instance? Plane s)\n      (isec/intersect-plane-plane? (get _ :n) (get _ :w) (get s :n) (get s :w))\n      (instance? Sphere s)\n      (isec/intersect-plane-sphere? (get _ :n) (get _ :w) (get s :p) (get s :r))\n      :default (err/illegal-arg! s)))\n\n  g/IMeshConvert\n  (as-mesh\n    ([_] (g/as-mesh _ {}))\n    ([_ {:keys [p width height size mesh attribs] :or {size 1.0}}]\n     (let [w     (* (or width size) 0.5)\n           h     (* (or height size) 0.5)\n           flip? (m/delta= -1.0 (m/dot (get _ :n) v/V3Z))\n           p     (g/closest-point _ (or p (vec3)))\n           q     (if flip?\n                   (q/quat 0 0 0 1)\n                   (q/alignment-quat v/V3Z (get _ :n)))\n           face  (mapv\n                  #(m/+ p (g/transform-vector q %))\n                  [(vec3 (- w) (- h) 0) (vec3 (- w) h 0)\n                   (vec3 w h 0) (vec3 w (- h) 0)])\n           face  (attr/generate-face-attribs (if flip? face (rseq face)) 0 attribs nil)]\n       (g/add-face (or mesh (bm/basic-mesh)) face))))\n\n  g/IProximity\n  (closest-point\n    [{:keys [n] :as _} p]\n    (->> p\n         (m/dot n)\n         (+ (get _ :w))\n         (m/normalize n)\n         (m/- p)))\n\n  g/IScale\n  (scale\n    [_ s] (plane-with-point (m/* (g/centroid _) s) (get _ :n)))\n  (scale-size\n    ([_ s] _))\n\n  g/ITranslate\n  (translate\n    [_ t] (plane-with-point (m/+ (g/centroid _) t) (get _ :n)))\n\n  g/ITransform\n  (transform\n    [_ m] (plane-with-point\n           (g/transform-vector m (g/centroid _))\n           (g/transform-vector m (get _ :n))))\n\n  g/IVolume\n  (volume [_] 0.0))\n"]}