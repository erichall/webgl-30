{"version":3,"sources":["webgl_30/webgl_id2.cljs"],"mappings":"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","names":["webgl-30.webgl-id2/gl-invoke","gl","fn","args","res","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","cljs.core/js-invoke","webgl-30.webgl-id2/get-context","canvas-id","js/document.getElementById","webgl-30.webgl-id2/get-canvas","webgl-30.webgl-id2/canvas-height","webgl-30.webgl-id2/canvas-width","webgl-30.webgl-id2/shader-source","shader","source","webgl-30.webgl-id2/compile-shader","webgl-30.webgl-id2/get-shader-parameter","param","webgl-30.webgl-id2/get-shader-info-log","webgl-30.webgl-id2/load-shader","type","G__26505","cljs.core/not","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","webgl-30.webgl-id2/cp","webgl-30.webgl-id2/link-program","program","webgl-30.webgl-id2/attach-shader","s","webgl-30.webgl-id2/get-program-parameter","webgl-30.webgl-id2/get-program-info-log","webgl-30.webgl-id2/create-program","vertex-shader","fragment-shader","vs","fs","or__4185__auto__","G__26506","webgl-30.webgl-id2/use-program","webgl-30.webgl-id2/init-shaders","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","webgl-30.webgl-id2/clear-color!","seq26507","G__26508","cljs.core/first","cljs.core/next","self__4776__auto__","colors","webgl-30.webgl-id2/clear!","seq26518","G__26519","bits","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/bit-or","webgl-30.webgl-id2/draw-arrays!","seq26533","G__26534","webgl-30.webgl-id2/get-location","name","loc","webgl-30.webgl-id2/get-attribute-location","webgl-30.webgl-id2/get-uniform-location","js/Error","webgl-30.webgl-id2/vertex-attrib-invoke","attrib","location","cljs.core/cons","webgl-30.webgl-id2/vertex-attrib-3f","seq26572","G__26573","G__26574","webgl-30.webgl-id2/vertex-attrib-1f","seq26598","G__26599","G__26600","webgl-30.webgl-id2/uniform4f","seq26610","G__26611","G__26612","webgl-30.webgl-id2/uniform2f","seq26629","G__26630","G__26631","webgl-30.webgl-id2/create-buffer","webgl-30.webgl-id2/bind-buffer!","target","buffer","webgl-30.webgl-id2/buffer-data!","data","usage","webgl-30.webgl-id2/vertex-attrib-pointer","seq26632","G__26633","webgl-30.webgl-id2/enable-vertex-attrib-array!","seq26634","G__26635","p__26636","map__26637","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","webgl-30.webgl-id2/initialize-vertex-buffer!","attribute","map__26639","cljs.core.get.cljs$core$IFn$_invoke$arity$3","size","normalized","stride","offset","G__26641","webgl_30.webgl_id2.vertex_attrib_pointer.cljs$core$IFn$_invoke$arity$variadic","webgl_30.webgl_id2.enable_vertex_attrib_array_BANG_.cljs$core$IFn$_invoke$arity$variadic","p__26642","map__26643","webgl-30.webgl-id2/refresh-vertex-buffer!","G__26645","p__26646","map__26647","webgl-30.webgl-id2/attribute","p__26649","map__26650","webgl-30.webgl-id2/uniform","G__26653","webgl-30.webgl-id2/set-viewport!","width","height","webgl_30.webgl_id2.set_viewport_BANG_.cljs$core$IFn$_invoke$arity$1","p__26654","map__26655","webgl-30.webgl-id2/rect","x","y","x1","x2","y1","y2"],"sourcesContent":["(ns webgl-30.webgl-id2)\n\n(defn- gl-invoke\n  [gl fn args]\n  (let [res (apply js-invoke gl fn args)]\n    (if res\n      res\n      gl)))\n\n(defn get-context\n  [canvas-id]\n  (-> (js/document.getElementById canvas-id)\n      (.getContext \"webgl\")))\n\n(defn get-canvas\n  [gl]\n  (aget gl \"canvas\"))\n\n(defn canvas-height\n  [gl]\n  (aget gl \"canvas\" \"height\"))\n\n(defn canvas-width\n  [gl]\n  (aget gl \"canvas\" \"width\"))\n\n\n(defn shader-source [gl shader source] (.shaderSource gl shader source) gl)\n(defn compile-shader [gl shader] (.compileShader gl shader))\n(defn get-shader-parameter [gl shader param] (.getShaderParameter gl shader param))\n(defn get-shader-info-log [gl shader] (.getShaderInfoLog gl shader))\n(defn load-shader\n  \"Create a WebGL shader object\"\n  [gl type source]\n  (let [shader (.createShader gl type)]\n    (doto gl\n      (shader-source shader source)\n      (compile-shader shader))\n\n    (if-not (get-shader-parameter gl shader (.-COMPILE_STATUS gl))\n      (println \"Failed to compile shader: \" (get-shader-info-log gl shader))\n      shader)))\n\n(defn- cp [gl] (.createProgram gl))\n(defn link-program [gl program] (.linkProgram gl program))\n(defn attach-shader [gl program s] (.attachShader gl program s))\n(defn get-program-parameter [gl program param] (.getProgramParameter gl program param))\n(defn get-program-info-log [gl program] (.getProgramInfoLog gl program))\n(defn create-program\n  [gl vertex-shader fragment-shader]\n  (let [vs (load-shader gl (.-VERTEX_SHADER gl) vertex-shader)\n        fs (load-shader gl (.-FRAGMENT_SHADER gl) fragment-shader)]\n\n    (when-not (or fs vs)\n      (println \"Unable to load shaders...\"))\n\n    (let [program (cp gl)]\n      (when-not program\n        (println \"Unable to create program...\"))\n\n\n      (doto gl\n        (attach-shader program vs)\n        (attach-shader program fs)\n        (link-program program))\n\n      (if-not (get-program-parameter gl program (.-LINK_STATUS gl))\n        (println \"Unable to link program...\" (get-program-info-log gl program))\n        program))))\n\n(defn use-program [gl program] (.useProgram gl program))\n(defn init-shaders\n  \"Create a program with the given shaders and make it current.\n  Returns the program\"\n  [gl vs fs]\n  (let [program (create-program gl vs fs)]\n    (use-program gl program)\n    program))\n\n\n(defn clear-color!\n  [gl & colors]\n  (gl-invoke gl \"clearColor\" colors))\n\n(defn clear!\n  [gl & bits]\n  (gl-invoke gl \"clear\" [(apply bit-or bits)]))\n\n(defn draw-arrays!\n  [gl & args]\n  (gl-invoke gl \"drawArrays\" args))\n\n(defn- get-location\n  [gl program type name]\n  (let [loc (gl-invoke gl type [program name])]\n    (if (< loc 0)\n      (println \"Failed to get location of \" name \" of type \" type)\n      loc)))\n\n(defn get-attribute-location\n  [gl program name]\n  (get-location gl program \"getAttribLocation\" name))\n\n(defn get-uniform-location\n  [gl program name]\n  (get-location gl program \"getUniformLocation\" name))\n\n(defn vertex-attrib-invoke\n  [gl attrib location args]\n  {:pre [(some? location)]}\n  (gl-invoke gl (str \"vertexAttrib\" attrib) (cons location args)))\n\n(defn vertex-attrib-3f [gl location & args] (vertex-attrib-invoke gl \"3f\" location args))\n(defn vertex-attrib-1f [gl location & args] (vertex-attrib-invoke gl \"1f\" location args))\n\n(defn uniform4f [gl location & args] (gl-invoke gl \"uniform4f\" (cons location args)))\n(defn uniform2f [gl location & args] (gl-invoke gl \"uniform2f\" (cons location args)))\n\n(defn create-buffer\n  [gl]\n  (.createBuffer gl))\n\n(defn bind-buffer!\n  [gl target buffer]\n  (.bindBuffer gl target buffer))\n\n(defn buffer-data!\n  \"Allocate storage and write the data specified by data to the buffer object bound to target.\"\n  [gl target data usage]\n  (.bufferData gl target data usage))\n\n(defn vertex-attrib-pointer\n  [gl & args]\n  (gl-invoke gl \"vertexAttribPointer\" args))\n\n(defn enable-vertex-attrib-array!\n  [gl & location]\n  (gl-invoke gl \"enableVertexAttribArray\" location))\n\n(defn initialize-vertex-buffer!\n  \"Five steps to pass data to a vertex shader\n    1) Create a buffer.\n    2) Bind that buffer.\n    3) Write data to that buffer.\n    4) Assign the buffer to an attribute.\n    5) Enable the assignment.\"\n  [gl {:keys [target data usage attribute]}]\n  (let [buffer (create-buffer gl)\n        target (or target (.-ARRAY_BUFFER gl))\n        usage (or usage (.-STATIC_DRAW gl))]\n    (when-not buffer\n      (println \"Failed to create a buffer object\"))\n\n    ;; bind the buffer object to the target.\n    (bind-buffer! gl target buffer)\n\n\n    (when (> (.-length data) 0)\n      ;; write data into the buffer\n      (buffer-data! gl target data usage))\n\n    ;; assign the buffer object bound to `target` to an attribute variable\n    (let [{:keys [location size type normalized stride offset]\n           :or   {type       (.-FLOAT gl)\n                  normalized false\n                  stride     0\n                  offset     0}} attribute]\n      (doto gl\n        (vertex-attrib-pointer location size type normalized stride offset)\n        ;; enable the assignment\n        (enable-vertex-attrib-array! location)))\n\n    {:buffer buffer\n     :target target\n     :data   data\n     :usage  usage}))\n\n(defn refresh-vertex-buffer!\n  [gl {:keys [buffer target data usage]}]\n  (doto gl\n    (bind-buffer! target buffer)\n    (buffer-data! target data usage)))\n\n(defn attribute\n  [gl program {:keys [name size type normalized stride offset]}]\n  {:location   (get-attribute-location gl program name)\n   :size       size\n   :type       (or type (.-FLOAT gl))\n   :normalized (or normalized false)\n   :stride     (or stride 0)\n   :offset     (or offset 0)})\n\n(defn uniform\n  [gl program {:keys [name]}]\n  {:location (get-uniform-location gl program name)})\n\n(defn set-viewport!\n  ([gl]\n   (let [width (canvas-width gl)\n         height (canvas-height gl)]\n     (.viewport gl 0 0 width height)\n     gl))\n  ([gl width height]\n   (if (and (some? width) (some? height))\n     (do (.viewport gl 0 0 width height) gl)\n     (set-viewport! gl))))\n\n(defn rect\n  [{:keys [x y width height]}]\n  (let [x1 x\n        x2 (+ x width)\n        y1 y\n        y2 (+ y height)]\n    [x1 y1\n     x2 y1\n     x1 y2\n     x1 y2\n     x2 y1\n     x2 y2]))\n\n"]}