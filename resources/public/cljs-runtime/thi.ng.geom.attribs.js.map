{"version":3,"sources":["thi/ng/geom/attribs.cljc"],"mappings":"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","names":["thi.ng.geom.attribs/face-attribs","fattribs","fid","vid","_","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.attribs/const-face-attribs","thi.ng.geom.attribs/generate-face-attribs","verts","face-id","attribs","opts","cljs.core/seq","cljs.core/reduce-kv","acc","k","f","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","p1__29335#","p2__29336#","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","var_args","G__29351","thi.ng.geom.attribs/supplied-attrib","js/Error","attrib","id","cljs.core.get.cljs$core$IFn$_invoke$arity$2","tx","G__29357","G__29363","thi.ng.geom.attribs/uv-rect-for-size","w","thi.ng.geom.attribs.uv_rect_for_size.cljs$core$IFn$_invoke$arity$2","h","thi.ng.geom.attribs.uv_rect_for_size.cljs$core$IFn$_invoke$arity$6","x","y","uw","vh","u","v","iu","iv","p1__29360#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","thi.ng.math.core._PLUS_.cljs$core$IFn$_invoke$arity$3","thi.ng.geom.vector.vec2.cljs$core$IFn$_invoke$arity$2","G__29369","thi.ng.geom.attribs/uv-cube-map-h","thi.ng.geom.attribs.uv_cube_map_h.cljs$core$IFn$_invoke$arity$2","pow2?","tw","thi.ng.math.core/ceil-pow2","fw","p1__29367#","cljs.core.range.cljs$core$IFn$_invoke$arity$1","G__29379","thi.ng.geom.attribs/uv-cube-map-v","thi.ng.geom.attribs.uv_cube_map_v.cljs$core$IFn$_invoke$arity$2","th","fh","p1__29375#","thi.ng.geom.attribs/uv-default-rect","thi.ng.geom.vector.vec2.cljs$core$IFn$_invoke$arity$0","thi.ng.geom.vector.vec2.cljs$core$IFn$_invoke$arity$1","thi.ng.geom.attribs/uv-faces","cljs.core.repeat.cljs$core$IFn$_invoke$arity$1","p__29384","map__29385","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","thi.ng.geom.attribs/uv-tube","du","dv","G__29388","p__29391","map__29392","thi.ng.geom.attribs/uv-flat-disc","theta","r","G__29394","Math/cos","Math/sin","thi.ng.geom.attribs/uv-polygon-disc","res","thi.ng.math.core/norm-range","p1__29395#","thi.ng.math.core._PLUS_.cljs$core$IFn$_invoke$arity$2","thi.ng.math.core/TWO_PI"],"sourcesContent":["(ns thi.ng.geom.attribs\n  #?(:cljs (:require-macros [thi.ng.math.macros :as mm]))\n  (:require\n   [thi.ng.geom.core :as g]\n   [thi.ng.geom.utils :as gu]\n   [thi.ng.geom.vector :as v :refer [vec2 vec3]]\n   [thi.ng.geom.matrix :refer [M44]]\n   [thi.ng.math.core :as m]\n   #?(:clj [thi.ng.math.macros :as mm])))\n\n;; This namespace provides vertex attribute generators and utilities used\n;; by various other geom namespaces to simplify the creation of\n;; attributed meshes.\n;;\n;; This project uses a functional approach for vertex attribute\n;; generation and relies on attribute generator fns accepting these 4\n;; arguments, in order:\n;;\n;; | *Arg*       | *Type*    | *Description*                                            |\n;; |-------------+-----------+----------------------------------------------------------|\n;; | `face-id`   | int       | ID of face currently being generated                     |\n;; | `vertex-id` | int       | ID of vertex in current face (usually 0-3 or 0-4)        |\n;; | `vertex`    | vec2/vec3 | the actual vertex                                        |\n;; | `opts`      | map       | extra data supplied by type to help w/ attrib generation |\n;;\n;; ** Types supporting attribute generation\n;;\n;; Eventually, all shape types provided will support vertex attribute\n;; generation as part of their `g/as-mesh` implementations. At current,\n;; this is only supported by the following implementations, though. Since\n;; UV texture coordinates are one of the most common applications of\n;; vertex attributes, the table also lists which attribute generator\n;; should/could be used for each type.\n;;\n;; *Note:* Vertex attributes are only supported by the following mesh types:\n;;\n;; - `thi.ng.geom.IndexedMesh`\n;; - `thi.ng.geom.gl.GLMesh`\n;; - `thi.ng.geom.gl.IndexedGLMesh`\n;;\n;; | *Type*          | *UV generation examples*                                              |\n;; |-----------------+-----------------------------------------------------------------------|\n;; | AABB            | `(g/as-mesh a {:mesh ... :attribs {:uv (attr/uv-cube-map-v)}})`       |\n;; | Circle          | `(g/as-mesh a {:mesh ... :attribs {:uv attr/uv-flat-disc}})`          |\n;; | Cuboid          | `(g/as-mesh a {:mesh ... :attribs {:uv (attr/uv-cube-map-v)}})`       |\n;; | Polygon2        | `(g/as-mesh a {:mesh ... :attribs {:uv (attr/supplied-attrib :uv)}})` |\n;; | Polyhedron mesh | `(polyhedron-mesh f {:mesh ... :attribs {:uv ...}})`                  |\n;; | PTF             | `(g/as-mesh a {:mesh ... :attribs {:uv attr/uv-tube}})`               |\n;; | Rect2           | `(g/as-mesh a {:mesh ... :attribs {:uv (attr/supplied-attrib :uv)}})` |\n;; | Sphere          | `(g/as-mesh a {:mesh ... :attribs {:uv (attr/supplied-attrib :uv)}})` |\n;;\n;; ** Attribute generation & application\n\n(defn face-attribs\n  \"Vertex attribute generator using given seq of attribs. The seq\n  should contain at least the same number of elements as there are\n  faces to be generated. Each item itself is a vector of attrib\n  values (in vertex order) to be assigned to each vertex. Returns\n  generator fn.\"\n  [fattribs] (fn [fid vid _ _] (-> fattribs (nth fid) (nth vid))))\n\n(defn const-face-attribs\n  \"Similar to face-attribs fn, but for attributes which are constant\n  for all vertices of a single face. Takes a seq of attrib values and\n  returns generator fn.\"\n  [fattribs] (fn [fid _ _ _] (nth fattribs fid)))\n\n(defn generate-face-attribs\n  \"Takes a vector of face vertices, face id, a map of vertex attribute\n  generator fns and an options arg passed to the attribute generator\n  fns. Returns 2-elem vector of [verts vert-attribs]. The generator\n  fns themselves take these 4 args and should return the attribute for\n  a single vertex: face-id, vertex-id, vertex, opts (a map).\"\n  [verts face-id attribs opts]\n  [verts\n   (when (seq attribs)\n     (reduce-kv\n      (fn [acc k f] (assoc acc k (map-indexed #(f face-id % %2 opts) verts)))\n      {} attribs))])\n\n;; ** Attribute generation\n;; *** Generic\n;;\n;; Several types provide useful additional data to attribute generator\n;; functions, which sometimes even is directly usable as attribute\n;; values. E.g. the sphere type's =as-mesh= implementation internally\n;; requires UV coordinates, which then are also supplied to attribute\n;; generators and can directly be harnessed for the actual vertex\n;; attributes.\n;;\n;; In general, if available, this kind of additional data is provided via\n;; a map as the 4th argument to an attribute generator fn. The following\n;; generic helper function can be used to select such a pre-computed\n;; attribute value (and optionally transform it).\n\n(defn supplied-attrib\n  \"Higher order helper, returns attribute generator fn for types which\n  emit pre-computed values as part of their `as-mesh` impl. Takes\n  attrib key and for each vertex looks up value in opts map (which is\n  supplied by supporting types, e.g. sphere). If called via 2 args,\n  the looked up values will also be passed to transformation fn (2nd\n  arg).\"\n  ([attrib] (fn [_ id _ opts] (-> opts (get attrib) (nth id))))\n  ([attrib tx] (fn [_ id _ opts] (-> opts (get attrib) (nth id) tx))))\n\n;; *** UV texture coordinates\n;; **** Cube\n\n(defn uv-rect-for-size\n  ([w] (uv-rect-for-size w w))\n  ([w h] (uv-rect-for-size w w 0.0 0.0 1.0 1.0))\n  ([w h x y uw vh]\n   (let [u  (* 0.5 (/ uw w))\n         v  (* 0.5 (/ vh h))\n         iu (- uw u)\n         iv (- vh v)]\n     (mapv #(m/+ % x y) [(vec2 u v) (vec2 iu v) (vec2 iu iv) (vec2 u iv)]))))\n\n(defn uv-cube-map-h\n  ([h] (uv-cube-map-h h false))\n  ([h pow2?]\n   (let [w  (* h 6)\n         tw (if pow2? (m/ceil-pow2 w) w)\n         fw (/ (/ w tw) 6.0)]\n     (mapv #(uv-rect-for-size h h (* % fw) 0.0 fw 1.0) (range 6)))))\n\n(defn uv-cube-map-v\n  ([h] (uv-cube-map-v h false))\n  ([w pow2?]\n   (let [h  (* w 6)\n         th (if pow2? (m/ceil-pow2 h) h)\n         fh (/ (/ h th) 6.0)]\n     (mapv #(uv-rect-for-size w w 0.0 (* % fh) 1.0 fh) (range 6)))))\n\n(def uv-default-rect [(vec2) (vec2 1.0 0.0) (vec2 1.0) (vec2 0.0 1.0)])\n\n(def uv-faces (face-attribs (repeat uv-default-rect)))\n\n;; **** Tube\n;;\n;; Tube UV mapping is currently only supported by the following implementations:\n;;\n;; - PTF `sweep-mesh`\n\n(defn uv-tube\n  \"Generates tubular UV coordinates, using data provided in\n  options map (:u :v :du :dv keys)\"\n  [_ vid _ {:keys [u v du dv]}]\n  (case (int vid)\n    0 (v/vec2 u v)\n    1 (v/vec2 (+ u du) v)\n    2 (v/vec2 (+ u du) (+ v dv))\n    (v/vec2 u (+ v dv))))\n\n;; **** Disc\n\n(defn uv-flat-disc\n  \"Generates UV coordinates for a circle/trianglefan, using data\n  provided in options map (:theta & :r keys). The first vertex of each\n  triangle is assumed to be in the center of the circle, the other 2\n  vertices are located at the circles perimeter.\"\n  [_ vid _ {:keys [theta r] :as opts}]\n  (case (int vid)\n    0 (vec2 0.5)\n    1 (vec2 (mm/madd (Math/cos theta) r 0.5)\n            (mm/madd (Math/sin theta) r 0.5))\n    (let [theta (+ theta (get opts :delta))]\n      (vec2 (mm/madd (Math/cos theta) r 0.5)\n            (mm/madd (Math/sin theta) r 0.5)))))\n\n(defn uv-polygon-disc\n  \"HOF UV generator for polygons/polyhedras. Takes polygon resolution\n  and computes N UV coords, returns generator fn\"\n  [res]\n  (->> res\n       m/norm-range\n       (mapv #(m/+ (g/as-cartesian (vec2 0.5 (* % m/TWO_PI))) 0.5))\n       repeat\n       face-attribs))\n"]}