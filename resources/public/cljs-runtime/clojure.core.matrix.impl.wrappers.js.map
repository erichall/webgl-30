{"version":3,"sources":["clojure/core/matrix/impl/wrappers.cljc"],"mappings":"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","names":["cljs.core/PROTOCOL_SENTINEL","this__4428__auto__","writer__4429__auto__","opt__4430__auto__","cljs.core/-write","clojure.core.matrix.impl.wrappers/ScalarWrapper","clojure.core.matrix.impl.wrappers/->ScalarWrapper","value","m","length","clojure.core.matrix.protocols/new-vector","rows","columns","clojure.core.matrix.protocols/new-matrix","dims","clojure.core.matrix.protocols/new-matrix-nd","data","cljs.core/long","clojure.core.matrix.protocols/dimensionality","clojure.core.matrix.protocols/is-scalar?","clojure.core.matrix.protocols/get-0d","clojure.core.matrix.protocols/clone","dimension-number","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","row","column","indexes","cljs.core/seq","x","v","y","cljs.core/not","cljs.core/count","clojure.core.matrix.impl.wrappers/SliceWrapper","clojure.core.matrix.impl.wrappers/->SliceWrapper","array","slice","clojure.core.matrix.protocols/get-major-slice-seq","clojure.core.matrix.protocols/construct-matrix","cljs.core/next","clojure.core.matrix.protocols/get-shape","clojure.core.matrix.protocols/dimension-count","clojure.core.matrix.protocols/get-2d","clojure.core.matrix.protocols/get-nd","cljs.core/cons","clojure.core.matrix.protocols/get-1d","clojure.core.matrix.protocols/set-1d!","clojure.core.matrix.protocols/is-vector?","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","clojure.core.matrix.protocols/convert-to-nested-vectors","clojure.core.matrix.protocols/set-2d!","clojure.core.matrix.protocols/set-nd!","clojure.core.matrix.protocols/is-mutable?","G__33888","G__33889","clojure.core.matrix.impl.wrappers/wrap-slice","clojure.core.matrix.impl.wrappers/NDWrapper","clojure.core.matrix.impl.wrappers/->NDWrapper","shape","dim-map","index-maps","source-position","i","clojure.core.matrix.protocols/get-major-slice","not-found","cljs.core/integer?","clojure.core.matrix.protocols/set-1d","clojure.core.matrix.protocols/coerce-param","clojure.core.matrix.implementations.get_canonical_object.cljs$core$IFn$_invoke$arity$0","clojure.core.matrix.protocols/set-2d","clojure.core.matrix.protocols/set-nd","start","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","vlen","end","old-index-map","new-index-map","cljs.core.long_array.cljs$core$IFn$_invoke$arity$1","n__4666__auto__","clojure.core.matrix.utils.long_array_of.cljs$core$IFn$_invoke$arity$1","clojure.core.matrix.utils.object_array_of.cljs$core$IFn$_invoke$arity$1","clojure.core.matrix.utils/copy-long-array","ix","im","i33927","tdim__33736__auto__","i33928","i33929","i33930","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","i33923","i33924","i33925","n","cljs.core/vec","i33926","dim","nsp","sdim","n__26316__auto__","length__26317__auto__","new-xs__26318__auto__","j__26319__auto__","clojure.core.matrix.protocols/persistent-vector-coerce","cljs.core/type","clojure.core.matrix.impl.wrappers/wrap-nd","shp","clojure.core.matrix.utils/long-range","cljs.core.object_array.cljs$core$IFn$_invoke$arity$1","p1__33931#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.range.cljs$core$IFn$_invoke$arity$1","clojure.core.matrix.impl.wrappers/wrap-selection","indices","cljs.core/long-array","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","clojure.core.matrix.impl.wrappers/wrap-submatrix","dim-ranges","_","cljs.core.mapv.cljs$core$IFn$_invoke$arity$3","a","cnt","new-shape","p__33932","vec__33933","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","len","p__33936","vec__33937","cljs.core.range.cljs$core$IFn$_invoke$arity$2","clojure.core.matrix.impl.wrappers/wrap-broadcast","target-shape","tshape","tdims","mshape","mdims","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__4582__auto__","s__33941","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","b__33943","cljs.core/chunk-buffer","i__33942","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__33940","cljs.core/chunk-rest","cljs.core/first","cljs.core/rest","arr","mdim","mdc","tdc","clojure.core.matrix.impl.wrappers/wrap-scalar","clojure.core.matrix.implementations.register_implementation.cljs$core$IFn$_invoke$arity$1","cljs.core/chunk-first"],"sourcesContent":["(ns clojure.core.matrix.impl.wrappers\n  \"Implementations for specialised wrapper types.\n\n   These wrapper types enable efficient of convenient implementation of various core.matrix protocols.\"\n  (:require [clojure.core.matrix.protocols :as mp]\n            [clojure.core.matrix.implementations :as imp]\n            [clojure.core.matrix.impl.persistent-vector]\n            [clojure.core.matrix.utils :as u])\n  #?(:clj (:require\n            [clojure.core.matrix.macros :refer [TODO error]]\n            [clojure.core.matrix.macros-clj :refer [abutnth areverse]])\n     :cljs (:require-macros\n             [clojure.core.matrix.macros :refer [TODO error c-for]]\n             [clojure.core.matrix.macros-cljs :refer [abutnth areverse]]\n             [clojure.core.matrix.impl.wrappers :refer [set-source-index]]))\n  #?(:clj\n      (:import [clojure.lang Seqable Indexed])))\n\n;; =============================================\n;; WRAPPER IMPLEMENTATIONS\n;;\n;; wrappers are used to implement specific shapes / types of arrays\n;; that are useful to implement certain array operations (typically as return values)\n\n#?(:clj (do\n(set! *warn-on-reflection* true)\n(set! *unchecked-math* :warn-on-boxed)\n))\n\n(declare wrap-slice wrap-nd wrap-scalar)\n\n;; =============================================\n;; ScalarWrapper\n;;\n;; wraps a single scalar as a mutable 0-D array\n\n(deftype ScalarWrapper [^{:volatile-mutable true} value]\n  Object\n    (toString [m] (str value))\n\n  mp/PImplementation\n    (implementation-key [m]\n      :scalar-wrapper)\n    ;; we delegate to persistent-vector implementation for new matrices.\n    (meta-info [m]\n      {:doc \"Wraps a single scalar as a mutable 0-D array\"})\n    (new-vector [m length]\n      (mp/new-vector [] length))\n    (new-matrix [m rows columns]\n      (mp/new-matrix [] rows columns))\n    (new-matrix-nd [m dims]\n      (mp/new-matrix-nd [] dims))\n    (construct-matrix [m data]\n      (if (== 0 (long (mp/dimensionality data)))\n        (if (mp/is-scalar? data)\n          (ScalarWrapper. data)\n          (ScalarWrapper. (mp/get-0d data)))\n        (mp/clone data)))\n    (supports-dimensionality? [m dims]\n      (== (long dims) 0))\n\n  mp/PDimensionInfo\n    (dimensionality [m]\n      0)\n    (get-shape [m]\n      [])\n    (is-scalar? [m]\n      false) ;; note that a ScalarWrapper is not itself a scalar!!\n    (is-vector? [m]\n      false)\n    (dimension-count [m dimension-number]\n      (error \"Can't get dimension-count of ScalarWrapper: no dimensions exist\"))\n\n  mp/PIndexedAccess\n    (get-1d [m row]\n      (error \"Can't get-1d on ScalarWrapper.\"))\n    (get-2d [m row column]\n      (error \"Can't get-2d on ScalarWrapper.\"))\n    (get-nd [m indexes]\n      (if (seq indexes)\n        (error \"Can't get-1d on ScalarWrapper.\")\n        value))\n\n  mp/PIndexedSetting\n    (set-1d [m x v]\n      (error \"Can't do 1D set on 0D array\"))\n    (set-2d [m x y v]\n      (error \"Can't do 2D set on 0D array\"))\n    (set-nd [m indexes v]\n      (if (not (seq indexes))\n        (ScalarWrapper. v)\n        (error \"Can't set on 0D array with dimensionality: \" (count indexes))))\n    (is-mutable? [m] true)\n\n  ;; in nested vector format, we don't want the wrapper....\n  mp/PConversion\n    (convert-to-nested-vectors [m]\n      value)\n\n  mp/PZeroDimensionAccess\n    (get-0d [m]\n      value)\n    (set-0d! [m v]\n      (set! value v))\n\n  mp/PMatrixCloning\n    (clone [m] (ScalarWrapper. value)))\n\n;; =============================================\n;; SliceWrapper\n;;\n;; wraps a row-major slice of an array\n\n(deftype SliceWrapper [array ^long slice]\n  #?(:clj Seqable :cljs ISeqable)\n    (#?(:clj seq :cljs -seq) [m]\n      (mp/get-major-slice-seq m))\n\n  mp/PImplementation\n    (implementation-key [m]\n      :slice-wrapper)\n    ;; we delegate to persistent-vector implementation for new matrices.\n    (meta-info [m]\n      {:doc \"Wraps a row-major slice of an array\"})\n    (new-vector [m length]\n      (mp/new-vector [] length))\n    (new-matrix [m rows columns]\n      (mp/new-matrix [] rows columns))\n    (new-matrix-nd [m dims]\n      (mp/new-matrix-nd [] dims))\n    (construct-matrix [m data]\n      (mp/construct-matrix [] data))\n    (supports-dimensionality? [m dims]\n      true)\n\n  mp/PDimensionInfo\n    (dimensionality [m]\n      (dec (long (mp/dimensionality array))))\n    (get-shape [m]\n      (next (mp/get-shape array)))\n    (is-scalar? [m]\n      false)\n    (is-vector? [m]\n      (== 2 (long (mp/dimensionality array)))) ;; i.e. the slice has dimensionality 1\n    (dimension-count [m dimension-number]\n      (let [dimension-number (long dimension-number)]\n        (if (< dimension-number 0)\n         (error \"Can't access negative dimension!\")\n         (mp/dimension-count array (inc dimension-number)))))\n\n  mp/PIndexedAccess\n    (get-1d [m row]\n      (mp/get-2d array slice row))\n    (get-2d [m row column]\n      (mp/get-nd array [slice row column]))\n    (get-nd [m indexes]\n      (mp/get-nd array (cons slice indexes)))\n\n  mp/PZeroDimensionAccess\n    (get-0d [m]\n      (mp/get-1d array slice))\n    (set-0d! [m value]\n      (mp/set-1d! array slice value))\n\n  mp/PConversion\n    (convert-to-nested-vectors [m]\n      (if (mp/is-vector? array)\n        (mp/get-1d array slice)\n        (mapv mp/convert-to-nested-vectors (mp/get-major-slice-seq m))))\n\n  mp/PIndexedSetting\n    (set-1d [m row v]\n      (let [m (mp/clone m)]\n        (mp/set-1d! m row v)\n        m))\n    (set-2d [m row column v]\n      (let [m (mp/clone m)]\n        (mp/set-2d! m row column v)\n        m))\n    (set-nd [m indexes v]\n      (let [m (mp/clone m)]\n        (mp/set-nd! m indexes v)\n        m))\n    (is-mutable? [m]\n      (mp/is-mutable? array)) ;; i.e. is the underlying array mutable\n\n  mp/PIndexedSettingMutable\n    (set-1d! [m row v]\n      (mp/set-2d! array slice row v))\n    (set-2d! [m row column v]\n      (mp/set-nd! array [slice row column] v))\n    (set-nd! [m indexes v]\n      (mp/set-nd! array (cons slice indexes) v))\n\n  mp/PMatrixCloning\n    (clone [m] (wrap-slice (mp/clone array) slice))\n\n  Object\n    (toString [m] (str (mp/convert-to-nested-vectors m))))\n\n\n;; =============================================\n;; NDWrapper\n;;\n;; wraps an N-dimensional subset or broadcast of an array\n;; supports aritrary permutations of dimensions and indexes\n#?(:clj\n(defmacro set-source-index\n  \"Sets up an index into the source vector for dimension i at position val\"\n  [ix i val]\n  (let [isym (gensym \"i\")]\n    `(let [~isym ~i\n           tdim# (aget ~'dim-map ~isym)]\n       (when (>= tdim# 0)\n         (aset ~ix tdim# (aget ~(vary-meta `(aget ~'index-maps ~isym) assoc :tag 'longs) ~val))))))\n)\n\n(deftype NDWrapper\n  [array ;; source array (any valid core.matrix matrix)\n   ^longs shape ;; shape of NDWrapper\n   ^longs dim-map ;; map of NDWrapper dimensions to source dimensions\n   ^objects index-maps ;; maps of each NDWrapper dimension's indexes to source dimension indexes\n   ^longs source-position ;; position in source array for non-specified dimensions\n   ]\n  #?(:clj Seqable :cljs ISeqable)\n    (#?(:clj seq :cljs -seq) [m]\n      (mp/get-major-slice-seq m))\n\n  #?(:clj Indexed :cljs IIndexed)\n    (#?(:clj nth :cljs -nth) [m i]\n      (mp/get-major-slice m i))\n\n    (#?(:clj nth :cljs -nth) [m i not-found]\n      (if (and (integer? i) (<= 0 i) (< i (aget shape 0)))\n        (mp/get-major-slice m i)\n        not-found))\n\n    #?(:cljs ICounted)\n    (#?(:clj count :cljs -count) [m]\n      (aget shape 0))\n\n  mp/PImplementation\n    (implementation-key [m]\n      :nd-wrapper)\n    ;; we delegate to persistent-vector implementation for new matrices.\n    (meta-info [m]\n      {:doc \"Wraps an N-dimensional subset or broadcast of an array\"})\n    (new-vector [m length]\n      (mp/new-vector [] length))\n    (new-matrix [m rows columns]\n      (mp/new-matrix [] rows columns))\n    (new-matrix-nd [m dims]\n      (mp/new-matrix-nd [] dims))\n    (construct-matrix [m data]\n      (mp/construct-matrix [] data))\n    (supports-dimensionality? [m dims]\n      true)\n\n  mp/PIndexedSetting\n    (set-1d [m x v]\n      (mp/set-1d (mp/coerce-param (imp/get-canonical-object) m) x v))\n    (set-2d [m x y v]\n      (mp/set-2d (mp/coerce-param (imp/get-canonical-object) m) x y v))\n    (set-nd [m indexes v]\n      (mp/set-nd (mp/coerce-param (imp/get-canonical-object) m) indexes v))\n    (is-mutable? [m] (mp/is-mutable? array))\n\n  mp/PSubVector\n    (subvector [m start length]\n      (when (not= 1 (alength shape)) (error \"Can't take subvector: wrong dimensionality = \" (alength shape)))\n      (let [vlen (long (aget shape 0))\n            start (long start)\n            length (long length)\n            end (+ start length)\n            ^longs old-index-map (aget index-maps 0)\n            ^longs new-index-map (long-array length)]\n        (when (< start 0) (error \"Start index out of bounds: \" start))\n        (when (> end vlen) (error \"End index out of bounds: \" end))\n        (dotimes [i length]\n          (aset new-index-map i (aget old-index-map (+ start i))))\n        (NDWrapper.\n          array\n          (u/long-array-of length)\n          dim-map\n          (u/object-array-of new-index-map)\n          (u/copy-long-array source-position))))\n\n  mp/PDimensionInfo\n    (dimensionality [m]\n      (alength shape))\n    (get-shape [m]\n      shape)\n    (is-scalar? [m]\n      false)\n    (is-vector? [m]\n      (== 1 (alength shape)))\n    (dimension-count [m dimension-number]\n      (aget shape (int dimension-number)))\n\n  mp/PZeroDimensionAccess\n    (get-0d [m]\n      (mp/get-nd array source-position))\n    (set-0d! [m value]\n      (mp/set-nd! array source-position value))\n\n  mp/PIndexedAccess\n    (get-1d [m row]\n      (let [ix (u/copy-long-array source-position)\n            ^longs im (aget index-maps 0)]\n        (set-source-index ix 0 row)\n        (mp/get-nd array ix)))\n    (get-2d [m row column]\n      (let [ix (u/copy-long-array source-position)]\n        (set-source-index ix 0 row)\n        (set-source-index ix 1 column)\n        (mp/get-nd array ix)))\n    (get-nd [m indexes]\n      (let [^longs ix (u/copy-long-array source-position)]\n        (dotimes [i (alength shape)]\n          (set-source-index ix i (nth indexes i)))\n        (mp/get-nd array ix)))\n\n    mp/PIndexedSettingMutable\n    (set-1d! [m row v]\n      (let [ix (u/copy-long-array source-position)\n            ^longs im (aget index-maps 0)]\n        (set-source-index ix 0 row)\n        (mp/set-nd! array ix v)))\n    (set-2d! [m row column v]\n      (let [ix (u/copy-long-array source-position)]\n        (set-source-index ix 0 row)\n        (set-source-index ix 1 column)\n        (mp/set-nd! array ix v)))\n    (set-nd! [m indexes v]\n      (let [^longs ix (u/copy-long-array source-position)\n            n (alength shape)]\n        (when (not= n (count indexes))\n          (error \"set-nd! called with index \" (vec indexes) \" indexes on wrapped array of shape \" shape))\n        (dotimes [i (alength shape)]\n          (set-source-index ix i (nth indexes i)))\n        (mp/set-nd! array ix v)))\n\n    mp/PSliceView2\n      (get-slice-view [m dim i]\n        (let [i (long i)\n              dim (long dim)\n              nsp (u/copy-long-array source-position)\n              sdim (long (aget dim-map dim))]\n          (aset nsp sdim i)\n          (NDWrapper. array\n                      (abutnth dim shape)\n                      (abutnth dim dim-map)\n                      (abutnth dim index-maps)\n                      nsp)))\n\n  Object\n    (toString [m]\n      (str (mp/persistent-vector-coerce m))))\n\n(defn wrap-slice\n  \"Creates a view of a major slice of an array.\"\n  ([m slice]\n    (let [slice (long slice)]\n      (when (>= slice (long (mp/dimension-count m 0)))\n        (error \"Slice \" slice \" does not exist on \" (#?(:clj class :cljs type) m)))\n      (SliceWrapper. m slice))))\n\n(defn wrap-nd\n  \"Wraps an array in a NDWrapper view. Useful for taking submatrices, subviews etc.\"\n  ([m]\n      (let [shp (long-array (mp/get-shape m))\n            dims (alength shp)]\n        (NDWrapper. m\n                  shp\n                  (u/long-range dims)\n                  (object-array (map #(u/long-range (mp/dimension-count m %)) (range dims)))\n                  (long-array dims)))))\n\n(defn wrap-selection\n  \"Wraps an array using a selection of indexes for each dimension.\"\n  [m indices]\n  (let [shp (long-array (map count indices))\n        dims (count shp)]\n    (NDWrapper.\n      m\n      shp\n      (long-array (range dims))\n      (object-array (map long-array indices))\n      (long-array (repeat dims 0)))))\n\n(defn wrap-submatrix\n  \"Wraps an array using a selection of [start length] ranges for each dimension.\"\n  [m dim-ranges]\n  (let [shp (mp/get-shape m)\n        dims (count shp)\n        _ (if-not (== dims (count dim-ranges)) (error \"submatrix ranges \" dim-ranges \" do not match matrix dimensionality of \" shp))\n        dim-ranges (mapv (fn [a cnt] (if a (vec a) [0 cnt])) dim-ranges shp)\n        new-shape (long-array (map (fn [[start len]] len) dim-ranges))]\n    (NDWrapper.\n      m\n      new-shape\n      (long-array (range (count shp)))\n      (object-array\n        (map (fn [[^long start ^long len]] (long-array (range start (+ start len))))\n             dim-ranges))\n      (long-array (repeat dims 0)))))\n\n(defn wrap-broadcast\n  \"Wraps an array with broadcasting to the given target shape.\"\n  [m target-shape]\n  (let [tshape (long-array target-shape)\n        tdims (alength tshape)\n        mshape (long-array (mp/get-shape m))\n        mdims (alength mshape)\n        dim-map (long-array (concat (repeat (- tdims mdims) -1) (range mdims)))]\n    (NDWrapper.\n      m\n      tshape\n      dim-map\n      (object-array\n        (for [i (range tdims)]\n          (let [i (long i)\n                arr (long-array (aget tshape i))\n                mdim (- i (- tdims mdims))]\n            (when (>= mdim 0)\n              (let [mdc (aget mshape mdim)\n                    tdc (aget tshape i)]\n                (cond\n                  (== mdc 1) nil\n                  (== mdc tdc) (dotimes [i mdc] (aset arr i i))\n                  :else (error \"Can't broadcast shape \" (seq mshape)\n                               \" to target shape \" (seq tshape)))))\n            arr)))\n      (long-array mdims))))\n\n(defn wrap-scalar\n  \"Wraps a scalar value into a mutable 0D array.\"\n  ([m]\n      (cond\n        (mp/is-scalar? m)\n          (ScalarWrapper. m)\n        :else\n          (ScalarWrapper. (mp/get-0d m)))))\n\n;; note we construct these types directly because default implementations are not yet loaded\n;; i.e. the wrap-xxxx functions will probably not yet work\n(imp/register-implementation (ScalarWrapper. 13))\n\n(imp/register-implementation (NDWrapper. [1]\n                                         (long-array 0)\n                                         (long-array 0)\n                                         (object-array 0)\n                                         (long-array [0])))\n\n;(imp/register-implementation (SliceWrapper. [1 2] 0))\n"]}