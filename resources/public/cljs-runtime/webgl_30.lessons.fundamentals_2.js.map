{"version":3,"sources":["webgl_30/lessons/fundamentals_2.cljs"],"mappings":";;;;;;AAMA,AAAA,AAAA,AAAA,AAAKA;AACL,AAAA,AAAAC,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAW,AAAA,AAACC;;AACrB,AAAM,AAAA,AAAAC,AAAA,AAAOF;AAAb,AACE,AAACG,AAAOH,AAAWL;;AADrB;AAGA,AAAA,AAAKS;AAOL,AAAA,AAAKC;AAkBL,AAAA,AAAMC,AACHC;AADH,AAEE,AAAA,AAAAL,AAACM,AAAmBR;;AAEtB,AAAA,AAAMS;AAAN,AAEM,AAACC,AAAMV,AAAW,AAAAW;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAAqBM;AAArB,AAAAF,AAAAJ,AAAA,AAAaK;AAAb,AAYE,AAAA,AAACE,AAAMD,AAAuB,AAACE,AAAO,AAAKC,AAAIC;AAAT,AACE,AAAMC,AAAQ,AAAA,AAAA,AAAA,AAACC,AAAoBP,AAAQb,AAAoBC;AAA/D,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACc,AAAME,AAAI,AAACI,AAAQ,AAAKH,AACDC,AACa,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACG,AAAgBT,AAAGM,AAEe,AAAAI,AAAkB,AAACC,AAAO,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAA6B,AAAA,AAACC,AACD,AAAA,AAACA,AACD,AAAA,AAACA,AACD,AAAA,AAACA,AAC/B,AAAA,AAAA,AAAA,AAAA,AAAA,AAACD,AAA6B,AAAA,AAACC,AACD,AAAA,AAACA,AACD,AAAA,AAACA,AACD,AAAA,AAACA,AAGhF,AAAA,AAAA,AAAMb,AAAqB,AAAA,AAAA,AAAMA,AAGjC,AAACc,AACD,AAACA,AACD,AAACA,AAEd,AAAad;AAvB7D,AAyB2D,AAAA,AAACe;;;AAEpH,AAAA,AAAA,AAAcC,AACM;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AADpB,AAAA,AAAA,AAAA,AAOoB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAjC,AAAA,AAAA,AAAAA,AAAA,AAACkC,AAED;AAAA,AACE,AAAA,AAAMC;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACGC,AAEwBD,AACA;AAAA,AACE,AACE,AAAA,AAACE,AAAMrC,AAAWsC,AAAU,AAACC,AAAkBJ;;AAC/C,AAAC1B;;AACD,AAAC+B,AAAyBlC","names":["webgl-30.lessons.fundamentals-2/initial-state","js/webgl-30","js/webgl-30.lessons","js/webgl-30.lessons.fundamentals-2","js/webgl-30.lessons.fundamentals-2.state-atom","webgl-30.lessons.fundamentals-2/state-atom","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/deref","cljs.core/reset!","webgl-30.lessons.fundamentals-2/fragment-shader","webgl-30.lessons.fundamentals-2/vertex-shader","webgl-30.lessons.fundamentals-2/draw!","timestamp","webgl-30.webgl/draw-scene!","webgl-30.lessons.fundamentals-2/setup!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","p__26130","map__26134","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","gl","state","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","acc","i","program","webgl-30.webgl/link-shaders!","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","webgl-30.webgl/attribute","js/Float32Array","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","webgl-30.webgl/get-rectangle","webgl-30.math/random-int","js/Math.random","cljs.core.range.cljs$core$IFn$_invoke$arity$1","webgl-30.lessons.fundamentals-2/lesson","webgl-30.core/get-filename","canvas-id","webgl-30.component/webgl-canvas","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","webgl-30.webgl/get-context","js/requestAnimationFrame"],"sourcesContent":["(ns webgl-30.lessons.fundamentals-2\n  (:require [webgl-30.webgl :as webgl]\n            [webgl-30.math :as math]\n            [webgl-30.core :as c]\n            [webgl-30.component :refer [webgl-canvas]]))\n\n(def initial-state {:gl nil})\n(defonce state-atom (atom nil))\n(when (nil? @state-atom)\n  (reset! state-atom initial-state))\n\n(def fragment-shader\n  \"precision mediump float;\n   uniform vec4 u_color;\n   void main() {\n       gl_FragColor = u_color;\n   }\")\n\n(def vertex-shader\n  \"attribute vec2 a_position;\n\n  uniform vec2 u_resolution;\n\n  void main() {\n       // convert the position from pixels to 0.0 to 1.0\n       vec2 zeroToOne = a_position / u_resolution;\n\n       // convert from 0->1 to 0->2\n       vec2 zeroToTwo = zeroToOne * 2.0;\n\n       // convert from 0->2 to -1->+1 (clip space)\n       vec2 clipSpace = zeroToTwo - 1.0;\n\n       gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1); // * vec(1, -1) flips y so it's top-left corner.\n  }\")\n\n(defn draw!\n  [timestamp]\n  (webgl/draw-scene! @state-atom))\n\n(defn setup!\n  []\n  (-> (swap! state-atom (fn [{:keys [gl] :as state}]\n                          ;; AT INIT TIME\n                          ;;  create shaders, program and locations\n                          ;;  create buffers and call bufferData to upload vertex data\n                          ;; AT RENDER TIME\n                          ;;  clear stuff\n                          ;;  use object program\n                          ;;  for each thing to draw, setup attributes ;; WHAT DOES SETUP attributes mean??\n                          ;;        and for each attribute, call bindBuffer, vertexAttribPointer, enableVertexAttribArray\n                          ;;  for each thing to draw, setup uniforms\n                          ;;        call gl.uniformXXX for each thing\n                          ;;  then call drawArrays for each thing, or with an arg to all of them\n                          (assoc state :objects-to-draw (reduce (fn [acc i]\n                                                                  (let [program (webgl/link-shaders! gl {:fs fragment-shader :vs vertex-shader})]\n                                                                    (assoc acc (keyword (str i))\n                                                                               {:program    program\n                                                                                :attributes {:a_position (webgl/attribute gl program {:name \"a_position\"\n                                                                                                                                      :size 2\n                                                                                                                                      :data (js/Float32Array. (concat (webgl/get-rectangle {:x      (math/random-int 300)\n                                                                                                                                                                                            :y      (math/random-int 300)\n                                                                                                                                                                                            :width  (math/random-int 300)\n                                                                                                                                                                                            :height (math/random-int 300)})\n                                                                                                                                                                      (webgl/get-rectangle {:x      (math/random-int 300)\n                                                                                                                                                                                            :y      (math/random-int 300)\n                                                                                                                                                                                            :width  (math/random-int 300)\n                                                                                                                                                                                            :height (math/random-int 300)})))})}\n                                                                                :uniforms   {:u_resolution {:name   \"u_resolution\"\n                                                                                                            :type   \"uniform2f\"\n                                                                                                            :values [(aget gl \"canvas\" \"width\") (aget gl \"canvas\" \"height\")]}\n                                                                                             :u_color      {:name   \"u_color\"\n                                                                                                            :type   \"uniform4f\"\n                                                                                                            :values [(js/Math.random)\n                                                                                                                     (js/Math.random)\n                                                                                                                     (js/Math.random)\n                                                                                                                     1]}}\n                                                                                :element    {:draw-type (.-TRIANGLES gl)\n                                                                                             :offset    0\n                                                                                             :count     12}}))) {} (range 10)))))))\n\n(def ^:export lesson\n  {:title           (fn []\n                      [:div\n                       [:h1 {:style {:font-family \"monospace\"}}\n                        \"Lesson - WebGL Fundamentals\"]\n                       [:h4 {:style {:font-family \"monospace\"}}\n                        \"Lots of random boxes, not optimal..\"]])\n   :source          (c/get-filename #'state-atom)\n   :tutorial-source \"webgl-fundamentals.html\"\n   :start           (fn []\n                      (let [canvas-id \"fundamentals\"]\n                        [webgl-canvas {:height   400\n                                       :width    400\n                                       :id       canvas-id\n                                       :on-mount (fn []\n                                                   (do\n                                                     (swap! state-atom assoc :gl (webgl/get-context canvas-id))\n                                                     (setup!)\n                                                     (js/requestAnimationFrame draw!)))}]))})\n"]}