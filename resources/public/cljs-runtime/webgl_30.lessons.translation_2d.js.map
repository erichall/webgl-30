{"version":3,"sources":["webgl_30/lessons/translation_2d.cljs"],"mappings":"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","names":["webgl-30.lessons.translation-2d/initial-state","js/webgl-30","js/webgl-30.lessons","js/webgl-30.lessons.translation-2d","js/webgl-30.lessons.translation-2d.state-atom","webgl-30.lessons.translation-2d/state-atom","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/deref","cljs.core/reset!","webgl-30.lessons.translation-2d/fragment-shader","webgl-30.lessons.translation-2d/vertex-shader","webgl-30.lessons.translation-2d/draw!","timestamp","map__54627","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","gl","objects-to-draw","rect","state","webgl-30.webgl/draw-scene!","seq__54629","cljs.core/seq","chunk__54630","count__54631","i__54632","map__54637","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","map__54639","cljs.core/first","cljs.core/next","buffer-info","webgl-30.webgl/buffer-data","js/Float32Array","webgl-30.webgl/get-rectangle","webgl-30.lessons.translation-2d/setup!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","p__54641","map__54642","program","webgl-30.webgl/link-shaders!","webgl-30.webgl/create-buffer","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","webgl-30.webgl/get-uniform-location","webgl-30.lessons.translation-2d/lesson","canvas-id","webgl-30.component/webgl-canvas","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","webgl-30.webgl/get-context","js/requestAnimationFrame","webgl-30.component/slider","val","cljs.core/assoc-in","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns webgl-30.lessons.translation-2d\n  (:require [reagent.core :as r]\n            [webgl-30.webgl :as webgl]\n            [webgl-30.math :as math]\n            [webgl-30.component :refer [webgl-canvas slider]]))\n\n(def initial-state {:gl   nil\n                    :rect {:x      0\n                           :y      0\n                           :width  100\n                           :height 30\n                           :color  [0.3 0.3 0.3 1]}})\n(defonce state-atom (r/atom nil))\n(when (nil? @state-atom)\n  (reset! state-atom initial-state))\n\n(def fragment-shader\n  \"precision mediump float;\n   uniform vec4 u_color;\n   void main() {\n       gl_FragColor = u_color;\n   }\")\n\n(def vertex-shader\n  \"attribute vec2 a_position;\n\n  uniform vec2 u_resolution;\n\n  void main() {\n       // convert the position from pixels to 0.0 to 1.0\n       vec2 zeroToOne = a_position / u_resolution;\n\n       // convert from 0->1 to 0->2\n       vec2 zeroToTwo = zeroToOne * 2.0;\n\n       // convert from 0->2 to -1->+1 (clip space)\n       vec2 clipSpace = zeroToTwo - 1.0;\n\n       gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1); // * vec(1, -1) flips y so it's top-left corner.\n  }\")\n\n\n\n(defn draw!\n  [timestamp]\n  (let [{:keys [gl objects-to-draw rect] :as state} @state-atom]\n\n    (webgl/draw-scene! state)\n\n    (doseq [{:keys [buffer-info]} objects-to-draw]\n      (webgl/buffer-data gl {:target   (:target buffer-info)\n                             :src-data (-> (webgl/get-rectangle {:x      (:x rect)\n                                                                 :y      (:y rect)\n                                                                 :width  (:width rect)\n                                                                 :height (:height rect)})\n                                           js/Float32Array.)\n                             :usage    (:usage buffer-info)}))))\n\n(defn setup!\n  []\n  (-> (swap! state-atom (fn [{:keys [gl rect] :as state}]\n                          (let [program (webgl/link-shaders! gl {:fs fragment-shader :vs vertex-shader})\n                                buffer-info (webgl/create-buffer gl\n                                                                 {:data   (js/Float32Array. (webgl/get-rectangle {:x      (:x rect)\n                                                                                                                  :y      (:y rect)\n                                                                                                                  :width  (:width rect)\n                                                                                                                  :height (:height rect)}))\n                                                                  :usage  (.-STATIC_DRAW gl)\n                                                                  :target (.-ARRAY-BUFFER gl)})]\n                            (assoc state :objects-to-draw\n                                         [{:program     program\n                                           :buffer-info buffer-info\n                                           :attributes  [{:location    (.getAttribLocation gl program \"a_position\")\n                                                          :size        2\n                                                          :type        (.-FLOAT gl)\n                                                          :normalize   false\n                                                          :stride      0\n                                                          :offset      0\n                                                          :buffer-info buffer-info}]\n                                           :uniforms    [{:location (webgl/get-uniform-location gl program \"u_resolution\")\n                                                          :type     \"uniform2f\"\n                                                          :values   [(aget gl \"canvas\" \"width\") (aget gl \"canvas\" \"height\")]}\n                                                         {:location (webgl/get-uniform-location gl program \"u_color\")\n                                                          :type     \"uniform4f\"\n                                                          :values   (:color rect)}]\n                                           :element     {:draw-type (.-TRIANGLES gl)\n                                                         :offset    0\n                                                         :count     6}}]))))))\n\n(def ^:export lesson\n  {:title           (fn []\n                      [:div\n                       [:h1 {:style {:font-family \"monospace\"}}\n                        \"Lesson - WebGL Fundamentals\"]\n                       [:h4 {:style {:font-family \"monospace\"}}\n                        \"Translating a rect\"]])\n   :source          \"https://github.com/erichall/webgl-30/blob/master/src/webgl_30/lessons/translation_2d.cljs\"\n   :tutorial-source \"https://webglfundamentals.org/webgl/lessons/webgl-2d-translation.html\"\n   :start           (fn []\n                      (let [canvas-id \"translation\"]\n                        [:div {:style {:display        \"flex\"\n                                       :flex-direction \"row\"}}\n                         [webgl-canvas {:height   400\n                                        :width    400\n                                        :id       canvas-id\n                                        :on-mount (fn []\n                                                    (do\n                                                      (swap! state-atom assoc :gl (webgl/get-context canvas-id))\n                                                      (setup!)\n                                                      (js/requestAnimationFrame draw!)))}]\n                         [:div {:style {:margin-left \"30px\"}}\n                          [:div {:style {:display        \"flex\"\n                                         :flex-direction \"row\"}}\n                           [:span {:style {:color        \"white\"\n                                           :margin-right \"10px\"}} \"x\"]\n                           [slider {:on-change (fn [val]\n                                                 (swap! state-atom assoc-in [:rect :x] val)\n                                                 (js/requestAnimationFrame draw!))\n                                    :value     (get-in @state-atom [:rect :x])\n                                    :min       0\n                                    :max       400\n                                    :id        \"x-slider\"}]\n                           [:span {:style {:color        \"white\"\n                                           :margin-right \"10px\"}} (get-in @state-atom [:rect :x])]]\n                          [:div {:style {:display        \"flex\"\n                                         :flex-direction \"row\"}}\n                           [:span {:style {:color        \"white\"\n                                           :margin-right \"10px\"}} \"y\"]\n                           [slider {:on-change (fn [val]\n                                                 (swap! state-atom assoc-in [:rect :y] val)\n                                                 (js/requestAnimationFrame draw!))\n                                    :value     (get-in @state-atom [:rect :y])\n                                    :min       0\n                                    :max       400\n                                    :id        \"y-slider\"}]\n                           [:span {:style {:color        \"white\"\n                                           :margin-right \"10px\"}} (get-in @state-atom [:rect :y])]]]]))})\n"]}