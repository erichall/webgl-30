{"version":3,"sources":["thi/ng/dstruct/streams.cljc"],"mappings":";;;AAOA,AAAA;AAAA,AAEA,AAAA;AAAA;;;AAAA,AAAamB;;AAAb,AAAA,AACGjB,AAAgBkB;AADnB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACmBA,AAAAA;AADnB,AACmBA,AAAAA;;AADnB,AAAApB,AAAA,AAAA,AAAA,AAAA,AACmBoB,AAAAA;AADnBnB,AAAA,AAAAC,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACmBmB,AAAAA;;AADnB,AAAAhB,AAAA,AAAAF,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACmBgB,AAAAA;;AADnB,AAAA,AAAAf,AAAA,AACmBe;;;;;;AADnB,AAAA,AAEGd,AAAYc;AAFf,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEeA,AAAAA;AAFf,AAEeA,AAAAA;;AAFf,AAAApB,AAAA,AAAA,AAAA,AAAA,AAEeoB,AAAAA;AAFfnB,AAAA,AAAAK,AAAA,AAAAH,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAEemB,AAAAA;;AAFf,AAAAhB,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAF,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAEegB,AAAAA;;AAFf,AAAA,AAAAf,AAAA,AAEee;;;;;;AAFf,AAAA,AAGGb,AAAgBa;AAHnB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGmBA,AAAAA;AAHnB,AAGmBA,AAAAA;;AAHnB,AAAApB,AAAA,AAAA,AAAA,AAAA,AAGmBoB,AAAAA;AAHnBnB,AAAA,AAAAM,AAAA,AAAAJ,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAGmBmB,AAAAA;;AAHnB,AAAAhB,AAAA,AAAAG,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAGmBgB,AAAAA;;AAHnB,AAAA,AAAAf,AAAA,AAGmBe;;;;;;AAHnB,AAAA,AAIGZ,AAAgBY;AAJnB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAImBA,AAAAA;AAJnB,AAImBA,AAAAA;;AAJnB,AAAApB,AAAA,AAAA,AAAA,AAAA,AAImBoB,AAAAA;AAJnBnB,AAAA,AAAAO,AAAA,AAAAL,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAImBmB,AAAAA;;AAJnB,AAAAhB,AAAA,AAAAI,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAJ,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAImBgB,AAAAA;;AAJnB,AAAA,AAAAf,AAAA,AAImBe;;;;;;AAJnB,AAAA,AAKGX,AAAgBW;AALnB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAKmBA,AAAAA;AALnB,AAKmBA,AAAAA;;AALnB,AAAApB,AAAA,AAAA,AAAA,AAAA,AAKmBoB,AAAAA;AALnBnB,AAAA,AAAAQ,AAAA,AAAAN,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAKmBmB,AAAAA;;AALnB,AAAAhB,AAAA,AAAAK,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAL,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAKmBgB,AAAAA;;AALnB,AAAA,AAAAf,AAAA,AAKmBe;;;;;;AALnB,AAAA,AAMGV,AAAgBU;AANnB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAMmBA,AAAAA;AANnB,AAMmBA,AAAAA;;AANnB,AAAApB,AAAA,AAAA,AAAA,AAAA,AAMmBoB,AAAAA;AANnBnB,AAAA,AAAAS,AAAA,AAAAP,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAMmBmB,AAAAA;;AANnB,AAAAhB,AAAA,AAAAM,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAN,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAMmBgB,AAAAA;;AANnB,AAAA,AAAAf,AAAA,AAMmBe;;;;;;AANnB,AAAA,AAOGT,AAAeS;AAPlB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAOkBA,AAAAA;AAPlB,AAOkBA,AAAAA;;AAPlB,AAAApB,AAAA,AAAA,AAAA,AAAA,AAOkBoB,AAAAA;AAPlBnB,AAAA,AAAAU,AAAA,AAAAR,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAOkBmB,AAAAA;;AAPlB,AAAAhB,AAAA,AAAAO,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAP,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAOkBgB,AAAAA;;AAPlB,AAAA,AAAAf,AAAA,AAOkBe;;;;;;AAPlB,AAAA,AAQGR,AAAeQ;AARlB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAQkBA,AAAAA;AARlB,AAQkBA,AAAAA;;AARlB,AAAApB,AAAA,AAAA,AAAA,AAAA,AAQkBoB,AAAAA;AARlBnB,AAAA,AAAAW,AAAA,AAAAT,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAQkBmB,AAAAA;;AARlB,AAAAhB,AAAA,AAAAQ,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAR,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAQkBgB,AAAAA;;AARlB,AAAA,AAAAf,AAAA,AAQkBe;;;;;;AARlB,AAAA,AASGP,AAAgBO;AATnB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AASmBA,AAAAA;AATnB,AASmBA,AAAAA;;AATnB,AAAApB,AAAA,AAAA,AAAA,AAAA,AASmBoB,AAAAA;AATnBnB,AAAA,AAAAY,AAAA,AAAAV,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AASmBmB,AAAAA;;AATnB,AAAAhB,AAAA,AAAAS,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAT,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AASmBgB,AAAAA;;AATnB,AAAA,AAAAf,AAAA,AASmBe;;;;;;AATnB,AAAA,AAUGN,AAAgBM;AAVnB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAUmBA,AAAAA;AAVnB,AAUmBA,AAAAA;;AAVnB,AAAApB,AAAA,AAAA,AAAA,AAAA,AAUmBoB,AAAAA;AAVnBnB,AAAA,AAAAa,AAAA,AAAAX,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAUmBmB,AAAAA;;AAVnB,AAAAhB,AAAA,AAAAU,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAV,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAUmBgB,AAAAA;;AAVnB,AAAA,AAAAf,AAAA,AAUmBe;;;;;;AAVnB,AAAA,AAWGL,AAAeK;AAXlB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAWkBA,AAAAA;AAXlB,AAWkBA,AAAAA;;AAXlB,AAAApB,AAAA,AAAA,AAAA,AAAA,AAWkBoB,AAAAA;AAXlBnB,AAAA,AAAAc,AAAA,AAAAZ,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAWkBmB,AAAAA;;AAXlB,AAAAhB,AAAA,AAAAW,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAX,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAWkBgB,AAAAA;;AAXlB,AAAA,AAAAf,AAAA,AAWkBe;;;;;;AAXlB,AAAA,AAYGJ,AAAeI;AAZlB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAYkBA,AAAAA;AAZlB,AAYkBA,AAAAA;;AAZlB,AAAApB,AAAA,AAAA,AAAA,AAAA,AAYkBoB,AAAAA;AAZlBnB,AAAA,AAAAe,AAAA,AAAAb,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAYkBmB,AAAAA;;AAZlB,AAAAhB,AAAA,AAAAY,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAZ,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAYkBgB,AAAAA;;AAZlB,AAAA,AAAAf,AAAA,AAYkBe;;;;;;AAZlB,AAAA,AAaGH,AAAeG;AAblB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAakBA,AAAAA;AAblB,AAakBA,AAAAA;;AAblB,AAAApB,AAAA,AAAA,AAAA,AAAA,AAakBoB,AAAAA;AAblBnB,AAAA,AAAAgB,AAAA,AAAAd,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAakBmB,AAAAA;;AAblB,AAAAhB,AAAA,AAAAa,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAb,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAakBgB,AAAAA;;AAblB,AAAA,AAAAf,AAAA,AAakBe;;;;;;AAblB,AAAA,AAcGF,AAAeE;AAdlB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAckBA,AAAAA;AAdlB,AAckBA,AAAAA;;AAdlB,AAAApB,AAAA,AAAA,AAAA,AAAA,AAckBoB,AAAAA;AAdlBnB,AAAA,AAAAiB,AAAA,AAAAf,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAckBmB,AAAAA;;AAdlB,AAAAhB,AAAA,AAAAc,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAd,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAckBgB,AAAAA;;AAdlB,AAAA,AAAAf,AAAA,AAckBe;;;;;;AAdlB,AAeA,AAAA;AAAA;;;AAAA,AAAae;;AAAb,AAAA,AACGd,AAAkBD,AAAEgB;AADvB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACqBhB,AAAAA;AADrB,AACqBA,AAAAA,AAAEgB;;AADvB,AAAApC,AAAA,AAAA,AAAA,AAAA,AACqBoB,AAAAA;AADrBnB,AAAA,AAAAoB,AAAA,AAAAlB,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACqBmB,AAAAA,AAAEgB,AAAAA;;AADvB,AAAAhC,AAAA,AAAAiB,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAjB,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACqBgB,AAAAA,AAAEgB,AAAAA;;AADvB,AAAA,AAAA/B,AAAA,AACqBe;;;;;;AADrB,AAAA,AAEGE,AAAaF,AAAEiB;AAFlB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEgBjB,AAAAA;AAFhB,AAEgBA,AAAAA,AAAEiB;;AAFlB,AAAArC,AAAA,AAAA,AAAA,AAAA,AAEgBoB,AAAAA;AAFhBnB,AAAA,AAAAqB,AAAA,AAAAnB,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAEgBmB,AAAAA,AAAEiB,AAAAA;;AAFlB,AAAAjC,AAAA,AAAAkB,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAlB,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAEgBgB,AAAAA,AAAEiB,AAAAA;;AAFlB,AAAA,AAAAhC,AAAA,AAEgBe;;;;;;AAFhB,AAAA,AAGGG,AAAiBH,AAAEiB;AAHtB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGoBjB,AAAAA;AAHpB,AAGoBA,AAAAA,AAAEiB;;AAHtB,AAAArC,AAAA,AAAA,AAAA,AAAA,AAGoBoB,AAAAA;AAHpBnB,AAAA,AAAAsB,AAAA,AAAApB,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAGoBmB,AAAAA,AAAEiB,AAAAA;;AAHtB,AAAAjC,AAAA,AAAAmB,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAnB,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAGoBgB,AAAAA,AAAEiB,AAAAA;;AAHtB,AAAA,AAAAhC,AAAA,AAGoBe;;;;;;AAHpB,AAAA,AAIGI,AAAiBJ,AAAEiB;AAJtB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIoBjB,AAAAA;AAJpB,AAIoBA,AAAAA,AAAEiB;;AAJtB,AAAArC,AAAA,AAAA,AAAA,AAAA,AAIoBoB,AAAAA;AAJpBnB,AAAA,AAAAuB,AAAA,AAAArB,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAIoBmB,AAAAA,AAAEiB,AAAAA;;AAJtB,AAAAjC,AAAA,AAAAoB,AAAA;AAAA,AAAA,AAAA,AAAA,AAAApB,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAIoBgB,AAAAA,AAAEiB,AAAAA;;AAJtB,AAAA,AAAAhC,AAAA,AAIoBe;;;;;;AAJpB,AAAA,AAKGK,AAAiBL,AAAEiB;AALtB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAKoBjB,AAAAA;AALpB,AAKoBA,AAAAA,AAAEiB;;AALtB,AAAArC,AAAA,AAAA,AAAA,AAAA,AAKoBoB,AAAAA;AALpBnB,AAAA,AAAAwB,AAAA,AAAAtB,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAKoBmB,AAAAA,AAAEiB,AAAAA;;AALtB,AAAAjC,AAAA,AAAAqB,AAAA;AAAA,AAAA,AAAA,AAAA,AAAArB,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAKoBgB,AAAAA,AAAEiB,AAAAA;;AALtB,AAAA,AAAAhC,AAAA,AAKoBe;;;;;;AALpB,AAAA,AAMGM,AAAiBN,AAAEiB;AANtB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAMoBjB,AAAAA;AANpB,AAMoBA,AAAAA,AAAEiB;;AANtB,AAAArC,AAAA,AAAA,AAAA,AAAA,AAMoBoB,AAAAA;AANpBnB,AAAA,AAAAyB,AAAA,AAAAvB,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAMoBmB,AAAAA,AAAEiB,AAAAA;;AANtB,AAAAjC,AAAA,AAAAsB,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAtB,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAMoBgB,AAAAA,AAAEiB,AAAAA;;AANtB,AAAA,AAAAhC,AAAA,AAMoBe;;;;;;AANpB,AAAA,AAOGO,AAAgBP,AAAEiB;AAPrB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAOmBjB,AAAAA;AAPnB,AAOmBA,AAAAA,AAAEiB;;AAPrB,AAAArC,AAAA,AAAA,AAAA,AAAA,AAOmBoB,AAAAA;AAPnBnB,AAAA,AAAA0B,AAAA,AAAAxB,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAOmBmB,AAAAA,AAAEiB,AAAAA;;AAPrB,AAAAjC,AAAA,AAAAuB,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAvB,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAOmBgB,AAAAA,AAAEiB,AAAAA;;AAPrB,AAAA,AAAAhC,AAAA,AAOmBe;;;;;;AAPnB,AAAA,AAQGQ,AAAgBR,AAAEiB;AARrB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAQmBjB,AAAAA;AARnB,AAQmBA,AAAAA,AAAEiB;;AARrB,AAAArC,AAAA,AAAA,AAAA,AAAA,AAQmBoB,AAAAA;AARnBnB,AAAA,AAAA2B,AAAA,AAAAzB,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAQmBmB,AAAAA,AAAEiB,AAAAA;;AARrB,AAAAjC,AAAA,AAAAwB,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAxB,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAQmBgB,AAAAA,AAAEiB,AAAAA;;AARrB,AAAA,AAAAhC,AAAA,AAQmBe;;;;;;AARnB,AAAA,AASGS,AAAiBT,AAAEiB;AATtB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AASoBjB,AAAAA;AATpB,AASoBA,AAAAA,AAAEiB;;AATtB,AAAArC,AAAA,AAAA,AAAA,AAAA,AASoBoB,AAAAA;AATpBnB,AAAA,AAAA4B,AAAA,AAAA1B,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AASoBmB,AAAAA,AAAEiB,AAAAA;;AATtB,AAAAjC,AAAA,AAAAyB,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAzB,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AASoBgB,AAAAA,AAAEiB,AAAAA;;AATtB,AAAA,AAAAhC,AAAA,AASoBe;;;;;;AATpB,AAAA,AAUGU,AAAiBV,AAAEiB;AAVtB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAUoBjB,AAAAA;AAVpB,AAUoBA,AAAAA,AAAEiB;;AAVtB,AAAArC,AAAA,AAAA,AAAA,AAAA,AAUoBoB,AAAAA;AAVpBnB,AAAA,AAAA6B,AAAA,AAAA3B,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAUoBmB,AAAAA,AAAEiB,AAAAA;;AAVtB,AAAAjC,AAAA,AAAA0B,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA1B,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAUoBgB,AAAAA,AAAEiB,AAAAA;;AAVtB,AAAA,AAAAhC,AAAA,AAUoBe;;;;;;AAVpB,AAAA,AAWGW,AAAgBX,AAAEkB;AAXrB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAWmBlB,AAAAA;AAXnB,AAWmBA,AAAAA,AAAEkB;;AAXrB,AAAAtC,AAAA,AAAA,AAAA,AAAA,AAWmBoB,AAAAA;AAXnBnB,AAAA,AAAA8B,AAAA,AAAA5B,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAWmBmB,AAAAA,AAAEkB,AAAAA;;AAXrB,AAAAlC,AAAA,AAAA2B,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA3B,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAWmBgB,AAAAA,AAAEkB,AAAAA;;AAXrB,AAAA,AAAAjC,AAAA,AAWmBe;;;;;;AAXnB,AAAA,AAYGY,AAAgBZ,AAAEkB;AAZrB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAYmBlB,AAAAA;AAZnB,AAYmBA,AAAAA,AAAEkB;;AAZrB,AAAAtC,AAAA,AAAA,AAAA,AAAA,AAYmBoB,AAAAA;AAZnBnB,AAAA,AAAA+B,AAAA,AAAA7B,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAYmBmB,AAAAA,AAAEkB,AAAAA;;AAZrB,AAAAlC,AAAA,AAAA4B,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA5B,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAYmBgB,AAAAA,AAAEkB,AAAAA;;AAZrB,AAAA,AAAAjC,AAAA,AAYmBe;;;;;;AAZnB,AAAA,AAaGa,AAAgBb,AAAEkB;AAbrB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAamBlB,AAAAA;AAbnB,AAamBA,AAAAA,AAAEkB;;AAbrB,AAAAtC,AAAA,AAAA,AAAA,AAAA,AAamBoB,AAAAA;AAbnBnB,AAAA,AAAAgC,AAAA,AAAA9B,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAamBmB,AAAAA,AAAEkB,AAAAA;;AAbrB,AAAAlC,AAAA,AAAA6B,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA7B,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAamBgB,AAAAA,AAAEkB,AAAAA;;AAbrB,AAAA,AAAAjC,AAAA,AAamBe;;;;;;AAbnB,AAAA,AAcGc,AAAgBd,AAAEkB;AAdrB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAcmBlB,AAAAA;AAdnB,AAcmBA,AAAAA,AAAEkB;;AAdrB,AAAAtC,AAAA,AAAA,AAAA,AAAA,AAcmBoB,AAAAA;AAdnBnB,AAAA,AAAAiC,AAAA,AAAA/B,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAcmBmB,AAAAA,AAAEkB,AAAAA;;AAdrB,AAAAlC,AAAA,AAAA8B,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA9B,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAcmBgB,AAAAA,AAAEkB,AAAAA;;AAdrB,AAAA,AAAAjC,AAAA,AAcmBe;;;;;;AAdnB,AAeA,AAAA;AAAA;;;AAAA,AAAaqB;;AAAb,AAAA,AACGF,AAAMnB,AAAEiB;AADX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACSjB,AAAAA;AADT,AACSA,AAAAA,AAAEiB;;AADX,AAAArC,AAAA,AAAA,AAAA,AAAA,AACSoB,AAAAA;AADTnB,AAAA,AAAAsC,AAAA,AAAApC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACSmB,AAAAA,AAAEiB,AAAAA;;AADX,AAAAjC,AAAA,AAAAmC,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAnC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACSgB,AAAAA,AAAEiB,AAAAA;;AADX,AAAA,AAAAhC,AAAA,AACSe;;;;;;AADT,AAAA,AAEGoB,AAAcpB;AAFjB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEiBA,AAAAA;AAFjB,AAEiBA,AAAAA;;AAFjB,AAAApB,AAAA,AAAA,AAAA,AAAA,AAEiBoB,AAAAA;AAFjBnB,AAAA,AAAAuC,AAAA,AAAArC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAEiBmB,AAAAA;;AAFjB,AAAAhB,AAAA,AAAAoC,AAAA;AAAA,AAAA,AAAA,AAAA,AAAApC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAEiBgB,AAAAA;;AAFjB,AAAA,AAAAf,AAAA,AAEiBe;;;;;;AAFjB,AAGA,AAAA;AAAA;;;AAAA,AAAa2B;;AAAb,AAAA,AACGL,AAAiBtB;AADpB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACoBA,AAAAA;AADpB,AACoBA,AAAAA;;AADpB,AAAApB,AAAA,AAAA,AAAA,AAAA,AACoBoB,AAAAA;AADpBnB,AAAA,AAAAyC,AAAA,AAAAvC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACoBmB,AAAAA;;AADpB,AAAAhB,AAAA,AAAAsC,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAtC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACoBgB,AAAAA;;AADpB,AAAA,AAAAf,AAAA,AACoBe;;;;;;AADpB,AAAA,AAEGuB,AAAkBvB;AAFrB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEqBA,AAAAA;AAFrB,AAEqBA,AAAAA;;AAFrB,AAAApB,AAAA,AAAA,AAAA,AAAA,AAEqBoB,AAAAA;AAFrBnB,AAAA,AAAA0C,AAAA,AAAAxC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAEqBmB,AAAAA;;AAFrB,AAAAhB,AAAA,AAAAuC,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAvC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAEqBgB,AAAAA;;AAFrB,AAAA,AAAAf,AAAA,AAEqBe;;;;;;AAFrB,AAAA,AAGGwB,AAAmBxB;AAHtB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGsBA,AAAAA;AAHtB,AAGsBA,AAAAA;;AAHtB,AAAApB,AAAA,AAAA,AAAA,AAAA,AAGsBoB,AAAAA;AAHtBnB,AAAA,AAAA2C,AAAA,AAAAzC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAGsBmB,AAAAA;;AAHtB,AAAAhB,AAAA,AAAAwC,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAxC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAGsBgB,AAAAA;;AAHtB,AAAA,AAAAf,AAAA,AAGsBe;;;;;;AAHtB,AAAA,AAIGyB,AAAkBzB;AAJrB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIqBA,AAAAA;AAJrB,AAIqBA,AAAAA;;AAJrB,AAAApB,AAAA,AAAA,AAAA,AAAA,AAIqBoB,AAAAA;AAJrBnB,AAAA,AAAA4C,AAAA,AAAA1C,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAIqBmB,AAAAA;;AAJrB,AAAAhB,AAAA,AAAAyC,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAzC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAIqBgB,AAAAA;;AAJrB,AAAA,AAAAf,AAAA,AAIqBe;;;;;;AAJrB,AAAA,AAKG0B,AAAgB1B;AALnB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAKmBA,AAAAA;AALnB,AAKmBA,AAAAA;;AALnB,AAAApB,AAAA,AAAA,AAAA,AAAA,AAKmBoB,AAAAA;AALnBnB,AAAA,AAAA6C,AAAA,AAAA3C,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAKmBmB,AAAAA;;AALnB,AAAAhB,AAAA,AAAA0C,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA1C,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAKmBgB,AAAAA;;AALnB,AAAA,AAAAf,AAAA,AAKmBe;;;;;;AALnB,AAOA,AAAA;AAAA;;;AAAA,AAAaiC;;AAAb,AAAA,AACGL,AAAkB5B,AAAEkC,AAAKC,AAAOC;AADnC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACqBpC,AAAAA;AADrB,AACqBA,AAAAA,AAAEkC,AAAKC,AAAOC;;AADnC,AAAAxD,AAAA,AAAA,AAAA,AAAA,AACqBoB,AAAAA;AADrBnB,AAAA,AAAA+C,AAAA,AAAA7C,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACqBmB,AAAAA,AAAEkC,AAAAA,AAAKC,AAAAA,AAAOC,AAAAA;;AADnC,AAAApD,AAAA,AAAA4C,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA5C,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACqBgB,AAAAA,AAAEkC,AAAAA,AAAKC,AAAAA,AAAOC,AAAAA;;AADnC,AAAA,AAAAnD,AAAA,AACqBe;;;;;;AADrB,AAAA,AAEG6B,AAAmB7B,AAAEkC,AAAKC,AAAOC;AAFpC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEsBpC,AAAAA;AAFtB,AAEsBA,AAAAA,AAAEkC,AAAKC,AAAOC;;AAFpC,AAAAxD,AAAA,AAAA,AAAA,AAAA,AAEsBoB,AAAAA;AAFtBnB,AAAA,AAAAgD,AAAA,AAAA9C,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAEsBmB,AAAAA,AAAEkC,AAAAA,AAAKC,AAAAA,AAAOC,AAAAA;;AAFpC,AAAApD,AAAA,AAAA6C,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA7C,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAEsBgB,AAAAA,AAAEkC,AAAAA,AAAKC,AAAAA,AAAOC,AAAAA;;AAFpC,AAAA,AAAAnD,AAAA,AAEsBe;;;;;;AAFtB,AAAA,AAGG8B,AAAoB9B,AAAEkC,AAAKC,AAAOC;AAHrC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGuBpC,AAAAA;AAHvB,AAGuBA,AAAAA,AAAEkC,AAAKC,AAAOC;;AAHrC,AAAAxD,AAAA,AAAA,AAAA,AAAA,AAGuBoB,AAAAA;AAHvBnB,AAAA,AAAAiD,AAAA,AAAA/C,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAGuBmB,AAAAA,AAAEkC,AAAAA,AAAKC,AAAAA,AAAOC,AAAAA;;AAHrC,AAAApD,AAAA,AAAA8C,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA9C,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAGuBgB,AAAAA,AAAEkC,AAAAA,AAAKC,AAAAA,AAAOC,AAAAA;;AAHrC,AAAA,AAAAnD,AAAA,AAGuBe;;;;;;AAHvB,AAAA,AAIG+B,AAAmB/B,AAAEkC,AAAKC,AAAOC;AAJpC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIsBpC,AAAAA;AAJtB,AAIsBA,AAAAA,AAAEkC,AAAKC,AAAOC;;AAJpC,AAAAxD,AAAA,AAAA,AAAA,AAAA,AAIsBoB,AAAAA;AAJtBnB,AAAA,AAAAkD,AAAA,AAAAhD,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAIsBmB,AAAAA,AAAEkC,AAAAA,AAAKC,AAAAA,AAAOC,AAAAA;;AAJpC,AAAApD,AAAA,AAAA+C,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA/C,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAIsBgB,AAAAA,AAAEkC,AAAAA,AAAKC,AAAAA,AAAOC,AAAAA;;AAJpC,AAAA,AAAAnD,AAAA,AAIsBe;;;;;;AAJtB,AAAA,AAKGgC,AAAiBhC,AAAEkC,AAAKC,AAAOC;AALlC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAKoBpC,AAAAA;AALpB,AAKoBA,AAAAA,AAAEkC,AAAKC,AAAOC;;AALlC,AAAAxD,AAAA,AAAA,AAAA,AAAA,AAKoBoB,AAAAA;AALpBnB,AAAA,AAAAmD,AAAA,AAAAjD,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAKoBmB,AAAAA,AAAEkC,AAAAA,AAAKC,AAAAA,AAAOC,AAAAA;;AALlC,AAAApD,AAAA,AAAAgD,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAhD,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAKoBgB,AAAAA,AAAEkC,AAAAA,AAAKC,AAAAA,AAAOC,AAAAA;;AALlC,AAAA,AAAAnD,AAAA,AAKoBe;;;;;;AALpB,AAWS,AAAA,AAAMqC,AAAUrB;AAAhB,AAAqB,AAAA,AAAIA,AAAIsB,AAAsBC;;AAiEzD,AAAA;;;;;;;;;;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAASK;;AAAT,AAAA,AAAA,AAAA,AAASA,AAmDF7C;;AAnDP,AAAA,AAAA,AAmDOA;AAnDP,AAoDI,AAAA,AAAA,AAACkD,AAAAA,AAAAA,AAAgBlD,AAAAA;;AACjB,AAAMiB,AAAE,AAAa+B,AAAGC;AAAxB,AACE,AAAMA,AAAI,AAAA,AAAGA;;AACbhC;;;AAvDN,AAAA,AAAA,AAAA,AAAS4B,AA6DF7C;;AA7DP,AAAA,AAAA,AA6DOA;AA7DP,AAAA,AA6DW,AAAeA,AAAG,AAAeA,AAAG,AAAeA;;;AA7D9D,AAAA,AAAA,AAAA,AAAS6C,AA2BF7C;;AA3BP,AAAA,AAAA,AA2BOA;AA3BP,AA4BI,AAAA,AAAA,AAACkD,AAAAA,AAAAA,AAAgBlD,AAAAA;;AACjB,AAAMiB,AAAE,AAAY+B,AAAGC;AAAvB,AACE,AAAMA,AAAI,AAAA,AAAGA;;AACbhC;;;AA/BN,AAAA,AAAA,AAAA,AAAS4B,AAGF7C;;AAHP,AAAA,AAAA,AAGOA;AAHP,AAII,AAAA,AAAA,AAACkD,AAAAA,AAAAA,AAAgBlD,AAAAA;;AACjB,AAAMiB,AAAE,AAAW+B,AAAGC;AAAtB,AACE,AAAMA,AAAI,AAAA,AAAKA;;AACfhC;;;AAPN,AAAA,AAAA,AAAA,AAAS4B,AA+DF7C;;AA/DP,AAAA,AAAA,AA+DOA;AA/DP,AAAA,AA+DW,AAAeA,AAAG,AAAeA,AAAG,AAAeA;;;AA/D9D,AAAA,AAAA,AAAA,AAAS6C,AAqBF7C;;AArBP,AAAA,AAAA,AAqBOA;AArBP,AAsBI,AAAA,AAAA,AAACkD,AAAAA,AAAAA,AAAgBlD,AAAAA;;AACjB,AAAMiB,AAAE,AAAA,AAAY+B,AAAGC;AAAvB,AACE,AAAMA,AAAI,AAAA,AAAGA;;AACbhC;;;AAzBN,AAAA,AAAA,AAAA,AAAS4B,AAyDF7C;;AAzDP,AAAA,AAAA,AAyDOA;AAzDP,AAAA,AAyDW,AAAeA,AAAG,AAAeA;;;AAzD5C,AAAA,AAAA,AAAA,AAAS6C,AA2DF7C;;AA3DP,AAAA,AAAA,AA2DOA;AA3DP,AAAA,AA2DW,AAAeA,AAAG,AAAeA;;;AA3D5C,AAAA,AAAA,AAAA,AAAS6C,AA6CF7C;;AA7CP,AAAA,AAAA,AA6COA;AA7CP,AA8CI,AAAA,AAAA,AAACkD,AAAAA,AAAAA,AAAgBlD,AAAAA;;AACjB,AAAMiB,AAAE,AAAA,AAAa+B,AAAGC;AAAxB,AACE,AAAMA,AAAI,AAAA,AAAGA;;AACbhC;;;AAjDN,AAAA,AAAA,AAAA,AAAS4B,AAeF7C;;AAfP,AAAA,AAAA,AAeOA;AAfP,AAgBI,AAAA,AAAA,AAACkD,AAAAA,AAAAA,AAAgBlD,AAAAA;;AACjB,AAAMiB,AAAE,AAAY+B,AAAGC;AAAvB,AACE,AAAMA,AAAI,AAAA,AAAGA;;AACbhC;;;AAnBN,AAAA,AAAA,AAAA,AAAS4B,AASF7C;;AATP,AAAA,AAAA,AASOA;AATP,AAUI,AAAA,AAAA,AAACkD,AAAAA,AAAAA,AAAgBlD,AAAAA;;AACjB,AAAMiB,AAAE,AAAA,AAAY+B,AAAGC;AAAvB,AACE,AAAMA,AAAI,AAAA,AAAGA;;AACbhC;;;AAbN,AAAA,AAAA,AAAA,AAAS4B,AAiCF7C;;AAjCP,AAAA,AAAA,AAiCOA;AAjCP,AAkCI,AAAA,AAAA,AAACkD,AAAAA,AAAAA,AAAgBlD,AAAAA;;AACjB,AAAMiB,AAAE,AAAA,AAAa+B,AAAGC;AAAxB,AACE,AAAMA,AAAI,AAAA,AAAGA;;AACbhC;;;AArCN,AAAA,AAAA,AAAA,AAAS4B,AAuCF7C;;AAvCP,AAAA,AAAA,AAuCOA;AAvCP,AAwCI,AAAA,AAAA,AAACkD,AAAAA,AAAAA,AAAgBlD,AAAAA;;AACjB,AAAMiB,AAAE,AAAa+B,AAAGC;AAAxB,AACE,AAAMA,AAAI,AAAA,AAAGA;;AACbhC;;;AA3CN,AAAA,AAAA,AAAAuB,AAASK;;AAAT,AAAA,AAAA,AAAA,AAASA,AAkEF7C,AAAEiB;;AAlET,AAAA,AAAA,AAkEOjB;AAlEP,AAmEI,AAACkD,AAAAA,AAAAA,AAAgBlD,AAAAA,AAAEiB,AAAAA;;AACnB,AAAMgC,AAAI,AAAGA,AAAIhC;;AACjBjB;;;AArEJ,AAAA,AAAA,AAAA,AAAS6C,AAuEF7C;;AAvEP,AAAA,AAAA,AAuEOA;AAvEP,AAuEUiD;;;AAvEV,AAAA,AAAA,AAAAT,AAASK;;AAAT,AAAA,AAAA,AAAA,AAASA,AA0EF7C;;AA1EP,AAAA,AAAA,AA0EOA;AA1EP,AA0EU,AAAAmD,AAAgBJ;;;AA1E1B,AAAA,AAAA,AAAA,AAASF,AA4EF7C;;AA5EP,AAAA,AAAA,AA4EOA;AA5EP,AA4EU,AAAAoD,AAAkBL;;;AA5E5B,AAAA,AAAA,AAAA,AAASF,AA8EF7C;;AA9EP,AAAA,AAAA,AA8EOA;AA9EP,AA8EU,AAAAqD,AAAkBN;;;AA9E5B,AAAA,AAAA,AAAA,AAASF,AAgFF7C;;AAhFP,AAAA,AAAA,AAgFOA;AAhFP,AAgFU,AAAAsD,AAAiBP;;;AAhF3B,AAAA,AAAA,AAAA,AAASF,AAkFF7C;;AAlFP,AAAA,AAAA,AAkFOA;AAlFP,AAkFU,AAAAuD,AAAiBR;;;AAlF3B,AAAA,AAAA,AAASF;AAAT,AAAA,AAAA;;;AAAA,AAAA,AAAA,AAASA;;AAAT,AAAA,AAAA,AAASA;;AAAT,AAAA,AAAA,AAAAJ,AAAAC,AAAAC,AAASE;AAAT,AAAA,AAAAD,AAAAF,AAAA;;;AAAA;;;AAAA,AAASI,AAAoCC,AAAiBC,AAAaC;AAA3E,AAAA,AAAAJ,AAA6CE,AAAiBC,AAAaC;;;AAAlEJ,AAuKT,AAAA;;;;;;;;;;;;AAAA,AAAA,AAAA,AAAA,AAAAL,AAASgB;;AAAT,AAAA,AAAA,AAAA,AAASA,AAMFxD,AAAEgB;;AANT,AAAA,AAAA,AAMOhB;AANP,AAOI,AAAM0D,AAAK,AAACrB,AAASrB;AACf2C,AAAK,AAACC,AAAMF;AADlB,AAEE,AAAAG,AAAa7D;AAAb8D,AAAe,AAACF,AAAMF;AAAtB,AAAA,AAAAG,AAAAC,AAAAD,AAAAC,AAACC,AAAAA,AAAAA;;AACD,AAAA,AAAOC;AAAKC,AAAEhB;;AAAd,AACE,AAAI,AAAGe,AAAEL;AACP,AAAI,AAAWX,AAAGiB,AAAE,AAAaP,AAAKM;;AAClC,AAAO,AAAA,AAAKA;AAAG,AAAA,AAAKC;;;;;AACxB,AAAMhB,AAAIgB;;;;;AAChBjE;;;AAfJ,AAAA,AAAA,AAAA,AAASwD,AA6BFxD,AAAEiB;;AA7BT,AAAA,AAAA,AA6BOjB;AA7BP,AA8BI,AAAA,AAAA,AAAC+D,AAAAA,AAAAA,AAAY/D,AAAAA;;AACb,AAAYgD,AAAGC,AAAIhC;;AACnB,AAAMgC,AAAI,AAAA,AAAGA;;AACbjD;;;AAjCJ,AAAA,AAAA,AAAA,AAASwD,AAuBFxD,AAAEiB;;AAvBT,AAAA,AAAA,AAuBOjB;AAvBP,AAwBI,AAAA,AAAA,AAAC+D,AAAAA,AAAAA,AAAY/D,AAAAA;;AACb,AAAA,AAAYgD,AAAGC,AAAIhC;;AACnB,AAAMgC,AAAI,AAAA,AAAGA;;AACbjD;;;AA3BJ,AAAA,AAAA,AAAA,AAASwD,AAyCFxD,AAAEiB;;AAzCT,AAAA,AAAA,AAyCOjB;AAzCP,AA0CI,AAAA,AAAA,AAAC+D,AAAAA,AAAAA,AAAY/D,AAAAA;;AACb,AAAYgD,AAAGC,AAAIhC;;AACnB,AAAMgC,AAAI,AAAA,AAAGA;;AACbjD;;;AA7CJ,AAAA,AAAA,AAAA,AAASwD,AAqFFxD,AAAEkB;;AArFT,AAAA,AAAA,AAqFOlB;AArFP,AAsFI,AAAA,AAAA,AAAC+D,AAAAA,AAAAA,AAAY/D,AAAAA;;AACb,AAAA,AAAagD,AAAGC,AAAI,AAACiB,AAAMhD;;AAC3B,AAAA,AAAa8B,AAAG,AAAA,AAAGC,AAAO,AAAA,AAACkB,AAAIjD;;AAC/B,AAAA,AAAa8B,AAAG,AAAA,AAAGC,AAAO,AAAA,AAACkB,AAAIjD;;AAC/B,AAAM+B,AAAI,AAAA,AAAGA;;AACbjD;;;AA3FJ,AAAA,AAAA,AAAA,AAASwD,AA6FFxD,AAAEkB;;AA7FT,AAAA,AAAA,AA6FOlB;AA7FP,AA8FI,AAAA,AAAA,AAAC+D,AAAAA,AAAAA,AAAY/D,AAAAA;;AACb,AAAagD,AAAGC,AAAI,AAACiB,AAAMhD;;AAC3B,AAAa8B,AAAG,AAAA,AAAGC,AAAO,AAAA,AAACkB,AAAIjD;;AAC/B,AAAa8B,AAAG,AAAA,AAAGC,AAAO,AAAA,AAACkB,AAAIjD;;AAC/B,AAAM+B,AAAI,AAAA,AAAGA;;AACbjD;;;AAnGJ,AAAA,AAAA,AAAA,AAASwD,AAiEFxD,AAAEiB;;AAjET,AAAA,AAAA,AAiEOjB;AAjEP,AAkEI,AAAA,AAAA,AAAC+D,AAAAA,AAAAA,AAAY/D,AAAAA;;AACb,AAAagD,AAAGC,AAAIhC;;AACpB,AAAMgC,AAAI,AAAA,AAAGA;;AACbjD;;;AArEJ,AAAA,AAAA,AAAA,AAASwD,AAiBFxD,AAAEiB;;AAjBT,AAAA,AAAA,AAiBOjB;AAjBP,AAkBI,AAAA,AAAA,AAAC+D,AAAAA,AAAAA,AAAY/D,AAAAA;;AACb,AAAWgD,AAAGC,AAAIhC;;AAClB,AAAMgC,AAAI,AAAA,AAAKA;;AACfjD;;;AArBJ,AAAA,AAAA,AAAA,AAASwD,AAqDFxD,AAAEiB;;AArDT,AAAA,AAAA,AAqDOjB;AArDP,AAsDI,AAAA,AAAA,AAAC+D,AAAAA,AAAAA,AAAY/D,AAAAA;;AACb,AAAagD,AAAGC,AAAIhC;;AACpB,AAAMgC,AAAI,AAAA,AAAGA;;AACbjD;;;AAzDJ,AAAA,AAAA,AAAA,AAASwD,AA+CFxD,AAAEiB;;AA/CT,AAAA,AAAA,AA+COjB;AA/CP,AAgDI,AAAA,AAAA,AAAC+D,AAAAA,AAAAA,AAAY/D,AAAAA;;AACb,AAAA,AAAagD,AAAGC,AAAIhC;;AACpB,AAAMgC,AAAI,AAAA,AAAGA;;AACbjD;;;AAnDJ,AAAA,AAAA,AAAA,AAASwD,AAmCFxD,AAAEiB;;AAnCT,AAAA,AAAA,AAmCOjB;AAnCP,AAoCI,AAAA,AAAA,AAAC+D,AAAAA,AAAAA,AAAY/D,AAAAA;;AACb,AAAA,AAAYgD,AAAGC,AAAIhC;;AACnB,AAAMgC,AAAI,AAAA,AAAGA;;AACbjD;;;AAvCJ,AAAA,AAAA,AAAA,AAASwD,AA8EFxD,AAAEkB;;AA9ET,AAAA,AAAA,AA8EOlB;AA9EP,AA+EI,AAAA,AAAA,AAAC+D,AAAAA,AAAAA,AAAY/D,AAAAA;;AACb,AAAagD,AAAGC,AAAI,AAACiB,AAAMhD;;AAC3B,AAAa8B,AAAG,AAAA,AAAGC,AAAO,AAAA,AAACkB,AAAIjD;;AAC/B,AAAM+B,AAAI,AAAA,AAAGA;;AACbjD;;;AAnFJ,AAAA,AAAA,AAAA,AAASwD,AA2DFxD,AAAEiB;;AA3DT,AAAA,AAAA,AA2DOjB;AA3DP,AA4DI,AAAA,AAAA,AAAC+D,AAAAA,AAAAA,AAAY/D,AAAAA;;AACb,AAAA,AAAagD,AAAGC,AAAIhC;;AACpB,AAAMgC,AAAI,AAAA,AAAGA;;AACbjD;;;AA/DJ,AAAA,AAAA,AAAA,AAASwD,AAuEFxD,AAAEkB;;AAvET,AAAA,AAAA,AAuEOlB;AAvEP,AAwEI,AAAA,AAAA,AAAC+D,AAAAA,AAAAA,AAAY/D,AAAAA;;AACb,AAAA,AAAagD,AAAGC,AAAI,AAACiB,AAAMhD;;AAC3B,AAAA,AAAa8B,AAAG,AAAA,AAAGC,AAAO,AAAA,AAACkB,AAAIjD;;AAC/B,AAAM+B,AAAI,AAAA,AAAGA;;AACbjD;;;AA5EJ,AAAA,AAAA,AAAAwC,AAASgB;;AAAT,AAAA,AAAA,AAAA,AAASA,AAsGFxD,AAAEiB;;AAtGT,AAAA,AAAA,AAsGOjB;AAtGP,AAsGY,AAAC+D,AAAAA,AAAAA,AAAY/D,AAAAA,AAAEiB,AAAAA;;AAAG,AAAMgC,AAAI,AAAGA,AAAIhC;;AAAIjB;;;AAtGnD,AAAA,AAAA,AAAA,AAASwD,AAwGFxD;;AAxGP,AAAA,AAAA,AAwGOA;AAxGP,AAwGUiD;;;AAxGV,AAAA,AAAA,AAAAT,AAASgB;;AAAT,AAAA,AAAA,AAAA,AAASA,AA2GFxD;;AA3GP,AAAA,AAAA,AA2GOA;AA3GP,AA2GU,AAAAmD,AAAA,AAAgBJ,AAAME;;;AA3GhC,AAAA,AAAA,AAAA,AAASO,AA6GFxD;;AA7GP,AAAA,AAAA,AA6GOA;AA7GP,AA6GU,AAAAoD,AAAA,AAAkBL,AAAM,AAAA,AAA0BE;;;AA7G5D,AAAA,AAAA,AAAA,AAASO,AA+GFxD;;AA/GP,AAAA,AAAA,AA+GOA;AA/GP,AA+GU,AAAAqD,AAAA,AAAkBN,AAAM,AAAA,AAA0BE;;;AA/G5D,AAAA,AAAA,AAAA,AAASO,AAiHFxD;;AAjHP,AAAA,AAAA,AAiHOA;AAjHP,AAiHU,AAAAsD,AAAA,AAAiBP,AAAM,AAAA,AAA0BE;;;AAjH3D,AAAA,AAAA,AAAA,AAASO,AAmHFxD;;AAnHP,AAAA,AAAA,AAmHOA;AAnHP,AAmHU,AAAAuD,AAAA,AAAiBR,AAAM,AAAA,AAA0BE;;;AAnH3D,AAAA,AAAA,AAASO;AAAT,AAAA,AAAA;;;AAAA,AAAA,AAAA,AAASA;;AAAT,AAAA,AAAA,AAASA;;AAAT,AAAA,AAAA,AAAAf,AAAAC,AAAAC,AAASa;AAAT,AAAA,AAAAZ,AAAAF,AAAA;;;AAAA;;;AAAA,AAASe,AACiCV,AACHC,AACxBC;AAHf,AAAA,AAAAO,AAC0CT,AACHC,AACxBC;;;AAHNO,AAsHT,AAAA,AAAgBN,AACOkB,AAAGC;AAD1B,AAEE,AAAI,AAAG,AAAG,AAAOD,AAAIC,AAAM,AAAc,AAAOD;AAC9C,AACC,AAAAE,AACC,AAAA,AAAA,AAAA,AAAkC,AAAOF,AACRC,AACX,AAAc,AAAOD;;AAL/C;;;AAQF,AAAA,AAAgBL,AACQQ,AAAIF;AAD5B,AAEE,AAAMV,AAAI,AAAc,AAAOY;AAA/B,AACE,AAAI,AAAG,AAAG,AAAOA,AAAKF,AAAMV;AAC1B,AAAMa,AAAK,AAAAC,AAAiB,AAAA,AAAGd;AAA/B,AACE,AAAM,AAAAR,AAAgBqB,AAAM,AAAArB,AAAA,AAAgB,AAAOoB,AAAO,AAAOA;;AACjE,AAAM,AAAOA,AAAKC;;AAClB,AAAM,AAAMD,AAAK,AAAAG,AAAcF;;AAJnC;;;AAOJ,AAAA;;;;;;AAAA,AAAAG,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAP,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMO,AAKFC;AALJ,AAMG,AAAA,AAACC,AAAYD;;;AANhB,AAAA,AAAA,AAAMD,AAOFC,AAAOE;AAPX,AAQG,AAAMC,AAAI,AAAAC;AACJC,AAAI,AAAA,AAACC;AADX,AAEE,AAAM,AAAUH,AAAI,AAAKI;AAAL,AAAQ,AAACC,AAAQH,AAAI,AAAA,AAAIE;;;AAC7C,AAAgBJ,AAAG,AAAAM,AAAA,AAAA,AAAe,AAACjE,AAAgBwD,AAAqBE;;AACxEG;;;AAZL,AAAA,AAAA,AAAMN;;AAAN,AAeA,AAAA;;;;AAAA,AAAAF,AAAMc;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAnB,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMmB,AAGFX,AAAOY;AAHX,AAIG,AAAA,AAACC,AAAkBb,AAAOY;;;AAJ7B,AAAA,AAAA,AAAMD,AAKFX,AAAOY,AAAGV;AALd,AAMG,AAAMC,AAAG,AAAAC;AAAT,AACE,AAAA,AAAAU,AAAM,AAAUX;AAAhB,AAAqB,AAAAY,AAAI,AAAA,AAAAD;AAAJ,AAAA,AAAAC,AAAAA,AAACH,AAAAA,AAAAA;;;AACtB,AAAgBT,AAAG,AAAAM,AAAA,AAAA,AAAe,AAACjE,AAAgBwD,AAAqBE;;AAF1E;;;AANH,AAAA,AAAA,AAAMS;;AAAN,AAgBA,AAAA,AAAA,AAAAd,AAAMoB;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAzB,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMyB,AACchD;AADpB,AAEG,AAAA,AAACiD,AAAajD;;;AAFjB,AAAA,AAAA,AAAMgD,AAGchD,AAAIE;AAHxB,AAIG,AAAAJ,AAAqBE,AAAI,AAAA2B,AAAc3B,AAAKE;;;AAJ/C,AAAA,AAAA,AAAM8C;;AAAN,AAUA,AAAA,AAAA,AAAApB,AAAMuB;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAA5B,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAM4B;AAAN,AAEG,AAAA,AAACC;;;AAFJ,AAAA,AAAA,AAAMD,AAGF7B;AAHJ,AAIG,AAAA,AAAC+B,AAAc,AAAA3B,AAAiBJ;;;AAJnC,AAAA,AAAA,AAAM6B,AAKcnD,AAAIE;AALxB,AAMG,AAAAO,AAAsBT,AAAI,AAAA2B,AAAc3B,AAAKE;;;AANhD,AAAA,AAAA,AAAMiD;;AAAN","names":["x__4487__auto__","m__4488__auto__","thi.ng.dstruct.streams/read-utf8-line","goog/typeOf","m__4485__auto__","cljs.core/missing-protocol","thi.ng.dstruct.streams/read-uint8","thi.ng.dstruct.streams/read-uint16-le","thi.ng.dstruct.streams/read-uint16-be","thi.ng.dstruct.streams/read-uint32-le","thi.ng.dstruct.streams/read-uint32-be","thi.ng.dstruct.streams/read-float-le","thi.ng.dstruct.streams/read-float-be","thi.ng.dstruct.streams/read-double-le","thi.ng.dstruct.streams/read-double-be","thi.ng.dstruct.streams/read-vec2f-le","thi.ng.dstruct.streams/read-vec2f-be","thi.ng.dstruct.streams/read-vec3f-le","thi.ng.dstruct.streams/read-vec3f-be","thi.ng.dstruct.streams/IInputStream","_","thi.ng.dstruct.streams/write-utf8-bytes","thi.ng.dstruct.streams/write-uint8","thi.ng.dstruct.streams/write-uint16-le","thi.ng.dstruct.streams/write-uint16-be","thi.ng.dstruct.streams/write-uint32-le","thi.ng.dstruct.streams/write-uint32-be","thi.ng.dstruct.streams/write-float-le","thi.ng.dstruct.streams/write-float-be","thi.ng.dstruct.streams/write-double-le","thi.ng.dstruct.streams/write-double-be","thi.ng.dstruct.streams/write-vec2f-le","thi.ng.dstruct.streams/write-vec2f-be","thi.ng.dstruct.streams/write-vec3f-le","thi.ng.dstruct.streams/write-vec3f-be","thi.ng.dstruct.streams/IOutputStream","str","x","v","thi.ng.dstruct.streams/skip","thi.ng.dstruct.streams/get-position","thi.ng.dstruct.streams/IStreamPosition","thi.ng.dstruct.streams/get-byte-buffer","thi.ng.dstruct.streams/get-float-buffer","thi.ng.dstruct.streams/get-double-buffer","thi.ng.dstruct.streams/get-short-buffer","thi.ng.dstruct.streams/get-int-buffer","thi.ng.dstruct.streams/IBuffer","thi.ng.dstruct.streams/into-byte-buffer","thi.ng.dstruct.streams/into-float-buffer","thi.ng.dstruct.streams/into-double-buffer","thi.ng.dstruct.streams/into-short-buffer","thi.ng.dstruct.streams/into-int-buffer","thi.ng.dstruct.streams/IIntoBuffer","dest","stride","idx","thi.ng.dstruct.streams/utf8-str","js/encodeURIComponent","js/unescape","cljs.core/PROTOCOL_SENTINEL","this__4428__auto__","writer__4429__auto__","opt__4430__auto__","cljs.core/-write","thi.ng.dstruct.streams/InputStreamWrapper","thi.ng.dstruct.streams/->InputStreamWrapper","buf","dv","pos","thi.ng.dstruct.streams/ensure-readable","js/Uint8Array","js/Float32Array","js/Float64Array","js/Uint16Array","js/Uint32Array","thi.ng.dstruct.streams/OutputStreamWrapper","thi.ng.dstruct.streams/->OutputStreamWrapper","utf8","len","cljs.core/count","G__26312","G__26313","thi.ng.dstruct.streams/ensure-size","i","p","cljs.core/first","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","in","size","js/Error","out","buf'","js/ArrayBuffer","js/DataView","var_args","G__26323","thi.ng.dstruct.streams/as-data-url","stream","thi.ng.dstruct.streams.as_data_url.cljs$core$IFn$_invoke$arity$2","mime","fr","js/FileReader","uri","cljs.core/volatile!","e","cljs.core/vreset!","js/Blob","G__26328","thi.ng.dstruct.streams/as-data-url-async","cb","thi.ng.dstruct.streams.as_data_url_async.cljs$core$IFn$_invoke$arity$3","p1__26326#","G__26329","G__26331","thi.ng.dstruct.streams/input-stream","thi.ng.dstruct.streams.input_stream.cljs$core$IFn$_invoke$arity$2","G__26335","thi.ng.dstruct.streams/output-stream","thi.ng.dstruct.streams.output_stream.cljs$core$IFn$_invoke$arity$1","thi.ng.dstruct.streams.output_stream.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns thi.ng.dstruct.streams\n  (:require\n   [thi.ng.xerror.core :as err])\n  #?(:clj\n     (:import\n      [java.io OutputStream InputStream])))\n\n(declare ensure-readable ensure-size)\n\n(defprotocol IInputStream\n  (read-utf8-line [_])\n  (read-uint8 [_])\n  (read-uint16-le [_])\n  (read-uint16-be [_])\n  (read-uint32-le [_])\n  (read-uint32-be [_])\n  (read-float-le [_])\n  (read-float-be [_])\n  (read-double-le [_])\n  (read-double-be [_])\n  (read-vec2f-le [_])\n  (read-vec2f-be [_])\n  (read-vec3f-le [_])\n  (read-vec3f-be [_]))\n(defprotocol IOutputStream\n  (write-utf8-bytes [_ str])\n  (write-uint8 [_ x])\n  (write-uint16-le [_ x])\n  (write-uint16-be [_ x])\n  (write-uint32-le [_ x])\n  (write-uint32-be [_ x])\n  (write-float-le [_ x])\n  (write-float-be [_ x])\n  (write-double-le [_ x])\n  (write-double-be [_ x])\n  (write-vec2f-le [_ v])\n  (write-vec2f-be [_ v])\n  (write-vec3f-le [_ v])\n  (write-vec3f-be [_ v]))\n(defprotocol IStreamPosition\n  (skip [_ x])\n  (get-position [_]))\n(defprotocol IBuffer\n  (get-byte-buffer [_])\n  (get-float-buffer [_])\n  (get-double-buffer [_])\n  (get-short-buffer [_])\n  (get-int-buffer [_]))\n\n(defprotocol IIntoBuffer\n  (into-byte-buffer [_ dest stride idx])\n  (into-float-buffer [_ dest stride idx])\n  (into-double-buffer [_ dest stride idx])\n  (into-short-buffer [_ dest stride idx])\n  (into-int-buffer [_ dest stride idx]))\n\n#?(:clj (defn int->byte [x] (if (> x 0x7f) (- x 0x100) x)))\n#?(:clj (defn byte->int [x] (if (neg? x) (+ x 0x100) x)))\n\n;; http://stackoverflow.com/a/18729536/294515\n#?(:cljs (defn utf8-str [str] (-> str js/encodeURIComponent js/unescape)))\n\n#?(:clj\n   (deftype InputStreamWrapper [^InputStream in ^bytes buf]\n     IInputStream\n     (read-uint8\n         [_]\n       (byte->int (.read in)))\n     (read-uint16-le\n         [_]\n       (.read in buf 0 2)\n       (bit-or (byte->int (aget buf 0)) (bit-shift-left (byte->int (aget buf 1)) 8)))\n     (read-uint16-be\n         [_]\n       (.read in buf 0 2)\n       (bit-or (byte->int (aget buf 1)) (bit-shift-left (byte->int (aget buf 0)) 8)))\n     (read-uint32-le\n         [_]\n       (.read in buf 0 4)\n       (bit-or\n        (byte->int (aget buf 0))\n        (bit-shift-left (byte->int (aget buf 1)) 8)\n        (bit-shift-left (byte->int (aget buf 2)) 16)\n        (bit-shift-left (byte->int (aget buf 3)) 24)))\n     (read-uint32-be\n         [_]\n       (.read in buf 0 4)\n       (bit-or\n        (byte->int (aget buf 3))\n        (bit-shift-left (byte->int (aget buf 2)) 8)\n        (bit-shift-left (byte->int (aget buf 1)) 16)\n        (bit-shift-left (byte->int (aget buf 0)) 24)))\n     (read-float-le\n         [_] (Float/intBitsToFloat (unchecked-int (read-uint32-le _))))\n     (read-float-be\n         [_] (Float/intBitsToFloat (unchecked-int (read-uint32-be _))))\n     (read-double-le\n         [_]\n       (Double/longBitsToDouble\n        (unchecked-long\n         (bit-or\n          (read-uint32-le _)\n          (bit-shift-left (read-uint32-le _) 32)))))\n     (read-double-be\n         [_]\n       (Double/longBitsToDouble\n        (unchecked-long\n         (bit-or\n          (bit-shift-left (read-uint32-be _) 32)\n          (read-uint32-be _)))))\n     (read-vec2f-le\n         [_] [(read-float-le _) (read-float-le _)])\n     (read-vec2f-be\n         [_] [(read-float-be _) (read-float-be _)])\n     (read-vec3f-le\n         [_] [(read-float-le _) (read-float-le _) (read-float-le _)])\n     (read-vec3f-be\n         [_] [(read-float-be _) (read-float-be _) (read-float-be _)])\n     IStreamPosition\n     (skip\n         [_ x] (.skip in x) _)\n     (get-position\n         [_] (throw (UnsupportedOperationException.))))\n\n   :cljs\n   (deftype InputStreamWrapper [^js/ArrayBuffer buf ^js/DataView dv ^:mutable pos]\n     IInputStream\n     (read-uint8\n         [_]\n       (ensure-readable _ 1)\n       (let [x (.getUint8 dv pos)]\n         (set! pos (inc pos))\n         x))\n     (read-uint16-le\n         [_]\n       (ensure-readable _ 2)\n       (let [x (.getUint16 dv pos true)]\n         (set! pos (+ pos 2))\n         x))\n     (read-uint16-be\n         [_]\n       (ensure-readable _ 2)\n       (let [x (.getUint16 dv pos)]\n         (set! pos (+ pos 2))\n         x))\n     (read-uint32-le\n         [_]\n       (ensure-readable _ 4)\n       (let [x (.getUint32 dv pos true)]\n         (set! pos (+ pos 4))\n         x))\n     (read-uint32-be\n         [_]\n       (ensure-readable _ 4)\n       (let [x (.getUint32 dv pos)]\n         (set! pos (+ pos 4))\n         x))\n     (read-float-le\n         [_]\n       (ensure-readable _ 4)\n       (let [x (.getFloat32 dv pos true)]\n         (set! pos (+ pos 4))\n         x))\n     (read-float-be\n         [_]\n       (ensure-readable _ 4)\n       (let [x (.getFloat32 dv pos)]\n         (set! pos (+ pos 4))\n         x))\n     (read-double-le\n         [_]\n       (ensure-readable _ 8)\n       (let [x (.getFloat64 dv pos true)]\n         (set! pos (+ pos 8))\n         x))\n     (read-double-be\n         [_]\n       (ensure-readable _ 8)\n       (let [x (.getFloat64 dv pos)]\n         (set! pos (+ pos 8))\n         x))\n     (read-vec2f-le\n         [_] [(read-float-le _) (read-float-le _)])\n     (read-vec2f-be\n         [_] [(read-float-be _) (read-float-be _)])\n     (read-vec3f-le\n         [_] [(read-float-le _) (read-float-le _) (read-float-le _)])\n     (read-vec3f-be\n         [_] [(read-float-be _) (read-float-be _) (read-float-be _)])\n     IStreamPosition\n     (skip\n         [_ x]\n       (ensure-readable _ x)\n       (set! pos (+ pos x))\n       _)\n     (get-position\n         [_] pos)\n     IBuffer\n     (get-byte-buffer\n         [_] (js/Uint8Array. buf))\n     (get-float-buffer\n         [_] (js/Float32Array. buf))\n     (get-double-buffer\n         [_] (js/Float64Array. buf))\n     (get-short-buffer\n         [_] (js/Uint16Array. buf))\n     (get-int-buffer\n         [_] (js/Uint32Array. buf))))\n\n#?(:clj\n   (deftype OutputStreamWrapper [^OutputStream out ^bytes buf]\n     IOutputStream\n     (write-utf8-bytes\n         [_ str]\n       (.write out (.getBytes ^String str \"UTF-8\")) _)\n     (write-uint8\n         [_ x] (.write out (unchecked-byte (bit-and x 0xff))) _)\n     (write-uint16-le\n         [_ x]\n       (aset-byte buf 0 (unchecked-byte (bit-and x 0xff)))\n       (aset-byte buf 1 (unchecked-byte (bit-and (unsigned-bit-shift-right x 8) 0xff)))\n       (.write out buf 0 2)\n       _)\n     (write-uint16-be\n         [_ x]\n       (aset-byte buf 1 (unchecked-byte (bit-and x 0xff)))\n       (aset-byte buf 0 (unchecked-byte (bit-and (unsigned-bit-shift-right x 8) 0xff)))\n       (.write out buf 0 2)\n       _)\n     (write-uint32-le\n         [_ x]\n       (aset-byte buf 0 (unchecked-byte (bit-and x 0xff)))\n       (aset-byte buf 1 (unchecked-byte (bit-and (unsigned-bit-shift-right x 8) 0xff)))\n       (aset-byte buf 2 (unchecked-byte (bit-and (unsigned-bit-shift-right x 16) 0xff)))\n       (aset-byte buf 3 (unchecked-byte (unsigned-bit-shift-right x 24)))\n       (.write out buf 0 4)\n       _)\n     (write-uint32-be\n         [_ x]\n       (aset-byte buf 3 (unchecked-byte (bit-and x 0xff)))\n       (aset-byte buf 2 (unchecked-byte (bit-and (unsigned-bit-shift-right x 8) 0xff)))\n       (aset-byte buf 1 (unchecked-byte (bit-and (unsigned-bit-shift-right x 16) 0xff)))\n       (aset-byte buf 0 (unchecked-byte (unsigned-bit-shift-right x 24)))\n       (.write out buf 0 4)\n       _)\n     (write-float-le\n         [_ x]\n       (write-uint32-le _ (Float/floatToRawIntBits (float x))))\n     (write-float-be\n         [_ x]\n       (write-uint32-be _ (Float/floatToRawIntBits (float x))))\n     (write-double-le\n         [_ x]\n       (let [x (Double/doubleToRawLongBits (double x))]\n         (write-uint32-le _ (unchecked-int (bit-and x 0xffffffff)))\n         (write-uint32-le _ (unchecked-int (bit-and (unsigned-bit-shift-right x 32) 0xffffffff)))\n         _))\n     (write-double-be\n         [_ x]\n       (let [x (Double/doubleToRawLongBits (double x))]\n         (write-uint32-be _ (unchecked-int (bit-and (unsigned-bit-shift-right x 32) 0xffffffff)))\n         (write-uint32-be _ (unchecked-int (bit-and x 0xffffffff)))\n         _))\n     (write-vec2f-le\n         [_ v]\n       (write-float-le _ (first v))\n       (write-float-le _ (nth v 1))\n       _)\n     (write-vec2f-be\n         [_ v]\n       (write-float-be _ (first v))\n       (write-float-be _ (nth v 1))\n       _)\n     (write-vec3f-le\n         [_ v]\n       (write-float-le _ (first v))\n       (write-float-le _ (nth v 1))\n       (write-float-le _ (nth v 2))\n       _)\n     (write-vec3f-be\n         [_ v]\n       (write-float-be _ (first v))\n       (write-float-be _ (nth v 1))\n       (write-float-be _ (nth v 2))\n       _)\n     IStreamPosition\n     (skip\n         [_ x] (.write out (byte-array x)) _)\n     (get-position\n         [_] (throw (UnsupportedOperationException.))))\n\n   :cljs\n   (deftype OutputStreamWrapper\n       [^{:tag js/ArrayBuffer :mutable true} buf\n        ^{:tag js/DataView :mutable true} dv\n        ^:mutable pos]\n     IOutputStream\n     (write-utf8-bytes\n         [_ str]\n       (let [utf8 (utf8-str str)\n             len  (count utf8)]\n         (ensure-size _ (count utf8))\n         (loop [i 0, p pos]\n           (if (< i len)\n             (do (.setUint8 dv p (.charCodeAt utf8 i))\n                 (recur (inc i) (inc p)))\n             (set! pos p))))\n       _)\n     (write-uint8\n         [_ x]\n       (ensure-size _ 1)\n       (.setUint8 dv pos x)\n       (set! pos (inc pos))\n       _)\n     (write-uint16-le\n         [_ x]\n       (ensure-size _ 2)\n       (.setUint16 dv pos x true)\n       (set! pos (+ pos 2))\n       _)\n     (write-uint16-be\n         [_ x]\n       (ensure-size _ 2)\n       (.setUint16 dv pos x)\n       (set! pos (+ pos 2))\n       _)\n     (write-uint32-le\n         [_ x]\n       (ensure-size _ 4)\n       (.setUint32 dv pos x true)\n       (set! pos (+ pos 4))\n       _)\n     (write-uint32-be\n         [_ x]\n       (ensure-size _ 4)\n       (.setUint32 dv pos x)\n       (set! pos (+ pos 4))\n       _)\n     (write-float-le\n         [_ x]\n       (ensure-size _ 4)\n       (.setFloat32 dv pos x true)\n       (set! pos (+ pos 4))\n       _)\n     (write-float-be\n         [_ x]\n       (ensure-size _ 4)\n       (.setFloat32 dv pos x)\n       (set! pos (+ pos 4))\n       _)\n     (write-double-le\n         [_ x]\n       (ensure-size _ 8)\n       (.setFloat64 dv pos x true)\n       (set! pos (+ pos 8))\n       _)\n     (write-double-be\n         [_ x]\n       (ensure-size _ 8)\n       (.setFloat64 dv pos x)\n       (set! pos (+ pos 8))\n       _)\n     (write-vec2f-le\n         [_ v]\n       (ensure-size _ 8)\n       (.setFloat32 dv pos (first v) true)\n       (.setFloat32 dv (+ pos 4) (nth v 1) true)\n       (set! pos (+ pos 8))\n       _)\n     (write-vec2f-be\n         [_ v]\n       (ensure-size _ 8)\n       (.setFloat32 dv pos (first v))\n       (.setFloat32 dv (+ pos 4) (nth v 1))\n       (set! pos (+ pos 8))\n       _)\n     (write-vec3f-le\n         [_ v]\n       (ensure-size _ 12)\n       (.setFloat32 dv pos (first v) true)\n       (.setFloat32 dv (+ pos 4) (nth v 1) true)\n       (.setFloat32 dv (+ pos 8) (nth v 2) true)\n       (set! pos (+ pos 12))\n       _)\n     (write-vec3f-be\n         [_ v]\n       (ensure-size _ 12)\n       (.setFloat32 dv pos (first v))\n       (.setFloat32 dv (+ pos 4) (nth v 1))\n       (.setFloat32 dv (+ pos 8) (nth v 2))\n       (set! pos (+ pos 12))\n       _)\n     IStreamPosition\n     (skip\n         [_ x] (ensure-size _ x) (set! pos (+ pos x)) _)\n     (get-position\n         [_] pos)\n     IBuffer\n     (get-byte-buffer\n         [_] (js/Uint8Array. buf 0 pos))\n     (get-float-buffer\n         [_] (js/Float32Array. buf 0 (unsigned-bit-shift-right pos 2)))\n     (get-double-buffer\n         [_] (js/Float64Array. buf 0 (unsigned-bit-shift-right pos 3)))\n     (get-short-buffer\n         [_] (js/Uint16Array. buf 0 (unsigned-bit-shift-right pos 1)))\n     (get-int-buffer\n         [_] (js/Uint32Array. buf 0 (unsigned-bit-shift-right pos 2)))))\n\n#?(:cljs\n   (defn ^:private ensure-readable\n     [^InputStreamWrapper in size]\n     (if (> (+ (.-pos in) size) (.-byteLength (.-buf in)))\n       (throw\n        (js/Error.\n         (str \"EOF overrun, current pos: \" (.-pos in)\n              \", requested read length: \" size\n              \", but length: \" (.-byteLength (.-buf in))))))))\n\n#?(:cljs\n   (defn ^:private ensure-size\n     [^OutputStreamWrapper out size]\n     (let [len (.-byteLength (.-buf out))]\n       (if (> (+ (.-pos out) size) len)\n         (let [buf' (js/ArrayBuffer. (+ len 0x4000))]\n           (.set (js/Uint8Array. buf') (js/Uint8Array. (.-buf out) 0 (.-pos out)))\n           (set! (.-buf out) buf')\n           (set! (.-dv out) (js/DataView. buf')))))))\n\n#?(:cljs\n   (defn as-data-url\n  \"Takes an input or outputstream and optional mime type, returns\n  contents as data url wrapped in a volatile. The volatile's value is\n  initially nil and will only become realized after the function\n  returned.\"\n     ([stream]\n      (as-data-url stream \"application/octet-stream\"))\n     ([stream mime]\n      (let [fr  (js/FileReader.)\n            uri (volatile! nil)]\n        (set! (.-onload fr) (fn [e] (vreset! uri (-> e .-target .-result))))\n        (.readAsDataURL fr (js/Blob. #js [(get-byte-buffer stream)] #js {\"type\" mime}))\n        uri))))\n\n#?(:cljs\n   (defn as-data-url-async\n     \"Takes an input or outputstream, callback fn and optional mime\n  type, calls fn with data url string, returns nil.\"\n     ([stream cb]\n      (as-data-url-async stream cb \"application/octet-stream\"))\n     ([stream cb mime]\n      (let [fr (js/FileReader.)]\n        (set! (.-onload fr) #(cb (-> % .-target .-result)))\n        (.readAsDataURL fr (js/Blob. #js [(get-byte-buffer stream)] #js {\"type\" mime}))\n        nil))))\n\n#?(:clj\n   (defn input-stream\n     [^InputStream in]\n     (InputStreamWrapper. in (byte-array 12)))\n   :cljs\n   (defn input-stream\n     ([^js/ArrayBuffer buf]\n      (input-stream buf 0))\n     ([^js/ArrayBuffer buf pos]\n      (InputStreamWrapper. buf (js/DataView. buf) pos))))\n#?(:clj\n   (defn output-stream\n     [^OutputStream out]\n     (OutputStreamWrapper. out (byte-array 12)))\n   :cljs\n   (defn output-stream\n     ([]\n      (output-stream 0x1000))\n     ([size]\n      (output-stream (js/ArrayBuffer. size) 0))\n     ([^js/ArrayBuffer buf pos]\n      (OutputStreamWrapper. buf (js/DataView. buf) pos))))\n"]}