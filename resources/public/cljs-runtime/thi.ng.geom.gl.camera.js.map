{"version":3,"sources":["thi/ng/geom/gl/camera.cljc"],"mappings":";;;;;AAmBA;;;;AAAA,AAAMA,AAGHC,AAAKC;AAHR,AAIE,AAAA,AAAA,AAAA,AAAA,AAACC,AAAOF,AAAeG,AAAa,AAAA,AAACC,AAAIH,AAAiB,AAAA,AAACG,AAAIH;;AAEjE;;;;;AAAA,AAAMI,AAIHC,AAAEC,AAAGC;AAJR,AAKE,AAACC,AACA,AAAKC,AAAIC,AAAEC;AAAX,AAAc,AAACC,AAAMH,AAAIC,AAAE,AAAI,AAACG,AAAIF,AAAG,AAAAG,AAAG,AAACT,AAAAA,AAAAA,AAAEK,AAAAA;AAAN,AAAA,AAAAI,AAAAA,AAACH,AAAAA,AAAAA;AAASA;AACjDN,AAAE,AAACU,AAAYR,AAAKD;;AAEvB,AAAA,AAAMU,AACHhB,AAAIO;AADP,AAEE,AAAMP,AAAI,AAAA,AAAA,AAAA,AAAA,AAACI,AAAYJ,AAAuBO;AAA9C,AACE,AAAA,AAACK,AAAMZ,AAAU,AAACiB,AAAY,AAAA,AAACd,AAAIH,AAAU,AAAA,AAACG,AAAIH,AAAa,AAAA,AAACG,AAAIH;;AAExE,AAAA,AAAMkB,AACHlB,AAAIO;AADP,AAEE,AAAMP,AAAI,AAAA,AAAA,AAAA,AAAA,AAAA,AAACI,AAAYJ,AAA+BO;AAAtD,AACE,AAAA,AAACK,AAAMZ,AAAU,AAACmB,AAAgB,AAAA,AAAChB,AAAIH,AAAU,AAAA,AAACG,AAAIH,AAAa,AAAA,AAACG,AAAIH,AAAW,AAAA,AAACG,AAAIH;;AAE5F,AAAA,AAAMoB,AACHb;AADH,AAEM,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACc,AACS,AAAA,AAAA,AAAA,AAACC,AACDC,AACAC,AAIA,AAAA,AAAA,AACTjB,AACD,AAACS,AAAST,AACV,AAACW,AAAeX","names":["thi.ng.geom.gl.camera/apply","spec","cam","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/merge","cljs.core.get.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.gl.camera/update-keys","m","ks","opts","cljs.core/reduce-kv","acc","k","v","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/fn?","G__29864","cljs.core/select-keys","thi.ng.geom.gl.camera/set-view","thi.ng.geom.matrix/look-at","thi.ng.geom.gl.camera/set-projection","thi.ng.geom.matrix/perspective","thi.ng.geom.gl.camera/perspective-camera","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","thi.ng.geom.vector.vec3.cljs$core$IFn$_invoke$arity$3","thi.ng.geom.vector/V3","thi.ng.geom.vector/V3Y"],"sourcesContent":["(ns thi.ng.geom.gl.camera\n  (:refer-clojure :exclude [apply])\n  (:require\n   [thi.ng.math.core :as m]\n   [thi.ng.geom.vector :as v :refer [vec3]]\n   [thi.ng.geom.matrix :as mat]))\n\n;; Perspective camera\n;;\n;; | *Key*     | *Type*        |      *Default* | *Description*                           |\n;; |-----------+---------------+----------------+-----------------------------------------|\n;; | `:eye`    | vec3          |          `nil` | Camera position                         |\n;; | `:target` | vec3          |     `(vec3 0)` | Camera target (center of view)          |\n;; | `:up`     | vec3          | `(vec3 0 1 0)` | Camera up axis                          |\n;; | `:fov`    | float         |             45 | Vertical FOV in degrees                 |\n;; | `:aspect` | float or rect |           16:9 | Camera aspect ratio (or view rectangle) |\n;; | `:near`   | float         |            0.1 | Camera near clipping distance           |\n;; | `:far`    | float         |            100 | Camera far clipping distance            |\n\n(defn apply\n  \"Takes a GL model spec map & camera, injects :view & :proj\n  uniforms into spec.\"\n  [spec cam]\n  (update spec :uniforms merge {:view (get cam :view) :proj (get cam :proj)}))\n\n(defn update-keys\n  \"Takes a map m, key seq and map of new vals, replaces keys in m with\n  new vals. If a value in opts map is a function, applies fn to value\n  of key in original map.\"\n  [m ks opts]\n  (reduce-kv\n   (fn [acc k v] (assoc acc k (if (fn? v) (v (m k)) v)))\n   m (select-keys opts ks)))\n\n(defn set-view\n  [cam opts]\n  (let [cam (update-keys cam [:eye :target :up] opts)]\n    (assoc cam :view (mat/look-at (get cam :eye) (get cam :target) (get cam :up)))))\n\n(defn set-projection\n  [cam opts]\n  (let [cam (update-keys cam  [:fov :aspect :near :far] opts)]\n    (assoc cam :proj (mat/perspective (get cam :fov) (get cam :aspect) (get cam :near) (get cam :far)))))\n\n(defn perspective-camera\n  [opts]\n  (-> (merge\n       {:eye    (vec3 0.0 0.0 2.0)\n        :target v/V3\n        :up     v/V3Y\n        :fov    45\n        :near   0.1\n        :far    100\n        :aspect (/ 16.0 9.0)}\n       opts)\n      (set-view opts)\n      (set-projection opts)))\n"]}