{"version":3,"sources":["webgl_30/lessons/conway_core.cljc"],"mappings":"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","names":["webgl-30.lessons.conway-core/wrap","a","size","cljs.core/mod","webgl-30.lessons.conway-core/dx","webgl-30.lessons.conway-core/dy","p__563344","vec__563345","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","webgl-30.lessons.conway-core/neighbours","toroidal?","x","y","iter__4582__auto__","s__563349","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","xs__6292__auto__","cljs.core/first","iterys__4578__auto__","s__563351","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__563353","cljs.core/chunk-buffer","i__563352","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__563350","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4579__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__563348","dx","dy","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","p__563354","map__563355","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","webgl-30.lessons.conway-core/tick","cells","grid-size","neighbours","cell","s__563358","b__563360","i__563359","vec__563361","iter__563357","vec__563364","n-neighbours","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/frequencies","or__4185__auto__","cljs.core/set","p__563367","map__563368","webgl-30.lessons.conway-core/rect","width","height","x1","x2","y1","y2","webgl-30.lessons.conway-core/cell-lookup-map","cell-size","s__563371","s__563373","b__563375","i__563374","iter__563372","iter__563370","cljs.core.range.cljs$core$IFn$_invoke$arity$2","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","lookup","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/last","webgl-30.lessons.conway-core/lookup->data","cljs.core/select-keys","cljs.core/vals","cljs.core/flatten","webgl-30.lessons.conway-core/cells->rects","p__563376","vec__563377","acc","cljs.core/chunk-first"],"sourcesContent":["(ns webgl-30.lessons.conway-core)\n\n(defn wrap\n  [a size]\n  (mod (+ a size) size))\n\n(def dx [-1 0 1])\n(def dy [-1 0 1])\n\n(defn neighbours\n  \"Find the 8 members of a given x,y coordinates.\n   The grid is considered to be a toroidal so edges wraps around.\n\n   XXX\n   X.X\n   XXX\n\n   \"\n  [size toroidal? [x y]]\n  (for [dx dx\n        dy dy\n        :when (not (= [0 0] [dx dy]))]\n    (do\n      (if toroidal?\n        [(wrap (+ dx x) size) (wrap (+ dy y) size)]\n        [(+ dx x) (+ dy y)]))))\n\n(defn tick\n  [{:keys [cells grid-size toroidal?]}]\n  (let [neighbours (fn [cell] (neighbours grid-size toroidal? cell))]\n    (-> (for [[cell n-neighbours] (->> (mapcat neighbours cells)\n                                       frequencies)\n              :when (or (= n-neighbours 3)                  ;; bring back to life\n                        (and (= n-neighbours 2) (cells cell)))] ;; it's alive with 2 bros\n          cell)\n        set)))\n\n(defn rect\n  [{:keys [x y width height]}]\n  (let [x1 x\n        x2 (+ x width)\n        y1 y\n        y2 (+ y height)]\n    [x1 y1\n     x2 y1\n     x1 y2\n     x1 y2\n     x2 y1\n     x2 y2]))\n\n(defn cell-lookup-map\n  [grid-size cell-size]\n  (->> (for [x (range 0 grid-size)\n             y (range 0 grid-size)]\n         [x y])\n       (reduce (fn [lookup cell]\n                 (assoc lookup cell (rect {:x     (* cell-size (first cell))\n                                           :y     (* cell-size (last cell))\n                                           :width cell-size :height cell-size}))) {})))\n\n(defn lookup->data\n  [lookup cells]\n  (-> lookup\n      (select-keys cells)\n      vals\n      flatten))\n\n(defn cells->rects\n  [cells cell-size]\n  (reduce (fn [acc [x y]]\n            (concat acc (rect {:x      (* cell-size x)\n                               :y      (* cell-size y)\n                               :width  cell-size\n                               :height cell-size}))) [] cells))\n\n(comment\n\n  (-> (cell-lookup-map 3 10)\n      (select-keys #{[0 0] [2 2]})\n      vals\n      flatten\n      )\n\n  (select-keys (cell-lookup-map 400 10)\n               [[0 0] [2 2]])\n\n  )\n\n\n"]}