{"version":3,"sources":["webgl_30/lessons/rotation_2d_0.cljs"],"mappings":"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","names":["webgl-30.lessons.rotation-2d-0/initial-state","js/webgl-30","js/webgl-30.lessons","js/webgl-30.lessons.rotation-2d-0","js/webgl-30.lessons.rotation-2d-0.state-atom","webgl-30.lessons.rotation-2d-0/state-atom","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/deref","cljs.core/reset!","webgl-30.lessons.rotation-2d-0/fragment-shader","webgl-30.lessons.rotation-2d-0/vertex-shader","webgl-30.lessons.rotation-2d-0/draw!","timestamp","map__26061","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","rect","state","cljs.core/assoc-in","webgl-30.webgl/draw-scene!","webgl-30.lessons.rotation-2d-0/setup!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","p__26090","map__26091","gl","program","webgl-30.webgl/link-shaders!","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","webgl-30.webgl/attribute","js/Float32Array","webgl-30.shapes/f-shape-2d","webgl-30.lessons.rotation-2d-0/lesson","webgl-30.core/get-filename","canvas-id","webgl-30.component/webgl-canvas","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","webgl-30.webgl/get-context","js/requestAnimationFrame","webgl-30.component/slider","val","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","webgl-30.component/unit-circle","p__26111","map__26112","x","y"],"sourcesContent":["(ns webgl-30.lessons.rotation-2d-0\n  (:require [reagent.core :as r]\n            [webgl-30.webgl :as webgl]\n            [webgl-30.shapes :as shapes]\n            [webgl-30.core :as c]\n            [webgl-30.component :refer [webgl-canvas slider unit-circle]]))\n\n(def initial-state {:gl   nil\n                    :rect {:x        0\n                           :y        0\n                           :rotation [0 1]\n                           :width    100\n                           :height   30\n                           :color    [0.3 0.3 0.3 1]}})\n(defonce state-atom (r/atom nil))\n(when (nil? @state-atom)\n  (reset! state-atom initial-state))\n\n(def fragment-shader\n  \"precision mediump float;\n   uniform vec4 u_color;\n   void main() {\n       gl_FragColor = u_color;\n   }\")\n\n(def vertex-shader\n  \"attribute vec2 a_position;\n\n  uniform vec2 u_resolution;\n  uniform vec2 u_translation;\n  uniform vec2 u_rotation;\n\n  void main() {\n        vec2 rotatedPosition = vec2(\n          a_position.x * u_rotation.y + a_position.y * u_rotation.x,\n          a_position.y * u_rotation.y - a_position.x * u_rotation.x);\n\n       vec2 position = rotatedPosition + u_translation;\n\n       // convert the position from pixels to 0.0 to 1.0\n       vec2 zeroToOne = position / u_resolution;\n\n       // convert from 0->1 to 0->2\n       vec2 zeroToTwo = zeroToOne * 2.0;\n\n       // convert from 0->2 to -1->+1 (clip space)\n       vec2 clipSpace = zeroToTwo - 1.0;\n\n       gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1); // * vec(1, -1) flips y so it's top-left corner.\n  }\")\n\n(defn draw!\n  [timestamp]\n  (let [{:keys [rect] :as state} @state-atom]\n    (-> (assoc-in state [:objects-to-draw :my-rect :uniforms :u_translation :values] [(:x rect) (:y rect)])\n        (assoc-in [:objects-to-draw :my-rect :uniforms :u_rotation :values] (:rotation rect))\n        webgl/draw-scene!)))\n\n(defn setup!\n  []\n  (-> (swap! state-atom (fn [{:keys [gl rect] :as state}]\n                          (let [program (webgl/link-shaders! gl {:fs fragment-shader :vs vertex-shader})]\n                            (assoc state :objects-to-draw\n                                         {:my-rect {:program    program\n                                                    :attributes {:a_position (webgl/attribute gl program\n                                                                                              {:name \"a_position\"\n                                                                                               :size 2\n                                                                                               :data (js/Float32Array. shapes/f-shape-2d)})}\n                                                    :uniforms   {:u_resolution  {:name   \"u_resolution\"\n                                                                                 :type   \"uniform2f\"\n                                                                                 :values [(aget gl \"canvas\" \"width\") (aget gl \"canvas\" \"height\")]}\n                                                                 :u_color       {:name   \"u_color\"\n                                                                                 :type   \"uniform4fv\"\n                                                                                 :values (:color rect)}\n                                                                 :u_translation {:name   \"u_translation\"\n                                                                                 :type   \"uniform2fv\"\n                                                                                 :values [(:x rect) (:y rect)]}\n                                                                 :u_rotation    {:name   \"u_rotation\"\n                                                                                 :type   \"uniform2fv\"\n                                                                                 :values (:rotation rect)}\n                                                                 }\n                                                    :element    {:draw-type (.-TRIANGLES gl)\n                                                                 :offset    0\n                                                                 :count     18}}}))))))\n\n(def ^:export lesson\n  {:title           (fn []\n                      [:div\n                       [:h1 {:style {:font-family \"monospace\"}}\n                        \"Lesson - WebGL 2D Rotation\"]\n                       [:h4 {:style {:font-family \"monospace\"}}\n                        \"Rotation!\"]])\n   :source          (c/get-filename #'state-atom)\n   :tutorial-source \"webgl-2d-rotation.html\"\n   :start           (fn []\n                      (let [canvas-id \"translation\"]\n                        [:div {:style {:display        \"flex\"\n                                       :flex-direction \"row\"}}\n                         [webgl-canvas {:height   400\n                                        :width    400\n                                        :id       canvas-id\n                                        :on-mount (fn []\n                                                    (do\n                                                      (swap! state-atom assoc :gl (webgl/get-context canvas-id))\n                                                      (setup!)\n                                                      (js/requestAnimationFrame draw!)))}]\n                         [:div {:style {:margin-left \"30px\"}}\n                          [:div {:style {:display        \"flex\"\n                                         :flex-direction \"row\"}}\n                           [:span {:style {:color        \"white\"\n                                           :margin-right \"10px\"}} \"x\"]\n                           [slider {:on-change (fn [val]\n                                                 (swap! state-atom assoc-in [:rect :x] val)\n                                                 (js/requestAnimationFrame draw!))\n                                    :value     (get-in @state-atom [:rect :x])\n                                    :min       0\n                                    :max       400\n                                    :id        \"x-slider\"}]\n                           [:span {:style {:color        \"white\"\n                                           :margin-right \"10px\"}} (get-in @state-atom [:rect :x])]]\n                          [:div {:style {:display        \"flex\"\n                                         :flex-direction \"row\"}}\n                           [:span {:style {:color        \"white\"\n                                           :margin-right \"10px\"}} \"y\"]\n                           [slider {:on-change (fn [val]\n                                                 (swap! state-atom assoc-in [:rect :y] val)\n                                                 (js/requestAnimationFrame draw!))\n                                    :value     (get-in @state-atom [:rect :y])\n                                    :min       0\n                                    :max       400\n                                    :id        \"y-slider\"}]\n                           [:span {:style {:color        \"white\"\n                                           :margin-right \"10px\"}} (get-in @state-atom [:rect :y])]]\n                          [unit-circle {:height    300\n                                        :width     300\n                                        :radius    120\n                                        :on-change (fn [{:keys [x y]}]\n                                                     (swap! state-atom assoc-in [:rect :rotation] [x y])\n                                                     (js/requestAnimationFrame draw!))}]\n                          ]\n\n                         ]))})\n"]}