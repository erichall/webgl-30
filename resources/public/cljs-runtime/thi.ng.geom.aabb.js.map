{"version":3,"sources":["thi/ng/geom/aabb.cljc"],"mappings":"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","names":["var_args","G__30226","thi.ng.geom.aabb/aabb","js/Error","thi.ng.geom.types/AABB","thi.ng.geom.vector.vec3.cljs$core$IFn$_invoke$arity$1","size","o","sx","sy","sz","thi.ng.geom.vector.vec3.cljs$core$IFn$_invoke$arity$3","thi.ng.geom.aabb/aabb-from-minmax","p","q","thi.ng.math.core.min.cljs$core$IFn$_invoke$arity$2","thi.ng.math.core._.cljs$core$IFn$_invoke$arity$2","thi.ng.math.core.max.cljs$core$IFn$_invoke$arity$2","cljs.core/PROTOCOL_SENTINEL","p__30237","map__30238","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","vec__30239","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","map__30246","vec__30247","w","h","d","_","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","ext","thi.ng.math.core._STAR_.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.utils.bounding_sphere.cljs$core$IFn$_invoke$arity$2","thi.ng.math.core._PLUS_.cljs$core$IFn$_invoke$arity$2","thi.ng.math.core/mag","p__30378","map__30379","vec__30380","map__30384","vec__30385","px","py","pz","s","and__4174__auto__","thi.ng.math.core.in_range_QMARK_.cljs$core$IFn$_invoke$arity$3","p__30363","map__30364","map__30366","p__30368","map__30373","map__30375","thi.ng.math.core/madd","p__30348","vec__30349","x","y","z","vec__30352","vec__30355","x1","y1","z1","x2","y2","z2","on-plane?","p__30358","vec__30359","minp","maxp","min1","max1","min2","max2","c1","c2","or__4185__auto__","thi.ng.math.core.delta_EQ_.cljs$core$IFn$_invoke$arity$3","thi.ng.math.core/*eps*","cljs.core/some","vec__30338","vec__30341","a","g","vec__30394","b","c","e","f","thi.ng.geom.core.vertices.cljs$core$IFn$_invoke$arity$1","vec__30344","thi.ng.geom.utils.intersect.intersect_aabb_aabb_QMARK_.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.types/Sphere","thi.ng.geom.utils.intersect.intersect_aabb_sphere_QMARK_.cljs$core$IFn$_invoke$arity$2","thi.ng.xerror.core/type-error!","p__30318","map__30319","cljs.core.get.cljs$core$IFn$_invoke$arity$3","thi.ng.geom.core.as_mesh.cljs$core$IFn$_invoke$arity$2","mesh","flags","attribs","vec__30321","vec__30324","north","south","east","west","front","back","thi.ng.dstruct.core/demunge-flags-seq","thi.ng.geom.attribs/generate-face-attribs","cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic","cljs.core.filter.cljs$core$IFn$_invoke$arity$1","cljs.core/identity","thi.ng.geom.core/into","thi.ng.geom.basicmesh/basic-mesh","p__30307","map__30308","map__30310","p__30259","map__30260","vec__30261","map__30265","vec__30266","thi.ng.math.core/clamp","vec__30291","vec__30294","thi.ng.math.core.random.cljs$core$IFn$_invoke$arity$2","vec__30299","vec__30302","id","thi.ng.math.core.random.cljs$core$IFn$_invoke$arity$1","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","pa","pb","qa","qb","p'","q'","s'","p1__30234#","cljs.core/every?","p__30274","map__30276","thi.ng.geom.core.subdivide.cljs$core$IFn$_invoke$arity$2","num","cols","rows","slices","thi.ng.math.core.div.cljs$core$IFn$_invoke$arity$4","iter__4582__auto__","s__30283","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","xs__6292__auto__","cljs.core/first","iterys__4578__auto__","s__30285","s__30287","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__30289","cljs.core/chunk-buffer","i__30288","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__30286","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4579__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__30284","iter__30282","cljs.core/butlast","thi.ng.math.core/norm-range","p__30409","map__30410","thi.ng.geom.core.tessellate.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.utils/tessellate-3","opts","cljs.core/keys","cljs.core.sequence.cljs$core$IFn$_invoke$arity$2","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1","thi.ng.geom.core/faces","theta","thi.ng.geom.core/rotate-z","thi.ng.geom.cuboid.cuboid.cljs$core$IFn$_invoke$arity$2","thi.ng.geom.core/rotate-x","thi.ng.geom.core/rotate-y","axis","thi.ng.geom.core/rotate-around-axis","t","m","thi.ng.geom.core/transform","p__30397","map__30398","vec__30399","map__30403","vec__30404","cljs.core/chunk-first"],"sourcesContent":["(ns thi.ng.geom.aabb\n  #?(:cljs\n     (:require-macros\n      [thi.ng.math.macros :as mm]))\n  (:require\n   [thi.ng.geom.core :as g]\n   [thi.ng.geom.utils :as gu]\n   [thi.ng.geom.utils.intersect :as isec]\n   [thi.ng.geom.vector :as v :refer [vec3]]\n   [thi.ng.geom.matrix :refer [M44]]\n   [thi.ng.geom.cuboid :as cu]\n   [thi.ng.geom.basicmesh :as bm]\n   [thi.ng.geom.attribs :as attr]\n   [thi.ng.dstruct.core :as d]\n   [thi.ng.xerror.core :as err]\n   [thi.ng.math.core :as m :refer [*eps*]]\n   #?(:clj [thi.ng.geom.types] :cljs [thi.ng.geom.types :refer [AABB Sphere]])\n   #?(:clj [thi.ng.math.macros :as mm]))\n  #?(:clj (:import [thi.ng.geom.types AABB Sphere])))\n\n(defn aabb\n  \"Creates a new axis-aligned bounding box.\"\n  ([] (AABB. (vec3 0.0) (vec3 1.0)))\n  ([size] (AABB. (vec3 0.0) (vec3 size)))\n  ([o size] (AABB. (vec3 o) (vec3 size)))\n  ([sx sy sz] (AABB. (vec3 0.0) (vec3 sx sy sz))))\n\n(defn aabb-from-minmax\n  [p q]\n  (let [p (vec3 p)\n        q (vec3 q)\n        p (m/min p q)]\n    (AABB. p (m/- (m/max p q) p))))\n\n(extend-type AABB\n\n  g/IArea\n  (area [{[w h d] :size}] (* 2.0 (mm/madd w h d h w d)))\n\n  g/IBounds\n  (bounds [_] _)\n  (width  [_] (nth (get _ :size) 0))\n  (height [_] (nth (get _ :size) 1))\n  (depth  [_] (nth (get _ :size) 2))\n\n  g/IBoundingSphere\n  (bounding-sphere\n    [_]\n    (let [ext (m/* (get _ :size) 0.5)]\n      (gu/bounding-sphere (m/+ (get _ :p) ext) (m/mag ext))))\n\n  g/IBoundary\n  (contains-point?\n    [{[px py pz] :p s :size} q]\n    (and (m/in-range? px (+ px (nth s 0)) (nth q 0))\n         (m/in-range? py (+ py (nth s 1)) (nth q 1))\n         (m/in-range? pz (+ pz (nth s 2)) (nth q 2))))\n  g/ICenter\n  (center\n    ([{size :size}]\n     (AABB. (m/* size -0.5) size))\n    ([{size :size} q]\n     (AABB. (m/madd size -0.5 q) size)))\n  (centroid\n    [_] (m/madd (get _ :size) 0.5 (get _ :p)))\n\n  g/IClassify\n  (classify-point\n    [_ [x y z]]\n    (let [[x1 y1 z1 :as p] (get _ :p)\n          [x2 y2 z2]       (m/+ p (get _ :size))\n          on-plane?        (fn [[minp maxp p min1 max1 min2 max2 c1 c2]]\n                             (and (or (m/delta= minp p *eps*)\n                                      (m/delta= maxp p *eps*))\n                                  (m/in-range? min1 max1 c1)\n                                  (m/in-range? min2 max2 c2)))]\n      (if (some on-plane?\n                [[x1 x2 x y1 y2 z1 z2 y z]\n                 [y1 y2 y x1 x2 z1 z2 x z]\n                 [z1 z2 z x1 x2 y1 y2 x y]])\n        0\n        (if (and (m/in-range? x1 x2 x)\n                 (m/in-range? y1 y2 y)\n                 (m/in-range? z1 z2 z))\n          1 -1))))\n\n  ;; e +----+ h\n  ;;   |\\   :\\\n  ;;   |f+----+ g\n  ;;   | |  : |\n  ;; a +-|--+d|\n  ;;    \\|   \\|\n  ;;   b +----+ c\n  ;;\n  ;; Faces are always returned in this order: east, west, north, south,\n  ;; front, back - assuming the vertex order given in the diagram.\n\n  g/IVertexAccess\n  (vertices\n    [_]\n    (let [[x1 y1 z1 :as a] (get _ :p)\n          [x2 y2 z2 :as g] (m/+ a (get _ :size))]\n      [a (vec3 x1 y1 z2) (vec3 x2 y1 z2) (vec3 x2 y1 z1)\n       (vec3 x1 y2 z1) (vec3 x1 y2 z2) g (vec3 x2 y2 z1)]))\n\n  g/IEdgeAccess\n  (edges\n    [_]\n    (let [[a b c d e f g h] (g/vertices _)]\n      [[a b] [b c] [c d] [d a] ;; bottom\n       [e f] [f g] [g h] [h e] ;; top\n       [a e] [b f]             ;; left\n       [c g] [d h]             ;; right\n       ]))\n\n  g/IFaceAccess\n  (faces\n    [_]\n    (let [[a b c d e f g h] (g/vertices _)]\n      [[c d h g] ;; east\n       [a b f e] ;; west\n       [f g h e] ;; north\n       [a d c b] ;; south\n       [b c g f] ;; front\n       [d a e h] ;; back\n       ]))\n\n  g/IIntersect\n  (intersect-shape\n    [_ s]\n    (cond\n      (instance? AABB s)\n      (isec/intersect-aabb-aabb? _ s)\n      (instance? Sphere s)\n      (isec/intersect-aabb-sphere? _ s)\n      :else (err/type-error! \"AABB\" s)))\n\n  g/IMeshConvert\n  (as-mesh\n    ([_] (g/as-mesh _ {}))\n    ([_ {:keys [mesh flags attribs] :or {flags \"nsewfb\"}}]\n     (let [[a b c d e f g h]                  (g/vertices _)\n           [north south east west front back] (d/demunge-flags-seq flags \"nsewfb\")]\n       (->> [(if east  (attr/generate-face-attribs [c d h g] 0 attribs nil))\n             (if west  (attr/generate-face-attribs [a b f e] 1 attribs nil))\n             (if north (attr/generate-face-attribs [f g h e] 2 attribs nil))\n             (if south (attr/generate-face-attribs [a d c b] 3 attribs nil))\n             (if front (attr/generate-face-attribs [b c g f] 4 attribs nil))\n             (if back  (attr/generate-face-attribs [d a e h] 5 attribs nil))]\n            (eduction (filter identity))\n            (g/into (or mesh (bm/basic-mesh)))))))\n\n  ;; `map-point` takes an AABB and 3D point, returns the point in normalized UVW\n  ;; coords in local box space, where [0,0,0] is equivalent to the\n  ;; AABB's min point and [1,1,1] the point diagonally opposite. If\n  ;; any of the resulting coordinates is outside the 0.0 .. 1.0\n  ;; interval, the orginal point was outside the box.\n  ;;\n  ;; `unmap-point` is the inverse operation of =map-point=. It maps a\n  ;; point in local UVW coordinates to its world position.\n\n  g/IPointMap\n  (map-point\n    [{:keys [p size]} q]\n    (vec3\n     (mm/subdiv (nth q 0) (nth p 0) (nth size 0))\n     (mm/subdiv (nth q 1) (nth p 1) (nth size 1))\n     (mm/subdiv (nth q 2) (nth p 2) (nth size 2))))\n  (unmap-point\n    [_ q] (m/madd q (get _ :size) (get _ :p)))\n\n  g/IProximity\n  (closest-point\n    [{[px py pz] :p size :size} q]\n    (vec3\n     (m/clamp (nth q 0) px (+ px (nth size 0)))\n     (m/clamp (nth q 1) py (+ py (nth size 1)))\n     (m/clamp (nth q 2) pz (+ pz (nth size 2)))))\n\n  g/ISample\n  (random-point-inside\n    [_]\n    (let [[x1 y1 z1 :as p] (get _ :p)\n          [x2 y2 z2]       (m/+ p (get _ :size))]\n      (vec3 (m/random x1 x2) (m/random y1 y2) (m/random z1 z2))))\n  (random-point\n    [_]\n    (let [[x1 y1 z1 :as p] (get _ :p)\n          [x2 y2 z2]       (m/+ p (get _ :size))\n          id               (int (m/random 6))]\n      (cond\n        (< id 2) (vec3 (if (zero? id) x1 x2) (m/random y1 y2) (m/random z1 z2))\n        (< id 4) (vec3 (m/random x1 x2) (if (= 2 id) y1 y2) (m/random z1 z2))\n        :else    (vec3 (m/random x1 x2) (m/random y1 y2) (if (= 4 id) z1 z2)))))\n\n  ;; Maybe `difference` isn't suitable here and should only implement\n  ;;       ops which retain AABB type. Difference already implemented in\n  ;;       csg ns\n  ;;\n  ;; The implementations for this protocol are only intended to work with\n  ;; other AABBs and no type checking is done.\n  ;;\n  ;; - `union` returns the union box of both args\n  ;; - `intersection` returns the AABB of the intersection volume of both\n  ;;   args or `nil` if there's no overlap. Intersection is defined also\n  ;;   for touching boxes or if overlap is only a single point (in which\n  ;;   case the size of the resulting AABB will be zero)\n  ;; - `difference` (still missing) will return a mesh of the remaining\n  ;;   volume after the 2nd box has been subtracted from the first (or\n  ;;   `nil` in case of no overlap)\n\n  m/ISetOps\n  (union\n    [_ b]\n    (let [pa (get _ :p)\n          pb (get b :p)\n          p  (m/min pa pb)]\n      (AABB.\n       p (m/- (m/max (m/+ pa (get _ :size)) (m/+ pb (get b :size))) p))))\n  (intersection\n    [_ b]\n    (let [pa (get _ :p)\n          qa (m/+ pa (get _ :size))\n          pb (get b :p)\n          qb (m/+ pb (get b :size))\n          p' (m/max pa pb)\n          q' (m/min qa qb)\n          s' (m/- q' p')]\n      (if (every? #(>= % 0.0) s')\n        (AABB. p' s'))))\n\n  ;; An AABB can be subdivided into smaller ones, i.e. to create a seq of\n  ;; uniform grid cells. The following options can be given as a 2nd\n  ;; argument map:\n  ;;\n  ;; | Key       | Description                                                          | Default |\n  ;; |-----------+----------------------------------------------------------------------+---------|\n  ;; | `:num`    | number of cols/rows/slices the box will be uniformly subdivided into |       1 |\n  ;; | `:cols`   | number of times the box will be subdivided along the X-axis          |       1 |\n  ;; | `:rows`   | number of times the box will be subdivided along the Y-axis          |       1 |\n  ;; | `:slices` | number of times the box will be subdivided along the Z-axis          |       1 |\n  ;;\n  ;; When `:num` is given, the resulting AABBs will retain the aspect ratio\n  ;; of the original. If specified, `:cols`, `:rows` and `:slices` will\n  ;; take precedence over `:num`, but the latter will be used as default\n  ;; for missing args. AABBs are returned as a lazyseq starting from `:p`\n  ;; of the original with inner sorting over XYZ.\n\n  g/ISubdivide\n  (subdivide\n    ([_] (g/subdivide _ {}))\n    ([_ {:keys [num cols rows slices] :or {num 1}}]\n     (let [sx   (or cols num)\n           sy   (or rows num)\n           sz   (or slices num)\n           p    (get _ :p)\n           size (get _ :size)\n           s    (m/div size sx sy sz)]\n       (for [z (butlast (m/norm-range sz))\n             y (butlast (m/norm-range sy))\n             x (butlast (m/norm-range sx))]\n         (AABB. (m/madd (vec3 x y z) size p) s)))))\n\n  ;; TODO Only keep faces on the surface of the original box (no inside walls)\n  ;; could use Quad3 face tessellation, but would require moving Q3's\n  ;; subdivision into utils ns to avoid circular dependency.\n\n  g/ITessellate\n  (tessellate\n    ([_] (g/tessellate _ {}))\n    ([_ {f :fn :or {f gu/tessellate-3} :as opts}]\n     (->> (if (some #{:num :cols :rows :slices} (keys opts))\n            (g/subdivide _ opts)\n            [_])\n          (sequence\n           (comp\n            (mapcat g/faces)\n            (mapcat f))))))\n\n  g/IRotate\n  (rotate\n    [_ theta] (g/rotate-z (cu/cuboid (get _ :p) (get _ :size)) theta))\n\n  g/IRotate3D\n  (rotate-x\n    [_ theta] (g/rotate-x (cu/cuboid (get _ :p) (get _ :size)) theta))\n  (rotate-y\n    [_ theta] (g/rotate-y (cu/cuboid (get _ :p) (get _ :size)) theta))\n  (rotate-z\n    [_ theta] (g/rotate-z (cu/cuboid (get _ :p) (get _ :size)) theta))\n  (rotate-around-axis\n    [_ axis theta] (g/rotate-around-axis (cu/cuboid (get _ :p) (get _ :size)) axis theta))\n\n  g/IScale\n  (scale\n    [_ s] (AABB. (m/* (get _ :p) s) (m/* (get _ :size) s)))\n  (scale-size\n    [_ s]\n    (let [s' (m/* (get _ :size) s)]\n      (AABB. (m/madd (m/- s' (get _ :size)) -0.5 (get _ :p)) s')))\n\n  g/ITranslate\n  (translate\n    [_ t] (AABB. (m/+ (get _ :p) t) (get _ :size)))\n\n  g/ITransform\n  (transform\n    [_ m] (g/transform (cu/cuboid (get _ :p) (get _ :size)) m))\n\n  g/IVolume\n  (volume [{[w h d] :size}] (mm/mul w h d)))\n"]}