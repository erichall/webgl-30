{"version":3,"sources":["webgl_tutorial/bare_bone.cljs"],"mappings":"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","names":["webgl-tutorial.bare-bone/init!","webgl-tutorial.bare-bone/reload!","webgl-tutorial.bare-bone/canvas","js/document.querySelector","webgl-tutorial.bare-bone/gl","webgl-tutorial.bare-bone/shaders","webgl-tutorial.bare-bone/create-shader","gl","type","source","shader","success","js/console.log","webgl-tutorial.bare-bone/create-program","vertex-shader","fragment-shader","program","webgl-tutorial.bare-bone/resize-canvas-to-display-size","canvas","css-to-real-pixels","or__4185__auto__","js/window","d-width","G__30572","Math/floor","d-height","G__30573","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","webgl-tutorial.bare-bone/set-gl-viewport!","width","height","webgl-tutorial.bare-bone/clear-canvas!","webgl-tutorial.bare-bone/set-rectangle!","x","y","x1","x2","y1","y2","js/Float32Array","webgl-tutorial.bare-bone/random-int","range","G__30574","Math/random","webgl-tutorial.bare-bone/initialize-gl!","vs","fs","webgl-tutorial.bare-bone/draw-scene!","position-attribute-location","uniform-location","position-buffer","size","normalize","stride","offset","uniform-color-location","seq__30575","cljs.core/seq","chunk__30576","count__30577","i__30578","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","ii","cljs.core.range.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns webgl-tutorial.bare-bone)\n\n(defn init! [])\n(defn reload! [])\n\n(def canvas (js/document.querySelector \"#main\"))\n(def gl (.getContext canvas \"webgl\"))\n\n(def shaders\n  {\n   :vs \"\n   attribute vec2 a_position;\n   uniform vec2 u_resolution;\n\n    void main() {\n      vec2 zeroToOne = a_position / u_resolution;\n      vec2 zeroToTwo = zeroToOne * 2.0;\n      vec2 clipSpace = zeroToTwo - 1.0;\n\n      gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\n    }\n   \"\n   :fs \"precision mediump float;\n     uniform vec4 u_color;\n     void main() {\n       gl_FragColor = u_color;\n     }\n   \"\n   })\n\n(defn create-shader\n  [gl type source]\n  (let [shader (.createShader gl type)]\n    (.shaderSource gl shader source)\n    (.compileShader gl shader)\n    (let [success (.getShaderParameter gl shader (.-COMPILE_STATUS gl))]\n      (if success\n        shader\n        (do\n          (js/console.log (.getShaderInfoLog gl shader))\n          (.deleteShader gl shader))))))\n\n(defn create-program\n  [gl vertex-shader fragment-shader]\n  (let [program (.createProgram gl)]\n    (.attachShader gl program vertex-shader)\n    (.attachShader gl program fragment-shader)\n    (.linkProgram gl program)\n    (let [success (.getProgramParameter gl program (.-LINK_STATUS gl))]\n      (if success\n        program\n        (do\n          (js/console.log (.getProgramInfoLog gl program))\n          (.deleteProgram gl program))))))\n\n(defn resize-canvas-to-display-size\n  [gl]\n  (let [canvas (.-canvas gl)\n        css-to-real-pixels (or (.-devicePixelRatio js/window) 1)\n        d-width (Math/floor (* (.-clientWidth canvas) css-to-real-pixels))\n        d-height (Math/floor (* (.-clientHeight canvas) css-to-real-pixels))]\n    (when-not (or (= (.-width canvas) d-width)\n                  (= (.-height canvas) d-height))\n      (set! (.-height canvas) d-height)\n      (set! (.-width canvas) d-width))))\n\n(defn set-gl-viewport!\n  [gl]\n  (let [width (aget gl \"canvas\" \"width\")\n        height (aget gl \"canvas\" \"height\")]\n    (.viewport gl 0 0 width height)))\n\n(defn clear-canvas!\n  [gl]\n  (.clearColor gl 0 0 0 0)\n  (.clear gl (.-COLOR_BUFFER_BIT gl)))\n\n(defn set-rectangle!\n  [gl x y width height]\n  (let [x1 x\n        x2 (+ x width)\n        y1 y\n        y2 (+ y height)]\n    ;; bufferData can be called since we have t bounded....\n    (.bufferData gl (.-ARRAY_BUFFER gl)\n                 (js/Float32Array. [x1 y1\n                                    x2 y1\n                                    x1 y2\n                                    x1 y2\n                                    x2 y1\n                                    x2 y2])\n                 (.-STATIC_DRAW gl))))\n\n(defn random-int\n  [range]\n  (Math/floor (* range (Math/random))))\n\n(defn initialize-gl!\n  [gl]\n  (let [vs (create-shader gl (.-VERTEX_SHADER gl) (:vs shaders))\n        fs (create-shader gl (.-FRAGMENT_SHADER gl) (:fs shaders))\n        program (create-program gl vs fs)\n        ]\n    program\n    ))\n\n(defn draw-scene!\n  [gl program]\n  (let [position-attribute-location (.getAttribLocation gl program \"a_position\")\n        uniform-location (.getUniformLocation gl program \"u_resolution\")\n        position-buffer (.createBuffer gl)]\n    (resize-canvas-to-display-size gl)\n    (set-gl-viewport! gl)\n    (clear-canvas! gl)\n    (.useProgram gl program)\n\n    ;; tell webgl how to take data from our buffer\n    (.enableVertexAttribArray gl position-attribute-location)\n\n    ;; bind position-buffer to some webgl global scope..\n    (.bindBuffer gl (.-ARRAY_BUFFER gl) position-buffer)\n\n    (.uniform2f gl uniform-location (aget gl \"canvas\" \"width\") (aget gl \"canvas\" \"height\"))\n    (.bindBuffer gl (.-ARRAY_BUFFER gl) position-buffer)\n    (let [size 2\n          type (.-FLOAT gl)\n          normalize false\n          stride 0\n          offset 0]\n      (.vertexAttribPointer gl position-attribute-location size type normalize stride offset))\n\n    (let [uniform-color-location (.getUniformLocation gl program \"u_color\")]\n      (doseq [ii (range 0 10)]\n        (set-rectangle! gl (random-int 300) (random-int 300) (random-int 300) (random-int 300))\n        (.uniform4f gl uniform-color-location (Math/random) (Math/random) (Math/random) 1)\n        (.drawArrays gl (.-TRIANGLES gl) 0 6)\n        ))\n    )\n  )\n\n(let [program (initialize-gl! gl)]\n  (draw-scene! gl program)\n\n  ;(let [primitive-type (.-TRIANGLES gl)\n  ;      offset 0\n  ;      count 6\n  ;      ]\n  ;  (.drawArrays gl primitive-type offset count))\n\n  )\n\n\n\n\n"]}